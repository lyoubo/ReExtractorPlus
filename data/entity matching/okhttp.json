{
  "results": [
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "a55e0090c999d155e4e588a34d9792a510ad8c68",
      "url": "https://github.com/square/okhttp/commit/a55e0090c999d155e4e588a34d9792a510ad8c68",
      "commonMatching": [
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "trueDuplexClientWritesFirst",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 88,
            "endLine": 129,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "trueDuplexClientWritesFirst",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 87,
            "endLine": 129,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "trueDuplexServerWritesFirst",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 131,
            "endLine": 172,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "trueDuplexServerWritesFirst",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 131,
            "endLine": 173,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "clientReadsHeadersDataTrailers",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 174,
            "endLine": 200,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "clientReadsHeadersDataTrailers",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 175,
            "endLine": 202,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "serverReadsHeadersData",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 202,
            "endLine": 231,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "serverReadsHeadersData",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 204,
            "endLine": 234,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "requestBodyEndsAfterResponseBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 233,
            "endLine": 265,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "requestBodyEndsAfterResponseBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 236,
            "endLine": 269,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWith100Continue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 267,
            "endLine": 298,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWith100Continue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 271,
            "endLine": 303,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithRedirect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 300,
            "endLine": 367,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithRedirect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 305,
            "endLine": 373,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithAuthChallenge",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 369,
            "endLine": 427,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithAuthChallenge",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 375,
            "endLine": 435,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "fullCallTimeoutDoesNotApplyOnceConnected",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 452,
            "endLine": 487,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "fullCallTimeoutDoesNotApplyOnceConnected",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 460,
            "endLine": 496,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithRewriteInterceptors",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 489,
            "endLine": 523,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithRewriteInterceptors",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 498,
            "endLine": 533,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "serverCancelsRequestBodyAndSendsResponseBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 525,
            "endLine": 581,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "serverCancelsRequestBodyAndSendsResponseBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 535,
            "endLine": 592,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "headersReadTimeoutDoesNotStartUntilLastRequestBodyByteFire",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 583,
            "endLine": 610,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "headersReadTimeoutDoesNotStartUntilLastRequestBodyByteFire",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 594,
            "endLine": 621,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Class",
            "name": "DuplexTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 50,
            "endLine": 747,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Class",
            "name": "DuplexTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 49,
            "endLine": 751,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public trueDuplexClientWritesFirst() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockStreamHandler=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockStreamHandler().receiveRequest(\"request A\\n\").sendResponse(\"response B\\n\").receiveRequest(\"request C\\n\").sendResponse(\"response D\\n\").receiveRequest(\"request E\\n\").sendResponse(\"response F\\n\").exhaustRequest().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 90,
            "endLine": 101,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public trueDuplexClientWritesFirst() : void",
            "type": "Statement",
            "name": "MockStreamHandler body=new MockStreamHandler().receiveRequest(\"request A\\n\").sendResponse(\"response B\\n\").receiveRequest(\"request C\\n\").sendResponse(\"response D\\n\").receiveRequest(\"request E\\n\").sendResponse(\"response F\\n\").exhaustRequest().exhaustResponse();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 89,
            "endLine": 97,
            "startColumn": 5,
            "endColumn": 28
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public trueDuplexClientWritesFirst() : void",
            "type": "Statement",
            "name": "mockStreamHandler.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 128,
            "endLine": 128,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public trueDuplexClientWritesFirst() : void",
            "type": "Statement",
            "name": "body.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 128,
            "endLine": 128,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public trueDuplexServerWritesFirst() : void",
            "type": "Statement",
            "name": "mockStreamHandler.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 171,
            "endLine": 171,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public trueDuplexServerWritesFirst() : void",
            "type": "Statement",
            "name": "body.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 172,
            "endLine": 172,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public trueDuplexServerWritesFirst() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockStreamHandler=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockStreamHandler().sendResponse(\"response A\\n\").receiveRequest(\"request B\\n\").sendResponse(\"response C\\n\").receiveRequest(\"request D\\n\").sendResponse(\"response E\\n\").receiveRequest(\"request F\\n\").exhaustResponse().exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 133,
            "endLine": 144,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public trueDuplexServerWritesFirst() : void",
            "type": "Statement",
            "name": "MockStreamHandler body=new MockStreamHandler().sendResponse(\"response A\\n\").receiveRequest(\"request B\\n\").sendResponse(\"response C\\n\").receiveRequest(\"request D\\n\").sendResponse(\"response E\\n\").receiveRequest(\"request F\\n\").exhaustResponse().exhaustRequest();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 133,
            "endLine": 141,
            "startColumn": 5,
            "endColumn": 27
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientReadsHeadersDataTrailers() : void",
            "type": "Statement",
            "name": "mockStreamHandler.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 199,
            "endLine": 199,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public clientReadsHeadersDataTrailers() : void",
            "type": "Statement",
            "name": "body.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 201,
            "endLine": 201,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientReadsHeadersDataTrailers() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockStreamHandler=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders().addHeader(\"h1\",\"v1\").addHeader(\"h2\",\"v2\").trailers(Headers.of(\"trailers\",\"boom\")),new MockStreamHandler().sendResponse(\"ok\").exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 176,
            "endLine": 184,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public clientReadsHeadersDataTrailers() : void",
            "type": "Statement",
            "name": "MockStreamHandler body=new MockStreamHandler().sendResponse(\"ok\").exhaustResponse();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 177,
            "endLine": 179,
            "startColumn": 5,
            "endColumn": 28
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public serverReadsHeadersData() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockStreamHandler=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders().addHeader(\"h1\",\"v1\").addHeader(\"h2\",\"v2\"),new MockStreamHandler().exhaustResponse().receiveRequest(\"hey\\n\").receiveRequest(\"whats going on\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 206,
            "endLine": 215,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public serverReadsHeadersData() : void",
            "type": "Statement",
            "name": "MockStreamHandler body=new MockStreamHandler().exhaustResponse().receiveRequest(\"hey\\n\").receiveRequest(\"whats going on\\n\").exhaustRequest();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 208,
            "endLine": 212,
            "startColumn": 5,
            "endColumn": 27
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public serverReadsHeadersData() : void",
            "type": "Statement",
            "name": "mockStreamHandler.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 230,
            "endLine": 230,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public serverReadsHeadersData() : void",
            "type": "Statement",
            "name": "body.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 233,
            "endLine": 233,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestBodyEndsAfterResponseBody() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockStreamHandler=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockStreamHandler().exhaustResponse().receiveRequest(\"request A\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 235,
            "endLine": 241,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public requestBodyEndsAfterResponseBody() : void",
            "type": "Statement",
            "name": "MockStreamHandler body=new MockStreamHandler().exhaustResponse().receiveRequest(\"request A\\n\").exhaustRequest();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 238,
            "endLine": 241,
            "startColumn": 5,
            "endColumn": 27
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestBodyEndsAfterResponseBody() : void",
            "type": "Statement",
            "name": "mockStreamHandler.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 257,
            "endLine": 257,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public requestBodyEndsAfterResponseBody() : void",
            "type": "Statement",
            "name": "body.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 261,
            "endLine": 261,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWith100Continue() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockStreamHandler=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders().add100Continue(),new MockStreamHandler().receiveRequest(\"request body\\n\").sendResponse(\"response body\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 270,
            "endLine": 277,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public duplexWith100Continue() : void",
            "type": "Statement",
            "name": "MockStreamHandler body=new MockStreamHandler().receiveRequest(\"request body\\n\").sendResponse(\"response body\\n\").exhaustRequest();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 274,
            "endLine": 277,
            "startColumn": 5,
            "endColumn": 27
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWith100Continue() : void",
            "type": "Statement",
            "name": "mockStreamHandler.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 297,
            "endLine": 297,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public duplexWith100Continue() : void",
            "type": "Statement",
            "name": "body.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 302,
            "endLine": 302,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithRedirect() : void",
            "type": "Statement",
            "name": "mockStreamHandler.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 358,
            "endLine": 358,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public duplexWithRedirect() : void",
            "type": "Statement",
            "name": "body.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 364,
            "endLine": 364,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithRedirect() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockStreamHandler=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders().code(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: /b\"),new MockStreamHandler().sendResponse(\"/a has moved!\\n\",duplexResponseSent).requestIOException().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 326,
            "endLine": 334,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public duplexWithRedirect() : void",
            "type": "Statement",
            "name": "MockStreamHandler body=new MockStreamHandler().sendResponse(\"/a has moved!\\n\",duplexResponseSent).requestIOException().exhaustResponse();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 331,
            "endLine": 334,
            "startColumn": 5,
            "endColumn": 28
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockResponseBody1=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders().code(HttpURLConnection.HTTP_UNAUTHORIZED),new MockStreamHandler().sendResponse(\"please authenticate!\\n\").requestIOException().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 381,
            "endLine": 388,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "MockStreamHandler body1=new MockStreamHandler().sendResponse(\"please authenticate!\\n\").requestIOException().exhaustResponse();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 387,
            "endLine": 390,
            "startColumn": 5,
            "endColumn": 28
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "mockResponseBody2.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 423,
            "endLine": 423,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "body.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 431,
            "endLine": 431,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "mockResponseBody1.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 414,
            "endLine": 414,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "body1.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 422,
            "endLine": 422,
            "startColumn": 5,
            "endColumn": 26
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockResponseBody2=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockStreamHandler().sendResponse(\"response body\\n\").exhaustResponse().receiveRequest(\"request body\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 389,
            "endLine": 396,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "MockStreamHandler body=new MockStreamHandler().sendResponse(\"response body\\n\").exhaustResponse().receiveRequest(\"request body\\n\").exhaustRequest();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 396,
            "endLine": 400,
            "startColumn": 5,
            "endColumn": 27
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public fullCallTimeoutDoesNotApplyOnceConnected() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockStreamHandler=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockStreamHandler().sendResponse(\"response A\\n\").sleep(750,TimeUnit.MILLISECONDS).sendResponse(\"response B\\n\").receiveRequest(\"request C\\n\").exhaustResponse().exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 455,
            "endLine": 464,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public fullCallTimeoutDoesNotApplyOnceConnected() : void",
            "type": "Statement",
            "name": "MockStreamHandler body=new MockStreamHandler().sendResponse(\"response A\\n\").sleep(750,TimeUnit.MILLISECONDS).sendResponse(\"response B\\n\").receiveRequest(\"request C\\n\").exhaustResponse().exhaustRequest();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 463,
            "endLine": 469,
            "startColumn": 5,
            "endColumn": 27
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public fullCallTimeoutDoesNotApplyOnceConnected() : void",
            "type": "Statement",
            "name": "mockStreamHandler.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 486,
            "endLine": 486,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public fullCallTimeoutDoesNotApplyOnceConnected() : void",
            "type": "Statement",
            "name": "body.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 495,
            "endLine": 495,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithRewriteInterceptors() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockStreamHandler=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockStreamHandler().receiveRequest(\"REQUEST A\\n\").sendResponse(\"response B\\n\").exhaustRequest().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 491,
            "endLine": 498,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public duplexWithRewriteInterceptors() : void",
            "type": "Statement",
            "name": "MockStreamHandler body=new MockStreamHandler().receiveRequest(\"REQUEST A\\n\").sendResponse(\"response B\\n\").exhaustRequest().exhaustResponse();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 500,
            "endLine": 504,
            "startColumn": 5,
            "endColumn": 28
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithRewriteInterceptors() : void",
            "type": "Statement",
            "name": "mockStreamHandler.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 522,
            "endLine": 522,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public duplexWithRewriteInterceptors() : void",
            "type": "Statement",
            "name": "body.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 532,
            "endLine": 532,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public serverCancelsRequestBodyAndSendsResponseBody() : void",
            "type": "Statement",
            "name": "MockStreamHandler mockStreamHandler=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockStreamHandler().sendResponse(\"success!\").exhaustResponse().cancelStream());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 542,
            "endLine": 548,
            "startColumn": 5,
            "endColumn": 30
          },
          "rightSideLocation": {
            "container": "public serverCancelsRequestBodyAndSendsResponseBody() : void",
            "type": "Statement",
            "name": "MockStreamHandler body=new MockStreamHandler().sendResponse(\"success!\").exhaustResponse().cancelStream();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 552,
            "endLine": 555,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public serverCancelsRequestBodyAndSendsResponseBody() : void",
            "type": "Statement",
            "name": "mockStreamHandler.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 578,
            "endLine": 578,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public serverCancelsRequestBodyAndSendsResponseBody() : void",
            "type": "Statement",
            "name": "body.awaitSuccess();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 589,
            "endLine": 589,
            "startColumn": 5,
            "endColumn": 25
          },
          "validation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockStreamHandler) : MockStreamHandler",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "container": "public trueDuplexClientWritesFirst() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().streamHandler(body).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 98,
            "endLine": 101,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockStreamHandler) : MockStreamHandler",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "container": "public trueDuplexServerWritesFirst() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().streamHandler(body).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 142,
            "endLine": 145,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockStreamHandler) : MockStreamHandler",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "container": "public clientReadsHeadersDataTrailers() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().addHeader(\"h1\",\"v1\").addHeader(\"h2\",\"v2\").trailers(Headers.of(\"trailers\",\"boom\")).streamHandler(body).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 180,
            "endLine": 186,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockStreamHandler) : MockStreamHandler",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "container": "public serverReadsHeadersData() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().addHeader(\"h1\",\"v1\").addHeader(\"h2\",\"v2\").streamHandler(body).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 213,
            "endLine": 218,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockStreamHandler) : MockStreamHandler",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "container": "public requestBodyEndsAfterResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().streamHandler(body).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 242,
            "endLine": 245,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockStreamHandler) : MockStreamHandler",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "container": "public duplexWith100Continue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().add100Continue().streamHandler(body).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 278,
            "endLine": 282,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockStreamHandler) : MockStreamHandler",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "container": "public duplexWithRedirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().code(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: /b\").streamHandler(body).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 335,
            "endLine": 340,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockStreamHandler) : MockStreamHandler",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().streamHandler(body).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 401,
            "endLine": 404,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockStreamHandler) : MockStreamHandler",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "container": "public fullCallTimeoutDoesNotApplyOnceConnected() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().streamHandler(body).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 470,
            "endLine": 473,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockStreamHandler) : MockStreamHandler",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "container": "public duplexWithRewriteInterceptors() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().streamHandler(body).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 505,
            "endLine": 508,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockStreamHandler) : MockStreamHandler",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 694,
            "endLine": 694,
            "startColumn": 5,
            "endColumn": 37
          },
          "rightSideLocation": {
            "container": "public serverCancelsRequestBodyAndSendsResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().streamHandler(body).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 556,
            "endLine": 559,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "00fe12fee5dc39de9e8dba3f6af6c4e55e6eb0d1",
      "url": "https://github.com/square/okhttp/commit/00fe12fee5dc39de9e8dba3f6af6c4e55e6eb0d1",
      "commonMatching": [
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "connectTimeout",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 644,
            "endLine": 687,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "connectTimeout",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 645,
            "endLine": 682,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Class",
            "name": "InterceptorTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 52,
            "endLine": 925,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Class",
            "name": "InterceptorTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 53,
            "endLine": 920,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public connectTimeout() : void",
            "type": "Statement",
            "name": "Request request1=new Request.Builder().url(\"http://\" + serverSocket.getInetAddress().getCanonicalHostName() + \":\"+ serverSocket.getLocalPort()).build();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 670,
            "endLine": 677,
            "startColumn": 5,
            "endColumn": 22
          },
          "rightSideLocation": {
            "container": "public connectTimeout() : void",
            "type": "Statement",
            "name": "Request request1=new Request.Builder().url(\"http://\" + TestUtil.UNREACHABLE_ADDRESS_IPV4).build();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 666,
            "endLine": 669,
            "startColumn": 5,
            "endColumn": 22
          },
          "validation": true
        }
      ],
      "ourApproach": [],
      "baseline": [
        {
          "leftSideLocation": {
            "container": "public connectTimeout() : void",
            "type": "Statement",
            "name": "InetAddress localhost=InetAddress.getLoopbackAddress();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 659,
            "endLine": 659,
            "startColumn": 5,
            "endColumn": 62
          },
          "rightSideLocation": {
            "container": "public connectTimeout() : void",
            "type": "Statement",
            "name": "long startNanos=System.nanoTime();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 672,
            "endLine": 672,
            "startColumn": 5,
            "endColumn": 41
          },
          "validation": false
        }
      ]
    },
    {
      "repository": "https://github.com/square/okhttp.git",
      "sha1": "fe15ccda5b2be87e6850e0e5002b9268e46c37aa",
      "url": "https://github.com/square/okhttp/commit/fe15ccda5b2be87e6850e0e5002b9268e46c37aa",
      "commonMatching": [
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "defaultMockResponse",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 85,
            "endLine": 89,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "defaultMockResponse",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 84,
            "endLine": 88,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "setResponseMockReason",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 91,
            "endLine": 107,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "setResponseMockReason",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 90,
            "endLine": 106,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "setStatusControlsWholeStatusLine",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 109,
            "endLine": 113,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "setStatusControlsWholeStatusLine",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 108,
            "endLine": 112,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "setBodyAdjustsHeaders",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 115,
            "endLine": 119,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "setBodyAdjustsHeaders",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 114,
            "endLine": 119,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "mockResponseAddHeader",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 121,
            "endLine": 127,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "mockResponseAddHeader",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 121,
            "endLine": 127,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "mockResponseSetHeader",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 129,
            "endLine": 137,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "mockResponseSetHeader",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 129,
            "endLine": 137,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "mockResponseSetHeaders",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 139,
            "endLine": 148,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "mockResponseSetHeaders",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 139,
            "endLine": 148,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "regularResponse",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 150,
            "endLine": 167,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "regularResponse",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 150,
            "endLine": 167,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "redirect",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 169,
            "endLine": 185,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "redirect",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 169,
            "endLine": 188,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "dispatchBlocksWaitingForEnqueue",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 187,
            "endLine": 204,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "dispatchBlocksWaitingForEnqueue",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 190,
            "endLine": 209,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "nonHexadecimalChunkSize",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 206,
            "endLine": 219,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "nonHexadecimalChunkSize",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 211,
            "endLine": 225,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "responseTimeout",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 221,
            "endLine": 249,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "responseTimeout",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 227,
            "endLine": 258,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "disconnectAtStart",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 251,
            "endLine": 262,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "disconnectAtStart",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 260,
            "endLine": 273,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "clearDispatcherQueue",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 264,
            "endLine": 271,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "clearDispatcherQueue",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 275,
            "endLine": 286,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "throttleRequest",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 273,
            "endLine": 292,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "throttleRequest",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 288,
            "endLine": 308,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "throttleResponse",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 294,
            "endLine": 318,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "throttleResponse",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 310,
            "endLine": 335,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "delayResponse",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 320,
            "endLine": 337,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "delayResponse",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 337,
            "endLine": 355,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "disconnectRequestHalfway",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 339,
            "endLine": 368,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "disconnectRequestHalfway",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 357,
            "endLine": 388,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "disconnectResponseHalfway",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 370,
            "endLine": 387,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "disconnectResponseHalfway",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 390,
            "endLine": 408,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "requestUrlReconstructed",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 447,
            "endLine": 467,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "requestUrlReconstructed",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 468,
            "endLine": 490,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "shutdownServerAfterRequest",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 469,
            "endLine": 485,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "shutdownServerAfterRequest",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 492,
            "endLine": 510,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "http100Continue",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 487,
            "endLine": 502,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "http100Continue",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 512,
            "endLine": 529,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "multiple1xxResponses",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 504,
            "endLine": 521,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "multiple1xxResponses",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 531,
            "endLine": 549,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "https",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 553,
            "endLine": 577,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "https",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 581,
            "endLine": 607,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "httpsWithClientAuth",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 579,
            "endLine": 628,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "httpsWithClientAuth",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 609,
            "endLine": 660,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "proxiedRequestGetsCorrectRequestUrl",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 630,
            "endLine": 647,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "proxiedRequestGetsCorrectRequestUrl",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 662,
            "endLine": 681,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Class",
            "name": "MockWebServerTest",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 66,
            "endLine": 676,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Class",
            "name": "MockWebServerTest",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 65,
            "endLine": 710,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.dnsoverhttps.DnsOverHttpsTest",
            "type": "Method",
            "name": "usesCache",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 173,
            "endLine": 194,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.dnsoverhttps.DnsOverHttpsTest",
            "type": "Method",
            "name": "usesCache",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 173,
            "endLine": 197,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.dnsoverhttps.DnsOverHttpsTest",
            "type": "Method",
            "name": "usesCacheOnlyIfFresh",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 196,
            "endLine": 229,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.dnsoverhttps.DnsOverHttpsTest",
            "type": "Method",
            "name": "usesCacheOnlyIfFresh",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 199,
            "endLine": 238,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.dnsoverhttps.DnsOverHttpsTest",
            "type": "Method",
            "name": "dnsResponse",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 231,
            "endLine": 235,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.dnsoverhttps.DnsOverHttpsTest",
            "type": "Method",
            "name": "dnsResponse",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 240,
            "endLine": 246,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.dnsoverhttps.DnsOverHttpsTest",
            "type": "Class",
            "name": "DnsOverHttpsTest",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 52,
            "endLine": 254,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.dnsoverhttps.DnsOverHttpsTest",
            "type": "Class",
            "name": "DnsOverHttpsTest",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 52,
            "endLine": 265,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "basicResponseBody",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 167,
            "endLine": 185,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "basicResponseBody",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 167,
            "endLine": 186,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "basicChunkedResponseBody",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 187,
            "endLine": 205,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "basicChunkedResponseBody",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 188,
            "endLine": 207,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "headersResponseBody",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 378,
            "endLine": 408,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "headersResponseBody",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 380,
            "endLine": 411,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyGetNoBody",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 448,
            "endLine": 473,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyGetNoBody",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 451,
            "endLine": 477,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyResponseBody",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 512,
            "endLine": 546,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyResponseBody",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 516,
            "endLine": 551,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyResponseBodyChunked",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 548,
            "endLine": 582,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyResponseBodyChunked",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 553,
            "endLine": 588,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyRequestGzipEncoded",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 584,
            "endLine": 618,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyRequestGzipEncoded",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 590,
            "endLine": 625,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyResponseGzipEncoded",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 620,
            "endLine": 660,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyResponseGzipEncoded",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 627,
            "endLine": 668,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyResponseUnknownEncoded",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 662,
            "endLine": 697,
            "startColumn": 3,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyResponseUnknownEncoded",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 670,
            "endLine": 706,
            "startColumn": 3,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyResponseIsStreaming",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 699,
            "endLine": 739,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyResponseIsStreaming",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 708,
            "endLine": 749,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyGetMalformedCharset",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 741,
            "endLine": 775,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "bodyGetMalformedCharset",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 751,
            "endLine": 786,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "responseBodyIsBinary",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 777,
            "endLine": 817,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "responseBodyIsBinary",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 788,
            "endLine": 829,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "headersAreRedacted",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 861,
            "endLine": 916,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "headersAreRedacted",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 873,
            "endLine": 929,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "duplexRequestsAreNotLogged",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 918,
            "endLine": 962,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "duplexRequestsAreNotLogged",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 931,
            "endLine": 976,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "oneShotRequestsAreNotLogged",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 964,
            "endLine": 1007,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Method",
            "name": "oneShotRequestsAreNotLogged",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 978,
            "endLine": 1022,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Class",
            "name": "HttpLoggingInterceptorTest",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 55,
            "endLine": 1040,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.HttpLoggingInterceptorTest",
            "type": "Class",
            "name": "HttpLoggingInterceptorTest",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 55,
            "endLine": 1055,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.LoggingEventListenerTest",
            "type": "Method",
            "name": "get",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java",
            "startLine": 76,
            "endLine": 111,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.LoggingEventListenerTest",
            "type": "Method",
            "name": "get",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java",
            "startLine": 76,
            "endLine": 114,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.LoggingEventListenerTest",
            "type": "Method",
            "name": "connectFail",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java",
            "startLine": 219,
            "endLine": 248,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.LoggingEventListenerTest",
            "type": "Method",
            "name": "connectFail",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java",
            "startLine": 222,
            "endLine": 253,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.logging.LoggingEventListenerTest",
            "type": "Class",
            "name": "LoggingEventListenerTest",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java",
            "startLine": 48,
            "endLine": 280,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.logging.LoggingEventListenerTest",
            "type": "Class",
            "name": "LoggingEventListenerTest",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java",
            "startLine": 48,
            "endLine": 285,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "event",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 58,
            "endLine": 70,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "event",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 58,
            "endLine": 72,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "cancelInEventShortCircuits",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 72,
            "endLine": 81,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "cancelInEventShortCircuits",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 74,
            "endLine": 85,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "badContentType",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 83,
            "endLine": 90,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "badContentType",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 87,
            "endLine": 96,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "badResponseCode",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 92,
            "endLine": 99,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "badResponseCode",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 98,
            "endLine": 109,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "fullCallTimeoutDoesNotApplyOnceConnected",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 101,
            "endLine": 118,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "fullCallTimeoutDoesNotApplyOnceConnected",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 111,
            "endLine": 129,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "fullCallTimeoutAppliesToSetup",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 120,
            "endLine": 132,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "fullCallTimeoutAppliesToSetup",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 131,
            "endLine": 144,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "retainsAccept",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 134,
            "endLine": 146,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "retainsAccept",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 146,
            "endLine": 160,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "setsMissingAccept",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 148,
            "endLine": 160,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Method",
            "name": "setsMissingAccept",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 162,
            "endLine": 176,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Class",
            "name": "EventSourceHttpTest",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 39,
            "endLine": 179,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourceHttpTest",
            "type": "Class",
            "name": "EventSourceHttpTest",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 39,
            "endLine": 195,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourcesHttpTest",
            "type": "Method",
            "name": "processResponse",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.java",
            "startLine": 54,
            "endLine": 68,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourcesHttpTest",
            "type": "Method",
            "name": "processResponse",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.java",
            "startLine": 54,
            "endLine": 70,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourcesHttpTest",
            "type": "Method",
            "name": "cancelShortCircuits",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.java",
            "startLine": 70,
            "endLine": 84,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourcesHttpTest",
            "type": "Method",
            "name": "cancelShortCircuits",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.java",
            "startLine": 72,
            "endLine": 88,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.sse.internal.EventSourcesHttpTest",
            "type": "Class",
            "name": "EventSourcesHttpTest",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.java",
            "startLine": 35,
            "endLine": 85,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.sse.internal.EventSourcesHttpTest",
            "type": "Class",
            "name": "EventSourcesHttpTest",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.java",
            "startLine": 35,
            "endLine": 89,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 168,
            "endLine": 217,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 167,
            "endLine": 217,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testResponseCaching",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 231,
            "endLine": 269,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testResponseCaching",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 231,
            "endLine": 269,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "secureResponseCaching",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 271,
            "endLine": 308,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "secureResponseCaching",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 271,
            "endLine": 309,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "responseCachingAndRedirects",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 310,
            "endLine": 334,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "responseCachingAndRedirects",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 311,
            "endLine": 338,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "redirectToCachedResult",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 336,
            "endLine": 367,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "redirectToCachedResult",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 340,
            "endLine": 374,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "secureResponseCachingAndRedirects",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 369,
            "endLine": 403,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "secureResponseCachingAndRedirects",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 376,
            "endLine": 413,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "secureResponseCachingAndProtocolRedirects",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 405,
            "endLine": 443,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "secureResponseCachingAndProtocolRedirects",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 415,
            "endLine": 456,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "temporaryRedirectCachedWithCachingHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 469,
            "endLine": 486,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "temporaryRedirectCachedWithCachingHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 482,
            "endLine": 503,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "temporaryRedirectNotCachedWithoutCachingHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 488,
            "endLine": 500,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "temporaryRedirectNotCachedWithoutCachingHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 505,
            "endLine": 520,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cachedRedirect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 502,
            "endLine": 520,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cachedRedirect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 522,
            "endLine": 543,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testServerPrematureDisconnect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 536,
            "endLine": 559,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testServerPrematureDisconnect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 559,
            "endLine": 583,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testClientPrematureDisconnect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 573,
            "endLine": 598,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testClientPrematureDisconnect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 597,
            "endLine": 623,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "defaultExpirationDateFullyCachedForLessThan24Hours",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 600,
            "endLine": 617,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "defaultExpirationDateFullyCachedForLessThan24Hours",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 625,
            "endLine": 643,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "defaultExpirationDateConditionallyCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 619,
            "endLine": 630,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "defaultExpirationDateConditionallyCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 645,
            "endLine": 657,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "defaultExpirationDateFullyCachedForMoreThan24Hours",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 632,
            "endLine": 647,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "defaultExpirationDateFullyCachedForMoreThan24Hours",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 659,
            "endLine": 675,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "noDefaultExpirationForUrlsWithQueryString",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 649,
            "endLine": 660,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "noDefaultExpirationForUrlsWithQueryString",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 677,
            "endLine": 690,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "expirationDateInThePastWithLastModifiedHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 662,
            "endLine": 669,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "expirationDateInThePastWithLastModifiedHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 692,
            "endLine": 700,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "expirationDateInThePastWithNoLastModifiedHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 671,
            "endLine": 674,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "expirationDateInThePastWithNoLastModifiedHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 702,
            "endLine": 706,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "expirationDateInTheFuture",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 676,
            "endLine": 679,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "expirationDateInTheFuture",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 708,
            "endLine": 712,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgePreferredWithMaxAgeAndExpires",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 681,
            "endLine": 686,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgePreferredWithMaxAgeAndExpires",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 714,
            "endLine": 720,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeInThePastWithDateAndLastModifiedHeaders",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 688,
            "endLine": 696,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeInThePastWithDateAndLastModifiedHeaders",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 722,
            "endLine": 731,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeInThePastWithDateHeaderButNoLastModifiedHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 698,
            "endLine": 704,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeInThePastWithDateHeaderButNoLastModifiedHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 733,
            "endLine": 740,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeInTheFutureWithDateHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 706,
            "endLine": 710,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeInTheFutureWithDateHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 742,
            "endLine": 747,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeInTheFutureWithNoDateHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 712,
            "endLine": 715,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeInTheFutureWithNoDateHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 749,
            "endLine": 753,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeWithLastModifiedButNoServedDate",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 717,
            "endLine": 721,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeWithLastModifiedButNoServedDate",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 755,
            "endLine": 760,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeInTheFutureWithDateAndLastModifiedHeaders",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 723,
            "endLine": 728,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgeInTheFutureWithDateAndLastModifiedHeaders",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 762,
            "endLine": 768,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgePreferredOverLowerSharedMaxAge",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 730,
            "endLine": 735,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgePreferredOverLowerSharedMaxAge",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 770,
            "endLine": 776,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgePreferredOverHigherMaxAge",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 737,
            "endLine": 742,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "maxAgePreferredOverHigherMaxAge",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 778,
            "endLine": 784,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testRequestMethod",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 774,
            "endLine": 800,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testRequestMethod",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 816,
            "endLine": 844,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testMethodInvalidates",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 820,
            "endLine": 844,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testMethodInvalidates",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 864,
            "endLine": 891,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "postInvalidatesCacheWithUncacheableResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 846,
            "endLine": 871,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "postInvalidatesCacheWithUncacheableResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 893,
            "endLine": 921,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "putInvalidatesWithNoContentResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 873,
            "endLine": 898,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "putInvalidatesWithNoContentResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 923,
            "endLine": 951,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "etag",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 900,
            "endLine": 904,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "etag",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 953,
            "endLine": 958,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "etagAndExpirationDateInThePast",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 906,
            "endLine": 915,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "etagAndExpirationDateInThePast",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 960,
            "endLine": 970,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "etagAndExpirationDateInTheFuture",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 917,
            "endLine": 922,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "etagAndExpirationDateInTheFuture",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 972,
            "endLine": 978,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cacheControlNoCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 924,
            "endLine": 927,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cacheControlNoCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 980,
            "endLine": 984,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cacheControlNoCacheAndExpirationDateInTheFuture",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 929,
            "endLine": 937,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cacheControlNoCacheAndExpirationDateInTheFuture",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 986,
            "endLine": 995,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "pragmaNoCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 939,
            "endLine": 942,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "pragmaNoCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 997,
            "endLine": 1001,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "pragmaNoCacheAndExpirationDateInTheFuture",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 944,
            "endLine": 952,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "pragmaNoCacheAndExpirationDateInTheFuture",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1003,
            "endLine": 1012,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cacheControlNoStore",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 954,
            "endLine": 957,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cacheControlNoStore",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1014,
            "endLine": 1018,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cacheControlNoStoreAndExpirationDateInTheFuture",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 959,
            "endLine": 964,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cacheControlNoStoreAndExpirationDateInTheFuture",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1020,
            "endLine": 1026,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "partialRangeResponsesDoNotCorruptCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 966,
            "endLine": 987,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "partialRangeResponsesDoNotCorruptCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1028,
            "endLine": 1051,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "serverReturnsDocumentOlderThanCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 989,
            "endLine": 1012,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "serverReturnsDocumentOlderThanCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1053,
            "endLine": 1079,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "clientSideNoStore",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1014,
            "endLine": 1034,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "clientSideNoStore",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1081,
            "endLine": 1103,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "nonIdentityEncodingAndConditionalCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1036,
            "endLine": 1040,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "nonIdentityEncodingAndConditionalCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1105,
            "endLine": 1110,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "nonIdentityEncodingAndFullCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1042,
            "endLine": 1046,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "nonIdentityEncodingAndFullCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1112,
            "endLine": 1117,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertNonIdentityEncodingCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1048,
            "endLine": 1063,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertNonIdentityEncodingCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1119,
            "endLine": 1137,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1065,
            "endLine": 1081,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1139,
            "endLine": 1158,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1083,
            "endLine": 1100,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1160,
            "endLine": 1180,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "notModifiedSpecifiesEncoding",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1102,
            "endLine": 1117,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "notModifiedSpecifiesEncoding",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1182,
            "endLine": 1200,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "gzipAndVaryOnAcceptEncoding",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1119,
            "endLine": 1131,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "gzipAndVaryOnAcceptEncoding",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1202,
            "endLine": 1216,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "conditionalCacheHitIsNotDoublePooled",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1133,
            "endLine": 1146,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "conditionalCacheHitIsNotDoublePooled",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1218,
            "endLine": 1233,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "expiresDateBeforeModifiedDate",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1148,
            "endLine": 1152,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "expiresDateBeforeModifiedDate",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1235,
            "endLine": 1240,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestMaxAge",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1154,
            "endLine": 1171,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestMaxAge",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1242,
            "endLine": 1261,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestMinFresh",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1173,
            "endLine": 1189,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestMinFresh",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1263,
            "endLine": 1281,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestMaxStale",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1191,
            "endLine": 1209,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestMaxStale",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1283,
            "endLine": 1303,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestMaxStaleDirectiveWithNoValue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1211,
            "endLine": 1231,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestMaxStaleDirectiveWithNoValue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1305,
            "endLine": 1327,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestMaxStaleNotHonoredWithMustRevalidate",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1233,
            "endLine": 1249,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestMaxStaleNotHonoredWithMustRevalidate",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1329,
            "endLine": 1347,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestOnlyIfCachedWithFullResponseCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1266,
            "endLine": 1282,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestOnlyIfCachedWithFullResponseCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1364,
            "endLine": 1381,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestOnlyIfCachedWithConditionalResponseCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1284,
            "endLine": 1301,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestOnlyIfCachedWithConditionalResponseCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1383,
            "endLine": 1401,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestOnlyIfCachedWithUnhelpfulResponseCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1303,
            "endLine": 1318,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestOnlyIfCachedWithUnhelpfulResponseCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1403,
            "endLine": 1419,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestCacheControlNoCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1320,
            "endLine": 1337,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestCacheControlNoCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1421,
            "endLine": 1440,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestPragmaNoCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1339,
            "endLine": 1356,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "requestPragmaNoCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1442,
            "endLine": 1461,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "clientSuppliedIfModifiedSinceWithCachedResult",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1358,
            "endLine": 1367,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "clientSuppliedIfModifiedSinceWithCachedResult",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1463,
            "endLine": 1473,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "clientSuppliedIfNoneMatchSinceWithCachedResult",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1369,
            "endLine": 1378,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "clientSuppliedIfNoneMatchSinceWithCachedResult",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1475,
            "endLine": 1485,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertClientSuppliedCondition",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1380,
            "endLine": 1399,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertClientSuppliedCondition",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1487,
            "endLine": 1509,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "retainServedDateFormat",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1401,
            "endLine": 1432,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "retainServedDateFormat",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1511,
            "endLine": 1544,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "clientSuppliedConditionWithoutCachedResult",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1434,
            "endLine": 1445,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "clientSuppliedConditionWithoutCachedResult",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1546,
            "endLine": 1558,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "authorizationRequestFullyCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1447,
            "endLine": 1462,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "authorizationRequestFullyCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1560,
            "endLine": 1577,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "contentLocationDoesNotPopulateCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1464,
            "endLine": 1474,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "contentLocationDoesNotPopulateCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1579,
            "endLine": 1591,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "connectionIsReturnedToPoolAfterConditionalSuccess",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1476,
            "endLine": 1493,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "connectionIsReturnedToPoolAfterConditionalSuccess",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1593,
            "endLine": 1613,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "statisticsConditionalCacheMiss",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1495,
            "endLine": 1514,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "statisticsConditionalCacheMiss",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1615,
            "endLine": 1637,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "statisticsConditionalCacheHit",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1516,
            "endLine": 1535,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "statisticsConditionalCacheHit",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1639,
            "endLine": 1661,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "statisticsFullCacheHit",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1537,
            "endLine": 1551,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "statisticsFullCacheHit",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1663,
            "endLine": 1678,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMatchesChangedRequestHeaderField",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1553,
            "endLine": 1575,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMatchesChangedRequestHeaderField",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1680,
            "endLine": 1704,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMatchesUnchangedRequestHeaderField",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1577,
            "endLine": 1598,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMatchesUnchangedRequestHeaderField",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1706,
            "endLine": 1729,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMatchesAbsentRequestHeaderField",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1600,
            "endLine": 1610,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMatchesAbsentRequestHeaderField",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1731,
            "endLine": 1743,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMatchesAddedRequestHeaderField",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1612,
            "endLine": 1626,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMatchesAddedRequestHeaderField",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1745,
            "endLine": 1761,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMatchesRemovedRequestHeaderField",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1628,
            "endLine": 1642,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMatchesRemovedRequestHeaderField",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1763,
            "endLine": 1779,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyFieldsAreCaseInsensitive",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1644,
            "endLine": 1665,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyFieldsAreCaseInsensitive",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1781,
            "endLine": 1804,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMultipleFieldsWithMatch",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1667,
            "endLine": 1693,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMultipleFieldsWithMatch",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1806,
            "endLine": 1834,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMultipleFieldsWithNoMatch",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1695,
            "endLine": 1721,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMultipleFieldsWithNoMatch",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1836,
            "endLine": 1864,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMultipleFieldValuesWithMatch",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1723,
            "endLine": 1747,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMultipleFieldValuesWithMatch",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1866,
            "endLine": 1892,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMultipleFieldValuesWithNoMatch",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1749,
            "endLine": 1773,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyMultipleFieldValuesWithNoMatch",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1894,
            "endLine": 1920,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyAsterisk",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1775,
            "endLine": 1785,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyAsterisk",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1922,
            "endLine": 1934,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyAndHttps",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1787,
            "endLine": 1816,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "varyAndHttps",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1936,
            "endLine": 1967,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cachePlusCookies",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1818,
            "endLine": 1838,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "cachePlusCookies",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1969,
            "endLine": 1991,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "getHeadersReturnsNetworkEndToEndHeaders",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1840,
            "endLine": 1857,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "getHeadersReturnsNetworkEndToEndHeaders",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1993,
            "endLine": 2012,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "getHeadersReturnsCachedHopByHopHeaders",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1859,
            "endLine": 1876,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "getHeadersReturnsCachedHopByHopHeaders",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2014,
            "endLine": 2033,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "getHeadersDeletesCached100LevelWarnings",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1878,
            "endLine": 1894,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "getHeadersDeletesCached100LevelWarnings",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2035,
            "endLine": 2053,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "getHeadersRetainsCached200LevelWarnings",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1896,
            "endLine": 1912,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "getHeadersRetainsCached200LevelWarnings",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2055,
            "endLine": 2073,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "doNotCachePartialResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1914,
            "endLine": 1920,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "doNotCachePartialResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2075,
            "endLine": 2082,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "conditionalHitUpdatesCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1922,
            "endLine": 1959,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "conditionalHitUpdatesCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2084,
            "endLine": 2124,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "responseSourceHeaderCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1961,
            "endLine": 1973,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "responseSourceHeaderCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2126,
            "endLine": 2139,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "responseSourceHeaderConditionalCacheFetched",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1975,
            "endLine": 1988,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "responseSourceHeaderConditionalCacheFetched",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2141,
            "endLine": 2156,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "responseSourceHeaderConditionalCacheNotFetched",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1990,
            "endLine": 2001,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "responseSourceHeaderConditionalCacheNotFetched",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2158,
            "endLine": 2171,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "responseSourceHeaderFetched",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2003,
            "endLine": 2009,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "responseSourceHeaderFetched",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2173,
            "endLine": 2180,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "emptyResponseHeaderNameFromCacheIsLenient",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2011,
            "endLine": 2022,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "emptyResponseHeaderNameFromCacheIsLenient",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2182,
            "endLine": 2194,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testGoldenCacheResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2024,
            "endLine": 2084,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "testGoldenCacheResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2196,
            "endLine": 2257,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "evictAll",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2225,
            "endLine": 2237,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "evictAll",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2398,
            "endLine": 2412,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "networkInterceptorInvokedForConditionalGet",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2239,
            "endLine": 2261,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "networkInterceptorInvokedForConditionalGet",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2414,
            "endLine": 2438,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "networkInterceptorNotInvokedForFullyCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2263,
            "endLine": 2277,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "networkInterceptorNotInvokedForFullyCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2440,
            "endLine": 2455,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "iterateCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2279,
            "endLine": 2312,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "iterateCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2457,
            "endLine": 2493,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "iteratorRemoveFromCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2314,
            "endLine": 2331,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "iteratorRemoveFromCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2495,
            "endLine": 2514,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "iteratorRemoveWithoutNextThrows",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2333,
            "endLine": 2347,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "iteratorRemoveWithoutNextThrows",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2516,
            "endLine": 2531,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "iteratorRemoveOncePerCallToNext",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2349,
            "endLine": 2366,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "iteratorRemoveOncePerCallToNext",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2533,
            "endLine": 2551,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "elementEvictedBetweenHasNextAndNext",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2368,
            "endLine": 2385,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "elementEvictedBetweenHasNextAndNext",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2553,
            "endLine": 2571,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "elementEvictedBeforeHasNextIsOmitted",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2387,
            "endLine": 2404,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "elementEvictedBeforeHasNextIsOmitted",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2573,
            "endLine": 2591,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "conditionalMissUpdatesCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2406,
            "endLine": 2429,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "conditionalMissUpdatesCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2593,
            "endLine": 2620,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "combinedCacheHeadersCanBeNonAscii",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2431,
            "endLine": 2455,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "combinedCacheHeadersCanBeNonAscii",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2622,
            "endLine": 2648,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "etagConditionCanBeNonAscii",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2457,
            "endLine": 2473,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "etagConditionCanBeNonAscii",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2650,
            "endLine": 2668,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "conditionalHitHeadersCombined",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2475,
            "endLine": 2501,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "conditionalHitHeadersCombined",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2670,
            "endLine": 2698,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertNotCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2530,
            "endLine": 2538,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertNotCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2727,
            "endLine": 2738,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertConditionallyCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2540,
            "endLine": 2576,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertConditionallyCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2740,
            "endLine": 2783,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "immutableIsCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2578,
            "endLine": 2588,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "immutableIsCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2785,
            "endLine": 2797,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "immutableIsCachedAfterMultipleCalls",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2590,
            "endLine": 2603,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "immutableIsCachedAfterMultipleCalls",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2799,
            "endLine": 2815,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "immutableIsNotCachedBeyondFreshnessLifetime",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2605,
            "endLine": 2617,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "immutableIsNotCachedBeyondFreshnessLifetime",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2817,
            "endLine": 2830,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertFullyCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2666,
            "endLine": 2673,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "assertFullyCached",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2879,
            "endLine": 2886,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Enum Constant",
            "name": "CHUNKED",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2690,
            "endLine": 2694,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Enum Constant",
            "name": "CHUNKED",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2904,
            "endLine": 2908,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Enum Constant",
            "name": "FIXED_LENGTH",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2695,
            "endLine": 2699,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Enum Constant",
            "name": "FIXED_LENGTH",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2909,
            "endLine": 2913,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Enum Constant",
            "name": "END_OF_STREAM",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2700,
            "endLine": 2706,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Enum Constant",
            "name": "END_OF_STREAM",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2914,
            "endLine": 2920,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Enum",
            "name": "TransferKind",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2689,
            "endLine": 2713,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Enum",
            "name": "TransferKind",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2903,
            "endLine": 2927,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Class",
            "name": "CacheTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 67,
            "endLine": 2723,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Class",
            "name": "CacheTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 66,
            "endLine": 2937,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Method",
            "name": "skipsOnRedirectWhenDnsDontMatch",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 278,
            "endLine": 291,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Method",
            "name": "skipsOnRedirectWhenDnsDontMatch",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 278,
            "endLine": 293,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Method",
            "name": "skipsOnRedirectWhenNotSubjectAltName",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 309,
            "endLine": 321,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Method",
            "name": "skipsOnRedirectWhenNotSubjectAltName",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 311,
            "endLine": 324,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Method",
            "name": "skipsOnRedirectWhenCertificatePinningFails",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 362,
            "endLine": 378,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Method",
            "name": "skipsOnRedirectWhenCertificatePinningFails",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 365,
            "endLine": 382,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Method",
            "name": "skipsOnRedirectWhenHostnameVerifierUsed",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 400,
            "endLine": 414,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Method",
            "name": "skipsOnRedirectWhenHostnameVerifierUsed",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 404,
            "endLine": 419,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Method",
            "name": "misdirectedRequestResponseCode",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 477,
            "endLine": 504,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Method",
            "name": "misdirectedRequestResponseCode",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 482,
            "endLine": 512,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Class",
            "name": "ConnectionCoalescingTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 45,
            "endLine": 548,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.ConnectionCoalescingTest",
            "type": "Class",
            "name": "ConnectionCoalescingTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 45,
            "endLine": 556,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Method",
            "name": "testNetscapeResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 57,
            "endLine": 84,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Method",
            "name": "testNetscapeResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 57,
            "endLine": 86,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Method",
            "name": "testRfc2109Response",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 86,
            "endLine": 113,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Method",
            "name": "testRfc2109Response",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 88,
            "endLine": 117,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Method",
            "name": "testQuotedAttributeValues",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 115,
            "endLine": 143,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Method",
            "name": "testQuotedAttributeValues",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 119,
            "endLine": 149,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Method",
            "name": "receiveAndSendMultipleCookies",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 193,
            "endLine": 211,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Method",
            "name": "receiveAndSendMultipleCookies",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 199,
            "endLine": 218,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Method",
            "name": "testRedirectsDoNotIncludeTooManyCookies",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 213,
            "endLine": 247,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Method",
            "name": "testRedirectsDoNotIncludeTooManyCookies",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 220,
            "endLine": 255,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Class",
            "name": "CookiesTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 44,
            "endLine": 361,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.CookiesTest",
            "type": "Class",
            "name": "CookiesTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 44,
            "endLine": 369,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "trueDuplexClientWritesFirst",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 91,
            "endLine": 132,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "trueDuplexClientWritesFirst",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 90,
            "endLine": 131,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "trueDuplexServerWritesFirst",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 134,
            "endLine": 175,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "trueDuplexServerWritesFirst",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 133,
            "endLine": 174,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "clientReadsHeadersDataTrailers",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 177,
            "endLine": 203,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "clientReadsHeadersDataTrailers",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 176,
            "endLine": 202,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "serverReadsHeadersData",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 205,
            "endLine": 234,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "serverReadsHeadersData",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 204,
            "endLine": 233,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "requestBodyEndsAfterResponseBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 236,
            "endLine": 268,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "requestBodyEndsAfterResponseBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 235,
            "endLine": 267,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWith100Continue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 270,
            "endLine": 301,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWith100Continue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 269,
            "endLine": 300,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithRedirect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 303,
            "endLine": 369,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithRedirect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 302,
            "endLine": 369,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithAuthChallenge",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 371,
            "endLine": 429,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithAuthChallenge",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 371,
            "endLine": 429,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "fullCallTimeoutAppliesToSetup",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 431,
            "endLine": 451,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "fullCallTimeoutAppliesToSetup",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 431,
            "endLine": 452,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "fullCallTimeoutDoesNotApplyOnceConnected",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 453,
            "endLine": 488,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "fullCallTimeoutDoesNotApplyOnceConnected",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 454,
            "endLine": 489,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithRewriteInterceptors",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 490,
            "endLine": 524,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "duplexWithRewriteInterceptors",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 491,
            "endLine": 525,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "serverCancelsRequestBodyAndSendsResponseBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 526,
            "endLine": 582,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "serverCancelsRequestBodyAndSendsResponseBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 527,
            "endLine": 583,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "headersReadTimeoutDoesNotStartUntilLastRequestBodyByteFire",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 584,
            "endLine": 610,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "headersReadTimeoutDoesNotStartUntilLastRequestBodyByteFire",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 585,
            "endLine": 612,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "bodyReadTimeoutDoesNotStartUntilLastRequestBodyByteFire",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 612,
            "endLine": 637,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "bodyReadTimeoutDoesNotStartUntilLastRequestBodyByteFire",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 614,
            "endLine": 640,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "headersReadTimeoutDoesNotStartUntilLastRequestBodyByteNoFire",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 639,
            "endLine": 661,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "headersReadTimeoutDoesNotStartUntilLastRequestBodyByteNoFire",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 642,
            "endLine": 665,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "bodyReadTimeoutDoesNotStartUntilLastRequestBodyByteNoFire",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 663,
            "endLine": 686,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "bodyReadTimeoutDoesNotStartUntilLastRequestBodyByteNoFire",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 667,
            "endLine": 691,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Class",
            "name": "DuplexTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 53,
            "endLine": 744,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Class",
            "name": "DuplexTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 52,
            "endLine": 749,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulCallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 122,
            "endLine": 139,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulCallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 122,
            "endLine": 140,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulCallEventSequenceForIpAddress",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 141,
            "endLine": 160,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulCallEventSequenceForIpAddress",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 142,
            "endLine": 162,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulCallEventSequenceForEnqueue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 162,
            "endLine": 191,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulCallEventSequenceForEnqueue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 164,
            "endLine": 194,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "failedCallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 193,
            "endLine": 215,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "failedCallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 196,
            "endLine": 219,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "failedDribbledCallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 217,
            "endLine": 246,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "failedDribbledCallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 221,
            "endLine": 252,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "cancelAsyncCall",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 264,
            "endLine": 282,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "cancelAsyncCall",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 270,
            "endLine": 289,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "multipleCancelsEmitsOnlyOneEvent",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 284,
            "endLine": 295,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "multipleCancelsEmitsOnlyOneEvent",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 291,
            "endLine": 303,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulEmptyHttpsCallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 409,
            "endLine": 419,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulEmptyHttpsCallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 417,
            "endLine": 428,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulChunkedHttpsCallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 421,
            "endLine": 431,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulChunkedHttpsCallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 430,
            "endLine": 442,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulChunkedH2CallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 433,
            "endLine": 443,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulChunkedH2CallEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 444,
            "endLine": 456,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "multipleDnsLookupsForSingleCall",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 491,
            "endLine": 516,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "multipleDnsLookupsForSingleCall",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 504,
            "endLine": 530,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "failedConnect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 584,
            "endLine": 611,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "failedConnect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 598,
            "endLine": 626,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "multipleConnectsForSingleCall",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 613,
            "endLine": 634,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "multipleConnectsForSingleCall",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 628,
            "endLine": 650,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "authenticatingTunnelProxyConnect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 696,
            "endLine": 726,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "authenticatingTunnelProxyConnect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 712,
            "endLine": 744,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "failedSecureConnect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 747,
            "endLine": 767,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "failedSecureConnect",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 765,
            "endLine": 786,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "secureConnectWithTunnel",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 769,
            "endLine": 792,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "secureConnectWithTunnel",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 788,
            "endLine": 812,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "multipleSecureConnectsForSingleCall",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 794,
            "endLine": 816,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "multipleSecureConnectsForSingleCall",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 814,
            "endLine": 837,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "noConnectionFoundOnFollowUp",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 864,
            "endLine": 881,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "noConnectionFoundOnFollowUp",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 885,
            "endLine": 904,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "multipleConnectionsFoundForSingleCall",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 910,
            "endLine": 926,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "multipleConnectionsFoundForSingleCall",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 933,
            "endLine": 951,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "responseBodyFail",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 946,
            "endLine": 970,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "responseBodyFail",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 971,
            "endLine": 996,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "emptyResponseBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 972,
            "endLine": 989,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "emptyResponseBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 998,
            "endLine": 1016,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "emptyResponseBodyConnectionClose",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 991,
            "endLine": 1007,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "emptyResponseBodyConnectionClose",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1018,
            "endLine": 1035,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "responseBodyClosedClosedWithoutReadingAllData",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1009,
            "endLine": 1026,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "responseBodyClosedClosedWithoutReadingAllData",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1037,
            "endLine": 1055,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "requestBodyFail",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1048,
            "endLine": 1072,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "requestBodyFail",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1077,
            "endLine": 1102,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "requestBodyMultipleFailuresReportedOnlyOnce",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1106,
            "endLine": 1147,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "requestBodyMultipleFailuresReportedOnlyOnce",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1136,
            "endLine": 1178,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulCallEventSequenceWithListener",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1190,
            "endLine": 1210,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "successfulCallEventSequenceWithListener",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1221,
            "endLine": 1243,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "requestBodySuccess",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1212,
            "endLine": 1227,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "requestBodySuccess",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1245,
            "endLine": 1261,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "timeToFirstByte",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1244,
            "endLine": 1334,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "timeToFirstByte",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1278,
            "endLine": 1369,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "redirectUsingSameConnectionEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1345,
            "endLine": 1361,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "redirectUsingSameConnectionEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1380,
            "endLine": 1397,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "redirectUsingNewConnectionEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1363,
            "endLine": 1384,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "redirectUsingNewConnectionEventSequence",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1399,
            "endLine": 1421,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "applicationInterceptorProceedsMultipleTimes",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1386,
            "endLine": 1413,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "applicationInterceptorProceedsMultipleTimes",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1423,
            "endLine": 1450,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "expectContinueStartsResponseHeadersEarly",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1433,
            "endLine": 1452,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "expectContinueStartsResponseHeadersEarly",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1470,
            "endLine": 1490,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "timeToFirstByteGapBetweenResponseHeaderStartAndEnd",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1454,
            "endLine": 1475,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "timeToFirstByteGapBetweenResponseHeaderStartAndEnd",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1492,
            "endLine": 1514,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "cacheMiss",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1477,
            "endLine": 1496,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "cacheMiss",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1516,
            "endLine": 1536,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "conditionalCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1498,
            "endLine": 1528,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "conditionalCache",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1538,
            "endLine": 1570,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "conditionalCacheMiss",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1530,
            "endLine": 1562,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "conditionalCacheMiss",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1572,
            "endLine": 1606,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "cacheHit",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1578,
            "endLine": 1600,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Method",
            "name": "cacheHit",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1622,
            "endLine": 1647,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Class",
            "name": "EventListenerTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 84,
            "endLine": 1613,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.EventListenerTest",
            "type": "Class",
            "name": "EventListenerTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 84,
            "endLine": 1660,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "networkInterceptorsCannotShortCircuitResponses",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 88,
            "endLine": 113,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "networkInterceptorsCannotShortCircuitResponses",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 88,
            "endLine": 115,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "networkInterceptorsCannotChangeServerAddress",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 140,
            "endLine": 166,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "networkInterceptorsCannotChangeServerAddress",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 142,
            "endLine": 170,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "networkInterceptorsObserveNetworkHeaders",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 186,
            "endLine": 221,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "networkInterceptorsObserveNetworkHeaders",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 190,
            "endLine": 226,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "rewriteResponseFromServer",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 294,
            "endLine": 315,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "rewriteResponseFromServer",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 299,
            "endLine": 321,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "applicationInterceptorsCanMakeMultipleRequestsToServer",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 387,
            "endLine": 405,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "applicationInterceptorsCanMakeMultipleRequestsToServer",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 393,
            "endLine": 411,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "interceptorMakesAnUnrelatedRequest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 407,
            "endLine": 431,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "interceptorMakesAnUnrelatedRequest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 413,
            "endLine": 437,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "interceptorMakesAnUnrelatedAsyncRequest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 433,
            "endLine": 464,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "interceptorMakesAnUnrelatedAsyncRequest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 439,
            "endLine": 470,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "networkInterceptorReturnsConnectionOnEmptyBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 614,
            "endLine": 635,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "networkInterceptorReturnsConnectionOnEmptyBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 620,
            "endLine": 642,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "chainWithReadTimeout",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 682,
            "endLine": 718,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "chainWithReadTimeout",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 689,
            "endLine": 726,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "chainWithWriteTimeout",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 762,
            "endLine": 799,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Method",
            "name": "chainWithWriteTimeout",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 770,
            "endLine": 808,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Class",
            "name": "InterceptorTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 52,
            "endLine": 916,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.InterceptorTest",
            "type": "Class",
            "name": "InterceptorTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 52,
            "endLine": 925,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.SocksProxyTest",
            "type": "Method",
            "name": "proxy",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 51,
            "endLine": 69,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.SocksProxyTest",
            "type": "Method",
            "name": "proxy",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 51,
            "endLine": 69,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.SocksProxyTest",
            "type": "Method",
            "name": "proxySelector",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 71,
            "endLine": 93,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.SocksProxyTest",
            "type": "Method",
            "name": "proxySelector",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 71,
            "endLine": 93,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.SocksProxyTest",
            "type": "Method",
            "name": "checkRemoteDNSResolve",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 95,
            "endLine": 113,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.SocksProxyTest",
            "type": "Method",
            "name": "checkRemoteDNSResolve",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 95,
            "endLine": 113,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.SocksProxyTest",
            "type": "Class",
            "name": "SocksProxyTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 35,
            "endLine": 114,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.SocksProxyTest",
            "type": "Class",
            "name": "SocksProxyTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 35,
            "endLine": 114,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "timeoutProcessing",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 124,
            "endLine": 141,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "timeoutProcessing",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 124,
            "endLine": 142,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "timeoutProcessingWithEnqueue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 143,
            "endLine": 171,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "timeoutProcessingWithEnqueue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 144,
            "endLine": 173,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "timeoutReadingResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 173,
            "endLine": 192,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "timeoutReadingResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 175,
            "endLine": 195,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "timeoutReadingResponseWithEnqueue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 194,
            "endLine": 232,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "timeoutReadingResponseWithEnqueue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 197,
            "endLine": 236,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "singleTimeoutForAllFollowUpRequests",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 234,
            "endLine": 270,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "singleTimeoutForAllFollowUpRequests",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 238,
            "endLine": 279,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "timeoutFollowingRedirectOnNewConnection",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 272,
            "endLine": 294,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "timeoutFollowingRedirectOnNewConnection",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 281,
            "endLine": 305,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "noTimeout",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 296,
            "endLine": 316,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Method",
            "name": "noTimeout",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 307,
            "endLine": 328,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Class",
            "name": "WholeOperationTimeoutTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 38,
            "endLine": 336,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.WholeOperationTimeoutTest",
            "type": "Class",
            "name": "WholeOperationTimeoutTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 38,
            "endLine": 348,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Method",
            "name": "pinRootNotPresentInChain",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 65,
            "endLine": 111,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Method",
            "name": "pinRootNotPresentInChain",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 65,
            "endLine": 112,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Method",
            "name": "pinIntermediatePresentInChain",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 113,
            "endLine": 175,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Method",
            "name": "pinIntermediatePresentInChain",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 114,
            "endLine": 178,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Method",
            "name": "unrelatedPinnedLeafCertificateInChain",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 177,
            "endLine": 254,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Method",
            "name": "unrelatedPinnedLeafCertificateInChain",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 180,
            "endLine": 258,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Method",
            "name": "unrelatedPinnedIntermediateCertificateInChain",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 256,
            "endLine": 337,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Method",
            "name": "unrelatedPinnedIntermediateCertificateInChain",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 260,
            "endLine": 342,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Method",
            "name": "lonePinnedCertificate",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 574,
            "endLine": 605,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Method",
            "name": "lonePinnedCertificate",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 579,
            "endLine": 611,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Class",
            "name": "CertificatePinnerChainValidationTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 53,
            "endLine": 623,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.CertificatePinnerChainValidationTest",
            "type": "Class",
            "name": "CertificatePinnerChainValidationTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 53,
            "endLine": 629,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Method",
            "name": "clientAuthForWants",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 126,
            "endLine": 142,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Method",
            "name": "clientAuthForWants",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 126,
            "endLine": 144,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Method",
            "name": "clientAuthForNeeds",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 144,
            "endLine": 160,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Method",
            "name": "clientAuthForNeeds",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 146,
            "endLine": 164,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Method",
            "name": "clientAuthSkippedForNone",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 162,
            "endLine": 177,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Method",
            "name": "clientAuthSkippedForNone",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 166,
            "endLine": 183,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Method",
            "name": "missingClientAuthSkippedForWantsOnly",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 179,
            "endLine": 194,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Method",
            "name": "missingClientAuthSkippedForWantsOnly",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 185,
            "endLine": 202,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Method",
            "name": "invalidClientAuthEvents",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 284,
            "endLine": 332,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Method",
            "name": "invalidClientAuthEvents",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 292,
            "endLine": 342,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Class",
            "name": "ClientAuthTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 62,
            "endLine": 366,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.tls.ClientAuthTest",
            "type": "Class",
            "name": "ClientAuthTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 62,
            "endLine": 376,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "textMessage",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 108,
            "endLine": 119,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "textMessage",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 108,
            "endLine": 121,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "binaryMessage",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 121,
            "endLine": 132,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "binaryMessage",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 123,
            "endLine": 136,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "nullStringThrows",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 134,
            "endLine": 147,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "nullStringThrows",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 138,
            "endLine": 153,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "nullByteStringThrows",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 149,
            "endLine": 164,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "nullByteStringThrows",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 155,
            "endLine": 172,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "serverMessage",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 166,
            "endLine": 177,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "serverMessage",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 174,
            "endLine": 187,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "throwingOnOpenFailsImmediately",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 179,
            "endLine": 194,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "throwingOnOpenFailsImmediately",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 189,
            "endLine": 206,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "throwingOnFailLogs",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 196,
            "endLine": 210,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "throwingOnFailLogs",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 208,
            "endLine": 225,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "throwingOnMessageClosesImmediatelyAndFails",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 212,
            "endLine": 230,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "throwingOnMessageClosesImmediatelyAndFails",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 227,
            "endLine": 247,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "throwingOnClosingClosesImmediatelyAndFails",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 232,
            "endLine": 250,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "throwingOnClosingClosesImmediatelyAndFails",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 249,
            "endLine": 269,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "unplannedCloseHandledByCloseWithoutFailure",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 252,
            "endLine": 270,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "unplannedCloseHandledByCloseWithoutFailure",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 271,
            "endLine": 291,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "unplannedCloseHandledWithoutFailure",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 272,
            "endLine": 280,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "unplannedCloseHandledWithoutFailure",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 293,
            "endLine": 303,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "non101RetainsBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 282,
            "endLine": 288,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "non101RetainsBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 305,
            "endLine": 314,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "notFound",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 290,
            "endLine": 296,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "notFound",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 316,
            "endLine": 324,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "clientTimeoutClosesBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 298,
            "endLine": 313,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "clientTimeoutClosesBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 326,
            "endLine": 345,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "missingConnectionHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 315,
            "endLine": 324,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "missingConnectionHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 347,
            "endLine": 357,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "wrongConnectionHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 326,
            "endLine": 336,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "wrongConnectionHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 359,
            "endLine": 370,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "missingUpgradeHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 338,
            "endLine": 347,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "missingUpgradeHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 372,
            "endLine": 382,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "wrongUpgradeHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 349,
            "endLine": 359,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "wrongUpgradeHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 384,
            "endLine": 395,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "missingMagicHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 361,
            "endLine": 370,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "missingMagicHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 397,
            "endLine": 407,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "wrongMagicHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 372,
            "endLine": 382,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "wrongMagicHeader",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 409,
            "endLine": 420,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "webSocketAndApplicationInterceptors",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 394,
            "endLine": 416,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "webSocketAndApplicationInterceptors",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 432,
            "endLine": 456,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "webSocketAndNetworkInterceptors",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 418,
            "endLine": 432,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "webSocketAndNetworkInterceptors",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 458,
            "endLine": 474,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "overflowOutgoingQueue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 434,
            "endLine": 466,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "overflowOutgoingQueue",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 476,
            "endLine": 510,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "closeReasonMaximumLength",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 468,
            "endLine": 486,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "closeReasonMaximumLength",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 512,
            "endLine": 532,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "closeReasonTooLong",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 488,
            "endLine": 511,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "closeReasonTooLong",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 534,
            "endLine": 559,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "readTimeoutAppliesToHttpRequest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 545,
            "endLine": 553,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "readTimeoutAppliesToHttpRequest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 593,
            "endLine": 602,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "readTimeoutAppliesWithinFrames",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 555,
            "endLine": 575,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "readTimeoutAppliesWithinFrames",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 604,
            "endLine": 625,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "readTimeoutDoesNotApplyAcrossFrames",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 577,
            "endLine": 591,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "readTimeoutDoesNotApplyAcrossFrames",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 627,
            "endLine": 643,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "clientPingsServerOnInterval",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 593,
            "endLine": 623,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "clientPingsServerOnInterval",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 645,
            "endLine": 677,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "clientDoesNotPingServerByDefault",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 625,
            "endLine": 643,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "clientDoesNotPingServerByDefault",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 679,
            "endLine": 699,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "unacknowledgedPingFailsConnection",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 645,
            "endLine": 679,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "unacknowledgedPingFailsConnection",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 701,
            "endLine": 737,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "clientCancelsIfCloseIsNotAcknowledged",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 681,
            "endLine": 703,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "clientCancelsIfCloseIsNotAcknowledged",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 739,
            "endLine": 763,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "webSocketsDontTriggerEventListener",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 705,
            "endLine": 730,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "webSocketsDontTriggerEventListener",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 765,
            "endLine": 792,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "callTimeoutAppliesToSetup",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 732,
            "endLine": 744,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "callTimeoutAppliesToSetup",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 794,
            "endLine": 807,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "callTimeoutDoesNotApplyOnceConnected",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 746,
            "endLine": 764,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "callTimeoutDoesNotApplyOnceConnected",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 809,
            "endLine": 828,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "webSocketConnectionIsReleased",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 766,
            "endLine": 793,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "webSocketConnectionIsReleased",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 830,
            "endLine": 858,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "successfulExtensions",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 837,
            "endLine": 881,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "successfulExtensions",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 902,
            "endLine": 947,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "extensionNegotiationFailure",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 883,
            "endLine": 900,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "extensionNegotiationFailure",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 949,
            "endLine": 967,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "websocketScheme",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 911,
            "endLine": 926,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "websocketScheme",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 978,
            "endLine": 995,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Class",
            "name": "WebSocketHttpTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 65,
            "endLine": 949,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Class",
            "name": "WebSocketHttpTest",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 65,
            "endLine": 1018,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "headersToList",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 389,
            "endLine": 397,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "mockwebserver3.MockWebServerTest",
            "type": "Method",
            "name": "headersToList",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 410,
            "endLine": 418,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Method",
            "name": "setBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2710,
            "endLine": 2712,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Method",
            "name": "setBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2924,
            "endLine": 2926,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "enqueueResponseWithBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 688,
            "endLine": 693,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.DuplexTest",
            "type": "Method",
            "name": "enqueueResponseWithBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 693,
            "endLine": 698,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "upgradeResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 902,
            "endLine": 909,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.internal.ws.WebSocketHttpTest",
            "type": "Method",
            "name": "upgradeResponse",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 969,
            "endLine": 976,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public defaultMockResponse() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(response)).containsExactly(\"Content-Length: 0\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 5,
            "endColumn": 78
          },
          "rightSideLocation": {
            "container": "public defaultMockResponse() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(builder)).containsExactly(\"Content-Length: 0\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 5,
            "endColumn": 77
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public defaultMockResponse() : void",
            "type": "Statement",
            "name": "assertThat(response.getStatus()).isEqualTo(\"HTTP/1.1 200 OK\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public defaultMockResponse() : void",
            "type": "Statement",
            "name": "assertThat(builder.getStatus()).isEqualTo(\"HTTP/1.1 200 OK\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 5,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public defaultMockResponse() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse();\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public defaultMockResponse() : void",
            "type": "Statement",
            "name": "MockResponse.Builder builder=new MockResponse.Builder();\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 5,
            "endColumn": 63
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setResponseMockReason() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse().setResponseCode(i);\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 7,
            "endColumn": 69
          },
          "rightSideLocation": {
            "container": "public setResponseMockReason() : void",
            "type": "Statement",
            "name": "MockResponse.Builder builder=new MockResponse.Builder().code(i);\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 7,
            "endColumn": 73
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setResponseMockReason() : void",
            "type": "Statement",
            "name": "assertThat(response.getStatus()).isEqualTo((\"HTTP/1.1 \" + i + \" \"+ expectedReason));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 7,
            "endColumn": 92
          },
          "rightSideLocation": {
            "container": "public setResponseMockReason() : void",
            "type": "Statement",
            "name": "assertThat(builder.getStatus()).isEqualTo((\"HTTP/1.1 \" + i + \" \"+ expectedReason));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 7,
            "endColumn": 91
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setResponseMockReason() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(response)).containsExactly(\"Content-Length: 0\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 7,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public setResponseMockReason() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(builder)).containsExactly(\"Content-Length: 0\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 7,
            "endColumn": 79
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setStatusControlsWholeStatusLine() : void",
            "type": "Statement",
            "name": "assertThat(response.getStatus()).isEqualTo(\"HTTP/1.1 202 That'll do pig\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 5,
            "endColumn": 79
          },
          "rightSideLocation": {
            "container": "public setStatusControlsWholeStatusLine() : void",
            "type": "Statement",
            "name": "assertThat(builder.getStatus()).isEqualTo(\"HTTP/1.1 202 That'll do pig\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 5,
            "endColumn": 78
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setStatusControlsWholeStatusLine() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(response)).containsExactly(\"Content-Length: 0\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 5,
            "endColumn": 78
          },
          "rightSideLocation": {
            "container": "public setStatusControlsWholeStatusLine() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(builder)).containsExactly(\"Content-Length: 0\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 5,
            "endColumn": 77
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setStatusControlsWholeStatusLine() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse().setStatus(\"HTTP/1.1 202 That'll do pig\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 110,
            "endLine": 110,
            "startColumn": 5,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "public setStatusControlsWholeStatusLine() : void",
            "type": "Statement",
            "name": "MockResponse.Builder builder=new MockResponse.Builder().status(\"HTTP/1.1 202 That'll do pig\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 5,
            "endColumn": 101
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setBodyAdjustsHeaders() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(response)).containsExactly(\"Content-Length: 3\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 5,
            "endColumn": 78
          },
          "rightSideLocation": {
            "container": "public setBodyAdjustsHeaders() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(builder)).containsExactly(\"Content-Length: 3\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 5,
            "endColumn": 77
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public mockResponseAddHeader() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(response)).containsExactly(\"Cookie: s=square\",\"Cookie: a=android\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 5,
            "endColumn": 98
          },
          "rightSideLocation": {
            "container": "public mockResponseAddHeader() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(builder)).containsExactly(\"Cookie: s=square\",\"Cookie: a=android\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 126,
            "endLine": 126,
            "startColumn": 5,
            "endColumn": 97
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public mockResponseAddHeader() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse().clearHeaders().addHeader(\"Cookie: s=square\").addHeader(\"Cookie\",\"a=android\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 122,
            "endLine": 125,
            "startColumn": 5,
            "endColumn": 43
          },
          "rightSideLocation": {
            "container": "public mockResponseAddHeader() : void",
            "type": "Statement",
            "name": "MockResponse.Builder builder=new MockResponse.Builder().clearHeaders().addHeader(\"Cookie: s=square\").addHeader(\"Cookie\",\"a=android\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 122,
            "endLine": 125,
            "startColumn": 5,
            "endColumn": 43
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public mockResponseSetHeader() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(response)).containsExactly(\"Cookies: delicious\",\"cookie: r=robot\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 5,
            "endColumn": 98
          },
          "rightSideLocation": {
            "container": "public mockResponseSetHeader() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(builder)).containsExactly(\"Cookies: delicious\",\"cookie: r=robot\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 5,
            "endColumn": 97
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public mockResponseSetHeader() : void",
            "type": "Statement",
            "name": "response.setHeader(\"cookie\",\"r=robot\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 5,
            "endColumn": 45
          },
          "rightSideLocation": {
            "container": "public mockResponseSetHeader() : void",
            "type": "Statement",
            "name": "builder.setHeader(\"cookie\",\"r=robot\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 5,
            "endColumn": 44
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public mockResponseSetHeader() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse().clearHeaders().addHeader(\"Cookie: s=square\").addHeader(\"Cookie: a=android\").addHeader(\"Cookies: delicious\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 130,
            "endLine": 134,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "container": "public mockResponseSetHeader() : void",
            "type": "Statement",
            "name": "MockResponse.Builder builder=new MockResponse.Builder().clearHeaders().addHeader(\"Cookie: s=square\").addHeader(\"Cookie: a=android\").addHeader(\"Cookies: delicious\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 130,
            "endLine": 134,
            "startColumn": 5,
            "endColumn": 42
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public mockResponseSetHeaders() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(response)).containsExactly(\"Cookie: a=android\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 5,
            "endColumn": 78
          },
          "rightSideLocation": {
            "container": "public mockResponseSetHeaders() : void",
            "type": "Statement",
            "name": "assertThat(headersToList(builder)).containsExactly(\"Cookie: a=android\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 5,
            "endColumn": 77
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public mockResponseSetHeaders() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse().clearHeaders().addHeader(\"Cookie: s=square\").addHeader(\"Cookies: delicious\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 140,
            "endLine": 143,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "container": "public mockResponseSetHeaders() : void",
            "type": "Statement",
            "name": "MockResponse.Builder builder=new MockResponse.Builder().clearHeaders().addHeader(\"Cookie: s=square\").addHeader(\"Cookies: delicious\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 140,
            "endLine": 143,
            "startColumn": 5,
            "endColumn": 42
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public regularResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"hello world\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "container": "public regularResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"hello world\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 5,
            "endColumn": 76
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public redirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).addHeader(\"Location: \" + server.url(\"/new-path\")).setBody(\"This page has moved!\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 170,
            "endLine": 173,
            "startColumn": 5,
            "endColumn": 43
          },
          "rightSideLocation": {
            "container": "public redirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_MOVED_TEMP).addHeader(\"Location: \" + server.url(\"/new-path\")).body(\"This page has moved!\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 170,
            "endLine": 174,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public redirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"This is the new location!\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 174,
            "endLine": 174,
            "startColumn": 5,
            "endColumn": 77
          },
          "rightSideLocation": {
            "container": "public redirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"This is the new location!\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 175,
            "endLine": 177,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public dispatchBlocksWaitingForEnqueue() : void",
            "type": "Statement",
            "name": "new Thread(() -> {\n  try {\n    Thread.sleep(1000);\n  }\n catch (  InterruptedException ignored) {\n  }\n  server.enqueue(new MockResponse().setBody(\"enqueued in the background\"));\n}\n).start();\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 192,
            "endLine": 198,
            "startColumn": 5,
            "endColumn": 16
          },
          "rightSideLocation": {
            "container": "public dispatchBlocksWaitingForEnqueue() : void",
            "type": "Statement",
            "name": "new Thread(() -> {\n  try {\n    Thread.sleep(1000);\n  }\n catch (  InterruptedException ignored) {\n  }\n  server.enqueue(new MockResponse.Builder().body(\"enqueued in the background\").build());\n}\n).start();\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 195,
            "endLine": 203,
            "startColumn": 5,
            "endColumn": 16
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public dispatchBlocksWaitingForEnqueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"enqueued in the background\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 197,
            "endLine": 197,
            "startColumn": 7,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public dispatchBlocksWaitingForEnqueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"enqueued in the background\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 200,
            "endLine": 202,
            "startColumn": 7,
            "endColumn": 21
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public nonHexadecimalChunkSize() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"G\\r\\nxxxxxxxxxxxxxxxx\\r\\n0\\r\\n\\r\\n\").clearHeaders().addHeader(\"Transfer-encoding: chunked\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 207,
            "endLine": 210,
            "startColumn": 5,
            "endColumn": 51
          },
          "rightSideLocation": {
            "container": "public nonHexadecimalChunkSize() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"G\\r\\nxxxxxxxxxxxxxxxx\\r\\n0\\r\\n\\r\\n\").clearHeaders().addHeader(\"Transfer-encoding: chunked\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 212,
            "endLine": 216,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseTimeout() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"ABC\").clearHeaders().addHeader(\"Content-Length: 4\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 222,
            "endLine": 225,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "container": "public responseTimeout() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"ABC\").clearHeaders().addHeader(\"Content-Length: 4\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 228,
            "endLine": 232,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseTimeout() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"DEF\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public responseTimeout() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"DEF\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 233,
            "endLine": 235,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public disconnectAtStart() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 253,
            "endLine": 253,
            "startColumn": 5,
            "endColumn": 90
          },
          "rightSideLocation": {
            "container": "public disconnectAtStart() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.DISCONNECT_AT_START).build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 262,
            "endLine": 264,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clearDispatcherQueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 267,
            "endLine": 267,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public clearDispatcherQueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 280,
            "endLine": 282,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clearDispatcherQueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 265,
            "endLine": 265,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public clearDispatcherQueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 276,
            "endLine": 278,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public throttleRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().throttleBody(3,500,TimeUnit.MILLISECONDS));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 280,
            "endLine": 281,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public throttleRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().throttleBody(3,500,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 295,
            "endLine": 297,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public throttleResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"ABCDEF\").throttleBody(3,500,TimeUnit.MILLISECONDS));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 301,
            "endLine": 303,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public throttleResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"ABCDEF\").throttleBody(3,500,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 317,
            "endLine": 320,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public delayResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"ABCDEF\").setBodyDelay(1,SECONDS));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 324,
            "endLine": 326,
            "startColumn": 5,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "public delayResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"ABCDEF\").bodyDelay(1,SECONDS).build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 341,
            "endLine": 344,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public disconnectRequestHalfway() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_DURING_REQUEST_BODY));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 340,
            "endLine": 340,
            "startColumn": 5,
            "endColumn": 101
          },
          "rightSideLocation": {
            "container": "public disconnectRequestHalfway() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.DISCONNECT_DURING_REQUEST_BODY).build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 358,
            "endLine": 360,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public disconnectResponseHalfway() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"ab\").setSocketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 371,
            "endLine": 373,
            "startColumn": 5,
            "endColumn": 73
          },
          "rightSideLocation": {
            "container": "public disconnectResponseHalfway() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"ab\").socketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY).build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 391,
            "endLine": 394,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestUrlReconstructed() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"hello world\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 448,
            "endLine": 448,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "container": "public requestUrlReconstructed() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"hello world\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 469,
            "endLine": 471,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public shutdownServerAfterRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 470,
            "endLine": 470,
            "startColumn": 5,
            "endColumn": 101
          },
          "rightSideLocation": {
            "container": "public shutdownServerAfterRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.SHUTDOWN_SERVER_AFTER_RESPONSE).build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 493,
            "endLine": 495,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public http100Continue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"response\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 488,
            "endLine": 488,
            "startColumn": 5,
            "endColumn": 60
          },
          "rightSideLocation": {
            "container": "public http100Continue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"response\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 513,
            "endLine": 515,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public multiple1xxResponses() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().add100Continue().add100Continue().setBody(\"response\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 505,
            "endLine": 508,
            "startColumn": 5,
            "endColumn": 29
          },
          "rightSideLocation": {
            "container": "public multiple1xxResponses() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().add100Continue().add100Continue().body(\"response\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 532,
            "endLine": 536,
            "startColumn": 5,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public https() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 556,
            "endLine": 556,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public https() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 584,
            "endLine": 586,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public httpsWithClientAuth() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 598,
            "endLine": 598,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public httpsWithClientAuth() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 628,
            "endLine": 630,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public proxiedRequestGetsCorrectRequestUrl() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"Result\"));\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 631,
            "endLine": 631,
            "startColumn": 5,
            "endColumn": 58
          },
          "rightSideLocation": {
            "container": "public proxiedRequestGetsCorrectRequestUrl() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"Result\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 663,
            "endLine": 665,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public usesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(dnsResponse(\"0000818000010003000000000567726170680866616365626f6f6b03636f6d0000010001c00c00050001\" + \"00000a6d000603617069c012c0300005000100000cde000c04737461720463313072c012c04200010\" + \"0010000003b00049df00112\").setHeader(\"cache-control\",\"private, max-age=298\"));\n",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 178,
            "endLine": 181,
            "startColumn": 5,
            "endColumn": 94
          },
          "rightSideLocation": {
            "container": "public usesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(dnsResponse(\"0000818000010003000000000567726170680866616365626f6f6b03636f6d0000010001c00c00050001\" + \"00000a6d000603617069c012c0300005000100000cde000c04737461720463313072c012c04200010\" + \"0010000003b00049df00112\").newBuilder().setHeader(\"cache-control\",\"private, max-age=298\").build());\n",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 178,
            "endLine": 184,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public usesCacheOnlyIfFresh() : void",
            "type": "Statement",
            "name": "server.enqueue(dnsResponse(\"0000818000010003000000000567726170680866616365626f6f6b03636f6d0000010001c00c00050001\" + \"00000a6d000603617069c012c0300005000100000cde000c04737461720463313072c012c04200010\" + \"0010000003b00049df00112\").setHeader(\"cache-control\",\"max-age=1\"));\n",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 217,
            "endLine": 220,
            "startColumn": 5,
            "endColumn": 83
          },
          "rightSideLocation": {
            "container": "public usesCacheOnlyIfFresh() : void",
            "type": "Statement",
            "name": "server.enqueue(dnsResponse(\"0000818000010003000000000567726170680866616365626f6f6b03636f6d0000010001c00c00050001\" + \"00000a6d000603617069c012c0300005000100000cde000c04737461720463313072c012c04200010\" + \"0010000003b00049df00112\").newBuilder().setHeader(\"cache-control\",\"max-age=1\").build());\n",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 223,
            "endLine": 229,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public usesCacheOnlyIfFresh() : void",
            "type": "Statement",
            "name": "server.enqueue(dnsResponse(\"0000818000010003000000000567726170680866616365626f6f6b03636f6d0000010001c00c00050001\" + \"00000a6d000603617069c012c0300005000100000cde000c04737461720463313072c012c04200010\" + \"0010000003b00049df00112\").setHeader(\"cache-control\",\"max-age=1\"));\n",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 201,
            "endLine": 204,
            "startColumn": 5,
            "endColumn": 83
          },
          "rightSideLocation": {
            "container": "public usesCacheOnlyIfFresh() : void",
            "type": "Statement",
            "name": "server.enqueue(dnsResponse(\"0000818000010003000000000567726170680866616365626f6f6b03636f6d0000010001c00c00050001\" + \"00000a6d000603617069c012c0300005000100000cde000c04737461720463313072c012c04200010\" + \"0010000003b00049df00112\").newBuilder().setHeader(\"cache-control\",\"max-age=1\").build());\n",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 204,
            "endLine": 210,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private dnsResponse(s String) : MockResponse",
            "type": "Statement",
            "name": "return new MockResponse().setBody(new Buffer().write(ByteString.decodeHex(s))).addHeader(\"content-type\",\"application/dns-message\").addHeader(\"content-length\",s.length() / 2);\n",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 232,
            "endLine": 234,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "container": "private dnsResponse(s String) : MockResponse",
            "type": "Statement",
            "name": "return new MockResponse.Builder().body(new Buffer().write(ByteString.decodeHex(s))).addHeader(\"content-type\",\"application/dns-message\").addHeader(\"content-length\",s.length() / 2).build();\n",
            "filePath": "okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java",
            "startLine": 241,
            "endLine": 245,
            "startColumn": 5,
            "endColumn": 18
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public basicResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"Hello!\").setHeader(\"Content-Type\",PLAIN));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 170,
            "endLine": 172,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "container": "public basicResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"Hello!\").setHeader(\"Content-Type\",PLAIN).build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 170,
            "endLine": 173,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public basicChunkedResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setChunkedBody(\"Hello!\",2).setHeader(\"Content-Type\",PLAIN));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 190,
            "endLine": 192,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "container": "public basicChunkedResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().chunkedBody(\"Hello!\",2).setHeader(\"Content-Type\",PLAIN).build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 191,
            "endLine": 194,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public headersResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"Hello!\").setHeader(\"Content-Type\",PLAIN));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 381,
            "endLine": 383,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "container": "public headersResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"Hello!\").setHeader(\"Content-Type\",PLAIN).build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 383,
            "endLine": 386,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private bodyGetNoBody(code int) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setStatus(\"HTTP/1.1 \" + code + \" No Content\"));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 449,
            "endLine": 450,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "container": "private bodyGetNoBody(code int) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().status(\"HTTP/1.1 \" + code + \" No Content\").build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 452,
            "endLine": 454,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public bodyResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"Hello!\").setHeader(\"Content-Type\",PLAIN));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 515,
            "endLine": 517,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "container": "public bodyResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"Hello!\").setHeader(\"Content-Type\",PLAIN).build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 519,
            "endLine": 522,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public bodyResponseBodyChunked() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setChunkedBody(\"Hello!\",2).setHeader(\"Content-Type\",PLAIN));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 551,
            "endLine": 553,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "container": "public bodyResponseBodyChunked() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().chunkedBody(\"Hello!\",2).setHeader(\"Content-Type\",PLAIN).build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 556,
            "endLine": 559,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public bodyRequestGzipEncoded() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeader(\"Content-Type\",PLAIN).setBody(new Buffer().writeUtf8(\"Uncompressed\")));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 587,
            "endLine": 589,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "container": "public bodyRequestGzipEncoded() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().setHeader(\"Content-Type\",PLAIN).body(new Buffer().writeUtf8(\"Uncompressed\")).build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 593,
            "endLine": 596,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public bodyResponseGzipEncoded() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeader(\"Content-Encoding\",\"gzip\").setHeader(\"Content-Type\",PLAIN).setBody(new Buffer().write(ByteString.decodeBase64(\"H4sIAAAAAAAAAPNIzcnJ11HwQKIAdyO+9hMAAAA=\"))));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 623,
            "endLine": 627,
            "startColumn": 5,
            "endColumn": 60
          },
          "rightSideLocation": {
            "container": "public bodyResponseGzipEncoded() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().setHeader(\"Content-Encoding\",\"gzip\").setHeader(\"Content-Type\",PLAIN).body(new Buffer().write(ByteString.decodeBase64(\"H4sIAAAAAAAAAPNIzcnJ11HwQKIAdyO+9hMAAAA=\"))).build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 630,
            "endLine": 635,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public bodyResponseUnknownEncoded() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeader(\"Content-Encoding\",\"br\").setHeader(\"Content-Type\",PLAIN).setBody(new Buffer().write(ByteString.decodeBase64(\"iwmASGVsbG8sIEhlbGxvLCBIZWxsbwoD\"))));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 665,
            "endLine": 670,
            "startColumn": 7,
            "endColumn": 54
          },
          "rightSideLocation": {
            "container": "public bodyResponseUnknownEncoded() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().setHeader(\"Content-Encoding\",\"br\").setHeader(\"Content-Type\",PLAIN).body(new Buffer().write(ByteString.decodeBase64(\"iwmASGVsbG8sIEhlbGxvLCBIZWxsbwoD\"))).build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 673,
            "endLine": 679,
            "startColumn": 7,
            "endColumn": 21
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public bodyResponseIsStreaming() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeader(\"Content-Type\",\"text/event-stream\").setChunkedBody(\"\" + \"event: add\\n\" + \"data: 73857293\\n\"+ \"\\n\"+ \"event: remove\\n\"+ \"data: 2153\\n\"+ \"\\n\"+ \"event: add\\n\"+ \"data: 113411\\n\"+ \"\\n\",8));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 702,
            "endLine": 714,
            "startColumn": 5,
            "endColumn": 7
          },
          "rightSideLocation": {
            "container": "public bodyResponseIsStreaming() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().setHeader(\"Content-Type\",\"text/event-stream\").chunkedBody(\"\" + \"event: add\\n\" + \"data: 73857293\\n\"+ \"\\n\"+ \"event: remove\\n\"+ \"data: 2153\\n\"+ \"\\n\"+ \"event: add\\n\"+ \"data: 113411\\n\"+ \"\\n\",8).build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 711,
            "endLine": 724,
            "startColumn": 5,
            "endColumn": 7
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public bodyGetMalformedCharset() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeader(\"Content-Type\",\"text/html; charset=0\").setBody(\"Body with unknown charset\"));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 744,
            "endLine": 746,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public bodyGetMalformedCharset() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().setHeader(\"Content-Type\",\"text/html; charset=0\").body(\"Body with unknown charset\").build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 754,
            "endLine": 757,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseBodyIsBinary() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(buffer).setHeader(\"Content-Type\",\"image/png; charset=utf-8\"));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 788,
            "endLine": 790,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public responseBodyIsBinary() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(buffer).setHeader(\"Content-Type\",\"image/png; charset=utf-8\").build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 799,
            "endLine": 802,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public headersAreRedacted() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"SeNsItIvE\",\"Value\").addHeader(\"Not-Sensitive\",\"Value\"));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 877,
            "endLine": 878,
            "startColumn": 5,
            "endColumn": 97
          },
          "rightSideLocation": {
            "container": "public headersAreRedacted() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"SeNsItIvE\",\"Value\").addHeader(\"Not-Sensitive\",\"Value\").build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 889,
            "endLine": 891,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexRequestsAreNotLogged() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"Hello response!\"));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 927,
            "endLine": 928,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public duplexRequestsAreNotLogged() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"Hello response!\").build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 940,
            "endLine": 942,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public oneShotRequestsAreNotLogged() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"Hello response!\"));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 969,
            "endLine": 970,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "container": "public oneShotRequestsAreNotLogged() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"Hello response!\").build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java",
            "startLine": 983,
            "endLine": 985,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public get() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"Hello!\").setHeader(\"Content-Type\",PLAIN));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 5,
            "endColumn": 91
          },
          "rightSideLocation": {
            "container": "public get() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"Hello!\").setHeader(\"Content-Type\",PLAIN).build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java",
            "startLine": 80,
            "endLine": 83,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public connectFail() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 5,
            "endColumn": 85
          },
          "rightSideLocation": {
            "container": "public connectFail() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.FAIL_HANDSHAKE).build());\n",
            "filePath": "okhttp-logging-interceptor/src/test/java/okhttp3/logging/LoggingEventListenerTest.java",
            "startLine": 229,
            "endLine": 231,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public event() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\"));\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 59,
            "endLine": 61,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public event() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\").build());\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 59,
            "endLine": 63,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cancelInEventShortCircuits() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\"));\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 73,
            "endLine": 75,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "container": "public cancelInEventShortCircuits() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\").build());\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 75,
            "endLine": 79,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public badContentType() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/plain\"));\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 84,
            "endLine": 86,
            "startColumn": 5,
            "endColumn": 58
          },
          "rightSideLocation": {
            "container": "public badContentType() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/plain\").build());\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 88,
            "endLine": 92,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public badResponseCode() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\").setResponseCode(401));\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 93,
            "endLine": 95,
            "startColumn": 5,
            "endColumn": 86
          },
          "rightSideLocation": {
            "container": "public badResponseCode() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\").code(401).build());\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 99,
            "endLine": 105,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public fullCallTimeoutDoesNotApplyOnceConnected() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBodyDelay(500,TimeUnit.MILLISECONDS).setHeader(\"content-type\",\"text/event-stream\").setBody(\"data: hey\\n\\n\"));\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 106,
            "endLine": 109,
            "startColumn": 5,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "public fullCallTimeoutDoesNotApplyOnceConnected() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().bodyDelay(500,TimeUnit.MILLISECONDS).setHeader(\"content-type\",\"text/event-stream\").body(\"data: hey\\n\\n\").build());\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 116,
            "endLine": 120,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public fullCallTimeoutAppliesToSetup() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeadersDelay(500,TimeUnit.MILLISECONDS).setHeader(\"content-type\",\"text/event-stream\").setBody(\"data: hey\\n\\n\"));\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 125,
            "endLine": 128,
            "startColumn": 5,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "public fullCallTimeoutAppliesToSetup() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().headersDelay(500,TimeUnit.MILLISECONDS).setHeader(\"content-type\",\"text/event-stream\").body(\"data: hey\\n\\n\").build());\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 136,
            "endLine": 140,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public retainsAccept() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\"));\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 135,
            "endLine": 137,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public retainsAccept() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\").build());\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 147,
            "endLine": 151,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setsMissingAccept() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\"));\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 149,
            "endLine": 151,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public setsMissingAccept() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\").build());\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourceHttpTest.java",
            "startLine": 163,
            "endLine": 167,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public processResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\"));\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.java",
            "startLine": 55,
            "endLine": 57,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public processResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\").build());\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.java",
            "startLine": 55,
            "endLine": 59,
            "startColumn": 5,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cancelShortCircuits() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\"));\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.java",
            "startLine": 71,
            "endLine": 73,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "container": "public cancelShortCircuits() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"\" + \"data: hey\\n\" + \"\\n\").setHeader(\"content-type\",\"text/event-stream\").build());\n",
            "filePath": "okhttp-sse/src/test/java/okhttp3/sse/internal/EventSourcesHttpTest.java",
            "startLine": 73,
            "endLine": 77,
            "startColumn": 5,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "mockResponse.addHeader(\"Proxy-Authenticate: Basic realm=\\\"protected area\\\"\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 7,
            "endColumn": 84
          },
          "rightSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "builder.addHeader(\"Proxy-Authenticate: Basic realm=\\\"protected area\\\"\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 178,
            "endLine": 178,
            "startColumn": 7,
            "endColumn": 79
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeader(\"Cache-Control\",\"no-store\").setBody(\"FGHIJ\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 193,
            "endLine": 195,
            "startColumn": 7,
            "endColumn": 30
          },
          "rightSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().setHeader(\"Cache-Control\",\"no-store\").body(\"FGHIJ\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 192,
            "endLine": 195,
            "startColumn": 7,
            "endColumn": 21
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "mockResponse.addHeader(\"WWW-Authenticate: Basic realm=\\\"protected area\\\"\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 181,
            "endLine": 181,
            "startColumn": 7,
            "endColumn": 82
          },
          "rightSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "builder.addHeader(\"WWW-Authenticate: Basic realm=\\\"protected area\\\"\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 7,
            "endColumn": 77
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "server.enqueue(mockResponse);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 186,
            "endLine": 186,
            "startColumn": 5,
            "endColumn": 34
          },
          "rightSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 185,
            "endLine": 185,
            "startColumn": 5,
            "endColumn": 37
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testResponseCaching(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "MockResponse mockResponse=new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).setStatus(\"HTTP/1.1 200 Fantastic\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 236,
            "endLine": 239,
            "startColumn": 5,
            "endColumn": 46
          },
          "rightSideLocation": {
            "container": "private testResponseCaching(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "MockResponse.Builder mockResponse=new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).status(\"HTTP/1.1 200 Fantastic\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 236,
            "endLine": 239,
            "startColumn": 5,
            "endColumn": 43
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testResponseCaching(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "server.enqueue(mockResponse);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 241,
            "endLine": 241,
            "startColumn": 5,
            "endColumn": 34
          },
          "rightSideLocation": {
            "container": "private testResponseCaching(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "server.enqueue(mockResponse.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 241,
            "endLine": 241,
            "startColumn": 5,
            "endColumn": 42
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public secureResponseCaching() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).setBody(\"ABC\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 273,
            "endLine": 276,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public secureResponseCaching() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).body(\"ABC\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 273,
            "endLine": 277,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).setResponseCode(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: /foo\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 311,
            "endLine": 315,
            "startColumn": 5,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "public responseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).code(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: /foo\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 312,
            "endLine": 317,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"DEF\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 320,
            "endLine": 321,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public responseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"DEF\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 323,
            "endLine": 325,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).setBody(\"ABC\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 316,
            "endLine": 319,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public responseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).body(\"ABC\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 318,
            "endLine": 322,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public redirectToCachedResult() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"DEF\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 343,
            "endLine": 344,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public redirectToCachedResult() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"DEF\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 349,
            "endLine": 351,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public redirectToCachedResult() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").setBody(\"ABC\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 337,
            "endLine": 339,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public redirectToCachedResult() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").body(\"ABC\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 341,
            "endLine": 344,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public redirectToCachedResult() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: /foo\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 340,
            "endLine": 342,
            "startColumn": 5,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "public redirectToCachedResult() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: /foo\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 345,
            "endLine": 348,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public secureResponseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).setResponseCode(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: /foo\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 371,
            "endLine": 375,
            "startColumn": 5,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "public secureResponseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).code(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: /foo\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 378,
            "endLine": 383,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public secureResponseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).setBody(\"ABC\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 376,
            "endLine": 379,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public secureResponseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).body(\"ABC\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 384,
            "endLine": 388,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public secureResponseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"DEF\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 380,
            "endLine": 381,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public secureResponseCachingAndRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"DEF\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 389,
            "endLine": 391,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public secureResponseCachingAndProtocolRedirects() : void",
            "type": "Statement",
            "name": "server2.enqueue(new MockResponse().setBody(\"DEF\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 418,
            "endLine": 419,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public secureResponseCachingAndProtocolRedirects() : void",
            "type": "Statement",
            "name": "server2.enqueue(new MockResponse.Builder().body(\"DEF\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 429,
            "endLine": 431,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public secureResponseCachingAndProtocolRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).setResponseCode(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: \" + server2.url(\"/\")));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 421,
            "endLine": 425,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "container": "public secureResponseCachingAndProtocolRedirects() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).code(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: \" + server2.url(\"/\")).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 433,
            "endLine": 438,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public secureResponseCachingAndProtocolRedirects() : void",
            "type": "Statement",
            "name": "server2.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).setBody(\"ABC\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 414,
            "endLine": 417,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public secureResponseCachingAndProtocolRedirects() : void",
            "type": "Statement",
            "name": "server2.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).body(\"ABC\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 424,
            "endLine": 428,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private temporaryRedirectCachedWithCachingHeader(responseCode int, headerName String, headerValue String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"c\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 480,
            "endLine": 481,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "private temporaryRedirectCachedWithCachingHeader(responseCode int, headerName String, headerValue String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"c\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 496,
            "endLine": 498,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private temporaryRedirectCachedWithCachingHeader(responseCode int, headerName String, headerValue String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"b\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 478,
            "endLine": 479,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "private temporaryRedirectCachedWithCachingHeader(responseCode int, headerName String, headerValue String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"b\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 493,
            "endLine": 495,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private temporaryRedirectCachedWithCachingHeader(responseCode int, headerName String, headerValue String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(responseCode).addHeader(headerName,headerValue).addHeader(\"Location\",\"/a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 471,
            "endLine": 474,
            "startColumn": 5,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "private temporaryRedirectCachedWithCachingHeader(responseCode int, headerName String, headerValue String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(responseCode).addHeader(headerName,headerValue).addHeader(\"Location\",\"/a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 484,
            "endLine": 488,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private temporaryRedirectCachedWithCachingHeader(responseCode int, headerName String, headerValue String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(headerName,headerValue).setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 475,
            "endLine": 477,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "private temporaryRedirectCachedWithCachingHeader(responseCode int, headerName String, headerValue String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(headerName,headerValue).body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 489,
            "endLine": 492,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private temporaryRedirectNotCachedWithoutCachingHeader(responseCode int) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"b\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 494,
            "endLine": 495,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "private temporaryRedirectNotCachedWithoutCachingHeader(responseCode int) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"b\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 513,
            "endLine": 515,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private temporaryRedirectNotCachedWithoutCachingHeader(responseCode int) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 492,
            "endLine": 493,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "private temporaryRedirectNotCachedWithoutCachingHeader(responseCode int) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 510,
            "endLine": 512,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private temporaryRedirectNotCachedWithoutCachingHeader(responseCode int) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(responseCode).addHeader(\"Location\",\"/a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 489,
            "endLine": 491,
            "startColumn": 5,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "private temporaryRedirectNotCachedWithoutCachingHeader(responseCode int) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(responseCode).addHeader(\"Location\",\"/a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 506,
            "endLine": 509,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cachedRedirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"ABC\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 508,
            "endLine": 509,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public cachedRedirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"ABC\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 529,
            "endLine": 531,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cachedRedirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"ABC\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 510,
            "endLine": 511,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public cachedRedirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"ABC\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 532,
            "endLine": 534,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cachedRedirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(301).addHeader(\"Cache-Control: max-age=60\").addHeader(\"Location: /bar\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 504,
            "endLine": 507,
            "startColumn": 5,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "public cachedRedirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(301).addHeader(\"Cache-Control: max-age=60\").addHeader(\"Location: /bar\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 524,
            "endLine": 528,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testServerPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "server.enqueue(truncateViolently(mockResponse,16));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 539,
            "endLine": 539,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "container": "private testServerPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "server.enqueue(truncateViolently(mockResponse,16).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 562,
            "endLine": 562,
            "startColumn": 5,
            "endColumn": 65
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testServerPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "MockResponse mockResponse=new MockResponse();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 537,
            "endLine": 537,
            "startColumn": 5,
            "endColumn": 52
          },
          "rightSideLocation": {
            "container": "private testServerPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "MockResponse.Builder mockResponse=new MockResponse.Builder();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 560,
            "endLine": 560,
            "startColumn": 5,
            "endColumn": 68
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testServerPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"Request #2\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 540,
            "endLine": 541,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "private testServerPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"Request #2\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 563,
            "endLine": 565,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testClientPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "MockResponse mockResponse=new MockResponse().throttleBody(6,1,TimeUnit.SECONDS);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 575,
            "endLine": 576,
            "startColumn": 5,
            "endColumn": 47
          },
          "rightSideLocation": {
            "container": "private testClientPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "MockResponse.Builder builder=new MockResponse.Builder().throttleBody(6,1,TimeUnit.SECONDS);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 599,
            "endLine": 600,
            "startColumn": 5,
            "endColumn": 47
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testClientPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"Request #2\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 579,
            "endLine": 580,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "private testClientPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"Request #2\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 603,
            "endLine": 605,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testClientPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "transferKind.setBody(mockResponse,\"ABCDE\\nFGHIJKLMNOPQRSTUVWXYZ\",1024);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 577,
            "endLine": 577,
            "startColumn": 5,
            "endColumn": 78
          },
          "rightSideLocation": {
            "container": "private testClientPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "transferKind.setBody(builder,\"ABCDE\\nFGHIJKLMNOPQRSTUVWXYZ\",1024);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 601,
            "endLine": 601,
            "startColumn": 5,
            "endColumn": 73
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testClientPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "server.enqueue(mockResponse);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 578,
            "endLine": 578,
            "startColumn": 5,
            "endColumn": 34
          },
          "rightSideLocation": {
            "container": "private testClientPrematureDisconnect(transferKind TransferKind) : void",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 602,
            "endLine": 602,
            "startColumn": 5,
            "endColumn": 37
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public defaultExpirationDateFullyCachedForLessThan24Hours() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-105,TimeUnit.SECONDS)).addHeader(\"Date: \" + formatDate(-5,TimeUnit.SECONDS)).setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 605,
            "endLine": 608,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public defaultExpirationDateFullyCachedForLessThan24Hours() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-105,TimeUnit.SECONDS)).addHeader(\"Date: \" + formatDate(-5,TimeUnit.SECONDS)).body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 630,
            "endLine": 634,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public defaultExpirationDateConditionallyCached() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Date: \" + formatDate(-15,TimeUnit.SECONDS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 625,
            "endLine": 627,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public defaultExpirationDateConditionallyCached() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse.Builder().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Date: \" + formatDate(-15,TimeUnit.SECONDS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 651,
            "endLine": 654,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public defaultExpirationDateFullyCachedForMoreThan24Hours() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-105,TimeUnit.DAYS)).addHeader(\"Date: \" + formatDate(-5,TimeUnit.DAYS)).setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 637,
            "endLine": 640,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public defaultExpirationDateFullyCachedForMoreThan24Hours() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-105,TimeUnit.DAYS)).addHeader(\"Date: \" + formatDate(-5,TimeUnit.DAYS)).body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 664,
            "endLine": 668,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public noDefaultExpirationForUrlsWithQueryString() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-105,TimeUnit.SECONDS)).addHeader(\"Date: \" + formatDate(-5,TimeUnit.SECONDS)).setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 650,
            "endLine": 653,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public noDefaultExpirationForUrlsWithQueryString() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-105,TimeUnit.SECONDS)).addHeader(\"Date: \" + formatDate(-5,TimeUnit.SECONDS)).body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 678,
            "endLine": 682,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public noDefaultExpirationForUrlsWithQueryString() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 654,
            "endLine": 655,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public noDefaultExpirationForUrlsWithQueryString() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 683,
            "endLine": 685,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public expirationDateInThePastWithLastModifiedHeader() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 664,
            "endLine": 666,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public expirationDateInThePastWithLastModifiedHeader() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse.Builder().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 694,
            "endLine": 697,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public expirationDateInThePastWithNoLastModifiedHeader() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse().addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 672,
            "endLine": 673,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public expirationDateInThePastWithNoLastModifiedHeader() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse.Builder().addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 703,
            "endLine": 705,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public expirationDateInTheFuture() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse().addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 677,
            "endLine": 678,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "public expirationDateInTheFuture() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse.Builder().addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 709,
            "endLine": 711,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public maxAgePreferredWithMaxAgeAndExpires() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse().addHeader(\"Date: \" + formatDate(0,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=60\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 682,
            "endLine": 685,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "public maxAgePreferredWithMaxAgeAndExpires() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse.Builder().addHeader(\"Date: \" + formatDate(0,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=60\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 715,
            "endLine": 719,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public maxAgeInThePastWithDateAndLastModifiedHeaders() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse().addHeader(\"Date: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Cache-Control: max-age=60\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 690,
            "endLine": 693,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "public maxAgeInThePastWithDateAndLastModifiedHeaders() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse.Builder().addHeader(\"Date: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Cache-Control: max-age=60\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 724,
            "endLine": 728,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public maxAgeInThePastWithDateHeaderButNoLastModifiedHeader() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse().addHeader(\"Date: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=60\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 701,
            "endLine": 703,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "public maxAgeInThePastWithDateHeaderButNoLastModifiedHeader() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse.Builder().addHeader(\"Date: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=60\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 736,
            "endLine": 739,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public maxAgeInTheFutureWithDateHeader() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse().addHeader(\"Date: \" + formatDate(0,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=60\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 707,
            "endLine": 709,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "public maxAgeInTheFutureWithDateHeader() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse.Builder().addHeader(\"Date: \" + formatDate(0,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=60\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 743,
            "endLine": 746,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public maxAgeWithLastModifiedButNoServedDate() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=60\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 718,
            "endLine": 720,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "public maxAgeWithLastModifiedButNoServedDate() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=60\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 756,
            "endLine": 759,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public maxAgeInTheFutureWithDateAndLastModifiedHeaders() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Date: \" + formatDate(0,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=60\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 724,
            "endLine": 727,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "public maxAgeInTheFutureWithDateAndLastModifiedHeaders() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Date: \" + formatDate(0,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=60\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 763,
            "endLine": 767,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public maxAgePreferredOverLowerSharedMaxAge() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse().addHeader(\"Date: \" + formatDate(-2,TimeUnit.MINUTES)).addHeader(\"Cache-Control: s-maxage=60\").addHeader(\"Cache-Control: max-age=180\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 731,
            "endLine": 734,
            "startColumn": 5,
            "endColumn": 51
          },
          "rightSideLocation": {
            "container": "public maxAgePreferredOverLowerSharedMaxAge() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse.Builder().addHeader(\"Date: \" + formatDate(-2,TimeUnit.MINUTES)).addHeader(\"Cache-Control: s-maxage=60\").addHeader(\"Cache-Control: max-age=180\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 771,
            "endLine": 775,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public maxAgePreferredOverHigherMaxAge() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse().addHeader(\"Date: \" + formatDate(-2,TimeUnit.MINUTES)).addHeader(\"Cache-Control: s-maxage=180\").addHeader(\"Cache-Control: max-age=60\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 738,
            "endLine": 741,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "public maxAgePreferredOverHigherMaxAge() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse.Builder().addHeader(\"Date: \" + formatDate(-2,TimeUnit.MINUTES)).addHeader(\"Cache-Control: s-maxage=180\").addHeader(\"Cache-Control: max-age=60\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 779,
            "endLine": 783,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testRequestMethod(requestMethod String, expectCached boolean) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).addHeader(\"X-Response-ID: 1\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 777,
            "endLine": 779,
            "startColumn": 5,
            "endColumn": 41
          },
          "rightSideLocation": {
            "container": "private testRequestMethod(requestMethod String, expectCached boolean) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).addHeader(\"X-Response-ID: 1\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 819,
            "endLine": 822,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testRequestMethod(requestMethod String, expectCached boolean) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"X-Response-ID: 2\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 780,
            "endLine": 781,
            "startColumn": 5,
            "endColumn": 41
          },
          "rightSideLocation": {
            "container": "private testRequestMethod(requestMethod String, expectCached boolean) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"X-Response-ID: 2\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 823,
            "endLine": 825,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testMethodInvalidates(requestMethod String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"C\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 829,
            "endLine": 830,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "private testMethodInvalidates(requestMethod String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"C\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 875,
            "endLine": 877,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testMethodInvalidates(requestMethod String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 827,
            "endLine": 828,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "private testMethodInvalidates(requestMethod String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 872,
            "endLine": 874,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testMethodInvalidates(requestMethod String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 824,
            "endLine": 826,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "private testMethodInvalidates(requestMethod String) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 868,
            "endLine": 871,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public postInvalidatesCacheWithUncacheableResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\").setResponseCode(500));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 853,
            "endLine": 855,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public postInvalidatesCacheWithUncacheableResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").code(500).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 901,
            "endLine": 904,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public postInvalidatesCacheWithUncacheableResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 850,
            "endLine": 852,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "public postInvalidatesCacheWithUncacheableResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 897,
            "endLine": 900,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public postInvalidatesCacheWithUncacheableResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"C\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 856,
            "endLine": 857,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public postInvalidatesCacheWithUncacheableResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"C\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 905,
            "endLine": 907,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public putInvalidatesWithNoContentResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"C\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 883,
            "endLine": 884,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public putInvalidatesWithNoContentResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"C\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 935,
            "endLine": 937,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public putInvalidatesWithNoContentResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().clearHeaders().setResponseCode(HttpURLConnection.HTTP_NO_CONTENT));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 880,
            "endLine": 882,
            "startColumn": 5,
            "endColumn": 62
          },
          "rightSideLocation": {
            "container": "public putInvalidatesWithNoContentResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().code(HttpURLConnection.HTTP_NO_CONTENT).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 931,
            "endLine": 934,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public putInvalidatesWithNoContentResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 877,
            "endLine": 879,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "public putInvalidatesWithNoContentResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 927,
            "endLine": 930,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public etag() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse().addHeader(\"ETag: v1\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 901,
            "endLine": 902,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public etag() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse.Builder().addHeader(\"ETag: v1\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 954,
            "endLine": 956,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public etagAndExpirationDateInThePast() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse().addHeader(\"ETag: v1\").addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 909,
            "endLine": 912,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public etagAndExpirationDateInThePast() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse.Builder().addHeader(\"ETag: v1\").addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 963,
            "endLine": 967,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public etagAndExpirationDateInTheFuture() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse().addHeader(\"ETag: v1\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 918,
            "endLine": 921,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "public etagAndExpirationDateInTheFuture() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse.Builder().addHeader(\"ETag: v1\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 973,
            "endLine": 977,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cacheControlNoCacheAndExpirationDateInTheFuture() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).addHeader(\"Cache-Control: no-cache\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 931,
            "endLine": 934,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public cacheControlNoCacheAndExpirationDateInTheFuture() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse.Builder().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).addHeader(\"Cache-Control: no-cache\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 988,
            "endLine": 992,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public pragmaNoCacheAndExpirationDateInTheFuture() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).addHeader(\"Pragma: no-cache\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 946,
            "endLine": 949,
            "startColumn": 5,
            "endColumn": 41
          },
          "rightSideLocation": {
            "container": "public pragmaNoCacheAndExpirationDateInTheFuture() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse.Builder().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).addHeader(\"Pragma: no-cache\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1005,
            "endLine": 1009,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cacheControlNoStoreAndExpirationDateInTheFuture() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).addHeader(\"Cache-Control: no-store\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 960,
            "endLine": 963,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public cacheControlNoStoreAndExpirationDateInTheFuture() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).addHeader(\"Cache-Control: no-store\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1021,
            "endLine": 1025,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public partialRangeResponsesDoNotCorruptCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"AA\").setResponseCode(HttpURLConnection.HTTP_PARTIAL).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).addHeader(\"Content-Range: bytes 1000-1001/2000\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 969,
            "endLine": 973,
            "startColumn": 5,
            "endColumn": 60
          },
          "rightSideLocation": {
            "container": "public partialRangeResponsesDoNotCorruptCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"AA\").code(HttpURLConnection.HTTP_PARTIAL).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).addHeader(\"Content-Range: bytes 1000-1001/2000\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1031,
            "endLine": 1036,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public partialRangeResponsesDoNotCorruptCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"BB\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 974,
            "endLine": 975,
            "startColumn": 5,
            "endColumn": 25
          },
          "rightSideLocation": {
            "container": "public partialRangeResponsesDoNotCorruptCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"BB\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1037,
            "endLine": 1039,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public serverReturnsDocumentOlderThanCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\").addHeader(\"Last-Modified: \" + formatDate(-4,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1001,
            "endLine": 1003,
            "startColumn": 5,
            "endColumn": 73
          },
          "rightSideLocation": {
            "container": "public serverReturnsDocumentOlderThanCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").addHeader(\"Last-Modified: \" + formatDate(-4,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1066,
            "endLine": 1069,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public serverReturnsDocumentOlderThanCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 997,
            "endLine": 1000,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public serverReturnsDocumentOlderThanCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1061,
            "endLine": 1065,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public serverReturnsDocumentOlderThanCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1004,
            "endLine": 1005,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public serverReturnsDocumentOlderThanCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1070,
            "endLine": 1072,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientSideNoStore() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1015,
            "endLine": 1017,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public clientSideNoStore() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1082,
            "endLine": 1085,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientSideNoStore() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1018,
            "endLine": 1020,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public clientSideNoStore() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1086,
            "endLine": 1089,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public nonIdentityEncodingAndConditionalCache() : void",
            "type": "Statement",
            "name": "assertNonIdentityEncodingCached(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1037,
            "endLine": 1039,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public nonIdentityEncodingAndConditionalCache() : void",
            "type": "Statement",
            "name": "assertNonIdentityEncodingCached(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1106,
            "endLine": 1109,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public nonIdentityEncodingAndFullCache() : void",
            "type": "Statement",
            "name": "assertNonIdentityEncodingCached(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1043,
            "endLine": 1045,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "public nonIdentityEncodingAndFullCache() : void",
            "type": "Statement",
            "name": "assertNonIdentityEncodingCached(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1113,
            "endLine": 1116,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertNonIdentityEncodingCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1052,
            "endLine": 1053,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "private assertNonIdentityEncodingCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1124,
            "endLine": 1126,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertNonIdentityEncodingCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(response.setBody(gzip(\"ABCABCABC\")).addHeader(\"Content-Encoding: gzip\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1049,
            "endLine": 1051,
            "startColumn": 5,
            "endColumn": 47
          },
          "rightSideLocation": {
            "container": "private assertNonIdentityEncodingCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(response.newBuilder().body(gzip(\"ABCABCABC\")).addHeader(\"Content-Encoding: gzip\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1120,
            "endLine": 1123,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertNonIdentityEncodingCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1054,
            "endLine": 1055,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "private assertNonIdentityEncodingCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1127,
            "endLine": 1129,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"ABCABCABC\").addHeader(\"Content-Type: text/plain\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1066,
            "endLine": 1070,
            "startColumn": 5,
            "endColumn": 71
          },
          "rightSideLocation": {
            "container": "public previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"ABCABCABC\").addHeader(\"Content-Type: text/plain\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1140,
            "endLine": 1145,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED).addHeader(\"Content-Type: text/plain\").addHeader(\"Content-Encoding: gzip\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1071,
            "endLine": 1074,
            "startColumn": 5,
            "endColumn": 51
          },
          "rightSideLocation": {
            "container": "public previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).addHeader(\"Content-Type: text/plain\").addHeader(\"Content-Encoding: gzip\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1146,
            "endLine": 1150,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"DEFDEFDEF\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1075,
            "endLine": 1076,
            "startColumn": 5,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "public previouslyNotGzippedContentIsNotModifiedAndSpecifiesGzipEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"DEFDEFDEF\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1151,
            "endLine": 1153,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"DEFDEFDEF\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1094,
            "endLine": 1095,
            "startColumn": 5,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "public changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"DEFDEFDEF\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1173,
            "endLine": 1175,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(gzip(\"ABCABCABC\")).addHeader(\"Content-Type: text/plain\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Content-Encoding: gzip\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1084,
            "endLine": 1089,
            "startColumn": 5,
            "endColumn": 51
          },
          "rightSideLocation": {
            "container": "public changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(gzip(\"ABCABCABC\")).addHeader(\"Content-Type: text/plain\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Content-Encoding: gzip\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1161,
            "endLine": 1167,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED).addHeader(\"Content-Type: text/plain\").addHeader(\"Content-Encoding: identity\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1090,
            "endLine": 1093,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public changedGzippedContentIsNotModifiedAndSpecifiesNewEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).addHeader(\"Content-Type: text/plain\").addHeader(\"Content-Encoding: identity\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1168,
            "endLine": 1172,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public notModifiedSpecifiesEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(gzip(\"ABCABCABC\")).addHeader(\"Content-Encoding: gzip\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1103,
            "endLine": 1107,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public notModifiedSpecifiesEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(gzip(\"ABCABCABC\")).addHeader(\"Content-Encoding: gzip\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1183,
            "endLine": 1188,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public notModifiedSpecifiesEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"DEFDEFDEF\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1111,
            "endLine": 1112,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public notModifiedSpecifiesEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"DEFDEFDEF\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1193,
            "endLine": 1195,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public notModifiedSpecifiesEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED).addHeader(\"Content-Encoding: gzip\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1108,
            "endLine": 1110,
            "startColumn": 5,
            "endColumn": 47
          },
          "rightSideLocation": {
            "container": "public notModifiedSpecifiesEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).addHeader(\"Content-Encoding: gzip\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1189,
            "endLine": 1192,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public gzipAndVaryOnAcceptEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"FAIL\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1126,
            "endLine": 1127,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "container": "public gzipAndVaryOnAcceptEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"FAIL\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1210,
            "endLine": 1212,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public gzipAndVaryOnAcceptEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(gzip(\"ABCABCABC\")).addHeader(\"Content-Encoding: gzip\").addHeader(\"Vary: Accept-Encoding\").addHeader(\"Cache-Control: max-age=60\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1121,
            "endLine": 1125,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "public gzipAndVaryOnAcceptEncoding() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(gzip(\"ABCABCABC\")).addHeader(\"Content-Encoding: gzip\").addHeader(\"Vary: Accept-Encoding\").addHeader(\"Cache-Control: max-age=60\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1204,
            "endLine": 1209,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalCacheHitIsNotDoublePooled() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().clearHeaders().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1139,
            "endLine": 1141,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public conditionalCacheHitIsNotDoublePooled() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1225,
            "endLine": 1228,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalCacheHitIsNotDoublePooled() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"ETag: v1\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1136,
            "endLine": 1138,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public conditionalCacheHitIsNotDoublePooled() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"ETag: v1\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1221,
            "endLine": 1224,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public expiresDateBeforeModifiedDate() : void",
            "type": "Statement",
            "name": "assertConditionallyCached(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-2,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1149,
            "endLine": 1151,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public expiresDateBeforeModifiedDate() : void",
            "type": "Statement",
            "name": "assertConditionallyCached(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(-2,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1236,
            "endLine": 1239,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestMaxAge() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1160,
            "endLine": 1161,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public requestMaxAge() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1249,
            "endLine": 1251,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestMaxAge() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Date: \" + formatDate(-1,TimeUnit.MINUTES)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1155,
            "endLine": 1159,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "public requestMaxAge() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Last-Modified: \" + formatDate(-2,TimeUnit.HOURS)).addHeader(\"Date: \" + formatDate(-1,TimeUnit.MINUTES)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1243,
            "endLine": 1248,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestMinFresh() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1178,
            "endLine": 1179,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public requestMinFresh() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1269,
            "endLine": 1271,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestMinFresh() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Cache-Control: max-age=60\").addHeader(\"Date: \" + formatDate(0,TimeUnit.MINUTES)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1174,
            "endLine": 1177,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public requestMinFresh() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Cache-Control: max-age=60\").addHeader(\"Date: \" + formatDate(0,TimeUnit.MINUTES)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1264,
            "endLine": 1268,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestMaxStale() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Cache-Control: max-age=120\").addHeader(\"Date: \" + formatDate(-4,TimeUnit.MINUTES)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1192,
            "endLine": 1195,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "public requestMaxStale() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Cache-Control: max-age=120\").addHeader(\"Date: \" + formatDate(-4,TimeUnit.MINUTES)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1284,
            "endLine": 1288,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestMaxStale() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1196,
            "endLine": 1197,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public requestMaxStale() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1289,
            "endLine": 1291,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestMaxStaleDirectiveWithNoValue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1217,
            "endLine": 1218,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public requestMaxStaleDirectiveWithNoValue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1312,
            "endLine": 1314,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestMaxStaleDirectiveWithNoValue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Cache-Control: max-age=120\").addHeader(\"Date: \" + formatDate(-4,TimeUnit.MINUTES)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1213,
            "endLine": 1216,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "public requestMaxStaleDirectiveWithNoValue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Cache-Control: max-age=120\").addHeader(\"Date: \" + formatDate(-4,TimeUnit.MINUTES)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1307,
            "endLine": 1311,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestMaxStaleNotHonoredWithMustRevalidate() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Cache-Control: max-age=120, must-revalidate\").addHeader(\"Date: \" + formatDate(-4,TimeUnit.MINUTES)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1234,
            "endLine": 1237,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "public requestMaxStaleNotHonoredWithMustRevalidate() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Cache-Control: max-age=120, must-revalidate\").addHeader(\"Date: \" + formatDate(-4,TimeUnit.MINUTES)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1330,
            "endLine": 1334,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestMaxStaleNotHonoredWithMustRevalidate() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1238,
            "endLine": 1239,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public requestMaxStaleNotHonoredWithMustRevalidate() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1335,
            "endLine": 1337,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestOnlyIfCachedWithFullResponseCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Cache-Control: max-age=30\").addHeader(\"Date: \" + formatDate(0,TimeUnit.MINUTES)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1267,
            "endLine": 1270,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public requestOnlyIfCachedWithFullResponseCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Cache-Control: max-age=30\").addHeader(\"Date: \" + formatDate(0,TimeUnit.MINUTES)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1365,
            "endLine": 1369,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestOnlyIfCachedWithConditionalResponseCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Cache-Control: max-age=30\").addHeader(\"Date: \" + formatDate(-1,TimeUnit.MINUTES)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1285,
            "endLine": 1288,
            "startColumn": 5,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "public requestOnlyIfCachedWithConditionalResponseCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Cache-Control: max-age=30\").addHeader(\"Date: \" + formatDate(-1,TimeUnit.MINUTES)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1384,
            "endLine": 1388,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestOnlyIfCachedWithUnhelpfulResponseCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1304,
            "endLine": 1305,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public requestOnlyIfCachedWithUnhelpfulResponseCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1404,
            "endLine": 1406,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestCacheControlNoCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1326,
            "endLine": 1327,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public requestCacheControlNoCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1428,
            "endLine": 1430,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestCacheControlNoCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Date: \" + formatDate(0,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=60\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1321,
            "endLine": 1325,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public requestCacheControlNoCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Date: \" + formatDate(0,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=60\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1422,
            "endLine": 1427,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestPragmaNoCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1345,
            "endLine": 1346,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public requestPragmaNoCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1449,
            "endLine": 1451,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestPragmaNoCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Date: \" + formatDate(0,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=60\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1340,
            "endLine": 1344,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public requestPragmaNoCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-120,TimeUnit.SECONDS)).addHeader(\"Date: \" + formatDate(0,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=60\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1443,
            "endLine": 1448,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientSuppliedIfModifiedSinceWithCachedResult() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse().addHeader(\"ETag: v3\").addHeader(\"Cache-Control: max-age=0\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1359,
            "endLine": 1361,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public clientSuppliedIfModifiedSinceWithCachedResult() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse.Builder().addHeader(\"ETag: v3\").addHeader(\"Cache-Control: max-age=0\").build();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1464,
            "endLine": 1467,
            "startColumn": 5,
            "endColumn": 18
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientSuppliedIfNoneMatchSinceWithCachedResult() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Date: \" + formatDate(-2,TimeUnit.MINUTES)).addHeader(\"Cache-Control: max-age=0\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1371,
            "endLine": 1374,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public clientSuppliedIfNoneMatchSinceWithCachedResult() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse.Builder().addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Date: \" + formatDate(-2,TimeUnit.MINUTES)).addHeader(\"Cache-Control: max-age=0\").build();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1477,
            "endLine": 1481,
            "startColumn": 5,
            "endColumn": 18
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertClientSuppliedCondition(seed MockResponse, conditionName String, conditionValue String) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(seed.setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1382,
            "endLine": 1382,
            "startColumn": 5,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "private assertClientSuppliedCondition(seed MockResponse, conditionName String, conditionValue String) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(seed.newBuilder().body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1489,
            "endLine": 1491,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertClientSuppliedCondition(seed MockResponse, conditionName String, conditionValue String) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1383,
            "endLine": 1384,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "private assertClientSuppliedCondition(seed MockResponse, conditionName String, conditionValue String) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1492,
            "endLine": 1494,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public retainServedDateFormat() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1419,
            "endLine": 1420,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public retainServedDateFormat() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1530,
            "endLine": 1532,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public retainServedDateFormat() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + lastModifiedString).addHeader(\"Expires: \" + servedString).setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1415,
            "endLine": 1418,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public retainServedDateFormat() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + lastModifiedString).addHeader(\"Expires: \" + servedString).body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1525,
            "endLine": 1529,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientSuppliedConditionWithoutCachedResult() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1435,
            "endLine": 1436,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public clientSuppliedConditionWithoutCachedResult() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1547,
            "endLine": 1549,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public authorizationRequestFullyCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1448,
            "endLine": 1450,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public authorizationRequestFullyCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1561,
            "endLine": 1564,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public authorizationRequestFullyCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1451,
            "endLine": 1452,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public authorizationRequestFullyCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1565,
            "endLine": 1567,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public contentLocationDoesNotPopulateCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Content-Location: /bar\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1465,
            "endLine": 1468,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public contentLocationDoesNotPopulateCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Content-Location: /bar\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1580,
            "endLine": 1584,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public contentLocationDoesNotPopulateCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1469,
            "endLine": 1470,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public contentLocationDoesNotPopulateCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1585,
            "endLine": 1587,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public connectionIsReturnedToPoolAfterConditionalSuccess() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1477,
            "endLine": 1480,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public connectionIsReturnedToPoolAfterConditionalSuccess() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1594,
            "endLine": 1598,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public connectionIsReturnedToPoolAfterConditionalSuccess() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1481,
            "endLine": 1482,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public connectionIsReturnedToPoolAfterConditionalSuccess() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1599,
            "endLine": 1601,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public connectionIsReturnedToPoolAfterConditionalSuccess() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1483,
            "endLine": 1484,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public connectionIsReturnedToPoolAfterConditionalSuccess() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1602,
            "endLine": 1604,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public statisticsConditionalCacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"C\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1502,
            "endLine": 1503,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public statisticsConditionalCacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"C\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1624,
            "endLine": 1626,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public statisticsConditionalCacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1500,
            "endLine": 1501,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public statisticsConditionalCacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1621,
            "endLine": 1623,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public statisticsConditionalCacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1496,
            "endLine": 1499,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public statisticsConditionalCacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1616,
            "endLine": 1620,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public statisticsConditionalCacheHit() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1521,
            "endLine": 1522,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public statisticsConditionalCacheHit() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1645,
            "endLine": 1647,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public statisticsConditionalCacheHit() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1523,
            "endLine": 1524,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public statisticsConditionalCacheHit() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1648,
            "endLine": 1650,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public statisticsConditionalCacheHit() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1517,
            "endLine": 1520,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public statisticsConditionalCacheHit() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1640,
            "endLine": 1644,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public statisticsFullCacheHit() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1538,
            "endLine": 1540,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public statisticsFullCacheHit() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1664,
            "endLine": 1667,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMatchesChangedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1554,
            "endLine": 1557,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMatchesChangedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1681,
            "endLine": 1685,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMatchesChangedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1558,
            "endLine": 1559,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMatchesChangedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1686,
            "endLine": 1688,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMatchesUnchangedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1578,
            "endLine": 1581,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMatchesUnchangedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1707,
            "endLine": 1711,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMatchesUnchangedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1582,
            "endLine": 1583,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMatchesUnchangedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1712,
            "endLine": 1714,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMatchesAbsentRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Foo\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1601,
            "endLine": 1604,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMatchesAbsentRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Foo\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1732,
            "endLine": 1736,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMatchesAbsentRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1605,
            "endLine": 1606,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMatchesAbsentRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1737,
            "endLine": 1739,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMatchesAddedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1617,
            "endLine": 1618,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMatchesAddedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1751,
            "endLine": 1753,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMatchesAddedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Foo\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1613,
            "endLine": 1616,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMatchesAddedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Foo\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1746,
            "endLine": 1750,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMatchesRemovedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Foo\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1629,
            "endLine": 1632,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMatchesRemovedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Foo\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1764,
            "endLine": 1768,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMatchesRemovedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1633,
            "endLine": 1634,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMatchesRemovedRequestHeaderField() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1769,
            "endLine": 1771,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyFieldsAreCaseInsensitive() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1649,
            "endLine": 1650,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyFieldsAreCaseInsensitive() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1787,
            "endLine": 1789,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyFieldsAreCaseInsensitive() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: ACCEPT-LANGUAGE\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1645,
            "endLine": 1648,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyFieldsAreCaseInsensitive() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: ACCEPT-LANGUAGE\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1782,
            "endLine": 1786,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMultipleFieldsWithMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1673,
            "endLine": 1674,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMultipleFieldsWithMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1813,
            "endLine": 1815,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMultipleFieldsWithMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language, Accept-Charset\").addHeader(\"Vary: Accept-Encoding\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1668,
            "endLine": 1672,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMultipleFieldsWithMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language, Accept-Charset\").addHeader(\"Vary: Accept-Encoding\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1807,
            "endLine": 1812,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMultipleFieldsWithNoMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language, Accept-Charset\").addHeader(\"Vary: Accept-Encoding\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1696,
            "endLine": 1700,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMultipleFieldsWithNoMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language, Accept-Charset\").addHeader(\"Vary: Accept-Encoding\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1837,
            "endLine": 1842,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMultipleFieldsWithNoMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1701,
            "endLine": 1702,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMultipleFieldsWithNoMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1843,
            "endLine": 1845,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMultipleFieldValuesWithMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1724,
            "endLine": 1727,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMultipleFieldValuesWithMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1867,
            "endLine": 1871,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMultipleFieldValuesWithMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1728,
            "endLine": 1729,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMultipleFieldValuesWithMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1872,
            "endLine": 1874,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMultipleFieldValuesWithNoMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1750,
            "endLine": 1753,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMultipleFieldValuesWithNoMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1895,
            "endLine": 1899,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyMultipleFieldValuesWithNoMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1754,
            "endLine": 1755,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyMultipleFieldValuesWithNoMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1900,
            "endLine": 1902,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyAsterisk() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1780,
            "endLine": 1781,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyAsterisk() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1928,
            "endLine": 1930,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyAsterisk() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: *\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1776,
            "endLine": 1779,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyAsterisk() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: *\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1923,
            "endLine": 1927,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyAndHttps() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1789,
            "endLine": 1792,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyAndHttps() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").addHeader(\"Vary: Accept-Language\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1938,
            "endLine": 1942,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public varyAndHttps() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1793,
            "endLine": 1794,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public varyAndHttps() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1943,
            "endLine": 1945,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cachePlusCookies() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Set-Cookie: a=SECOND\").setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1829,
            "endLine": 1831,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public cachePlusCookies() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Set-Cookie: a=SECOND\").code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1981,
            "endLine": 1984,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cachePlusCookies() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Set-Cookie: a=FIRST\").addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1824,
            "endLine": 1828,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public cachePlusCookies() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Set-Cookie: a=FIRST\").addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1975,
            "endLine": 1980,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getHeadersReturnsNetworkEndToEndHeaders() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Allow: GET, HEAD\").addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1841,
            "endLine": 1845,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public getHeadersReturnsNetworkEndToEndHeaders() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Allow: GET, HEAD\").addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1994,
            "endLine": 1999,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getHeadersReturnsNetworkEndToEndHeaders() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Allow: GET, HEAD, PUT\").setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1846,
            "endLine": 1848,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public getHeadersReturnsNetworkEndToEndHeaders() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Allow: GET, HEAD, PUT\").code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2000,
            "endLine": 2003,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getHeadersReturnsCachedHopByHopHeaders() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Transfer-Encoding: identity\").addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1860,
            "endLine": 1864,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public getHeadersReturnsCachedHopByHopHeaders() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Transfer-Encoding: identity\").addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2015,
            "endLine": 2020,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getHeadersReturnsCachedHopByHopHeaders() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Transfer-Encoding: none\").setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1865,
            "endLine": 1867,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public getHeadersReturnsCachedHopByHopHeaders() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Transfer-Encoding: none\").code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2021,
            "endLine": 2024,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getHeadersDeletesCached100LevelWarnings() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1884,
            "endLine": 1885,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public getHeadersDeletesCached100LevelWarnings() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2042,
            "endLine": 2044,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getHeadersDeletesCached100LevelWarnings() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Warning: 199 test danger\").addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1879,
            "endLine": 1883,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public getHeadersDeletesCached100LevelWarnings() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Warning: 199 test danger\").addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2036,
            "endLine": 2041,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getHeadersRetainsCached200LevelWarnings() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Warning: 299 test danger\").addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1897,
            "endLine": 1901,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public getHeadersRetainsCached200LevelWarnings() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Warning: 299 test danger\").addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2056,
            "endLine": 2061,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getHeadersRetainsCached200LevelWarnings() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1902,
            "endLine": 1903,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public getHeadersRetainsCached200LevelWarnings() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2062,
            "endLine": 2064,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public doNotCachePartialResponse() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse().setResponseCode(HttpURLConnection.HTTP_PARTIAL).addHeader(\"Date: \" + formatDate(0,TimeUnit.HOURS)).addHeader(\"Content-Range: bytes 100-100/200\").addHeader(\"Cache-Control: max-age=60\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1915,
            "endLine": 1919,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "public doNotCachePartialResponse() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse.Builder().code(HttpURLConnection.HTTP_PARTIAL).addHeader(\"Date: \" + formatDate(0,TimeUnit.HOURS)).addHeader(\"Content-Range: bytes 100-100/200\").addHeader(\"Cache-Control: max-age=60\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2076,
            "endLine": 2081,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalHitUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1931,
            "endLine": 1932,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public conditionalHitUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2095,
            "endLine": 2097,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalHitUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=30\").addHeader(\"Allow: GET, HEAD\").setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1927,
            "endLine": 1930,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public conditionalHitUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=30\").addHeader(\"Allow: GET, HEAD\").code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2090,
            "endLine": 2094,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalHitUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(0,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=0\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1923,
            "endLine": 1926,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public conditionalHitUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(0,TimeUnit.SECONDS)).addHeader(\"Cache-Control: max-age=0\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2085,
            "endLine": 2089,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseSourceHeaderCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Cache-Control: max-age=30\").addHeader(\"Date: \" + formatDate(0,TimeUnit.MINUTES)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1962,
            "endLine": 1965,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public responseSourceHeaderCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Cache-Control: max-age=30\").addHeader(\"Date: \" + formatDate(0,TimeUnit.MINUTES)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2127,
            "endLine": 2131,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseSourceHeaderConditionalCacheFetched() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\").addHeader(\"Cache-Control: max-age=30\").addHeader(\"Date: \" + formatDate(0,TimeUnit.MINUTES)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1980,
            "endLine": 1983,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public responseSourceHeaderConditionalCacheFetched() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").addHeader(\"Cache-Control: max-age=30\").addHeader(\"Date: \" + formatDate(0,TimeUnit.MINUTES)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2147,
            "endLine": 2151,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseSourceHeaderConditionalCacheFetched() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Cache-Control: max-age=30\").addHeader(\"Date: \" + formatDate(-31,TimeUnit.MINUTES)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1976,
            "endLine": 1979,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public responseSourceHeaderConditionalCacheFetched() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Cache-Control: max-age=30\").addHeader(\"Date: \" + formatDate(-31,TimeUnit.MINUTES)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2142,
            "endLine": 2146,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseSourceHeaderConditionalCacheNotFetched() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(304));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1995,
            "endLine": 1996,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public responseSourceHeaderConditionalCacheNotFetched() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(304).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2164,
            "endLine": 2166,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseSourceHeaderConditionalCacheNotFetched() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\").addHeader(\"Cache-Control: max-age=0\").addHeader(\"Date: \" + formatDate(0,TimeUnit.MINUTES)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1991,
            "endLine": 1994,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public responseSourceHeaderConditionalCacheNotFetched() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").addHeader(\"Cache-Control: max-age=0\").addHeader(\"Date: \" + formatDate(0,TimeUnit.MINUTES)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2159,
            "endLine": 2163,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseSourceHeaderFetched() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2004,
            "endLine": 2005,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public responseSourceHeaderFetched() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2174,
            "endLine": 2176,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public emptyResponseHeaderNameFromCacheIsLenient() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeaders(headers.build()).setBody(\"body\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2015,
            "endLine": 2017,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "container": "public emptyResponseHeaderNameFromCacheIsLenient() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().headers(headers.build()).body(\"body\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2186,
            "endLine": 2189,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public testGoldenCacheResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().clearHeaders().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2033,
            "endLine": 2035,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public testGoldenCacheResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().clearHeaders().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2205,
            "endLine": 2208,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public evictAll() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2229,
            "endLine": 2230,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public evictAll() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2403,
            "endLine": 2405,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public evictAll() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2226,
            "endLine": 2228,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public evictAll() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2399,
            "endLine": 2402,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public networkInterceptorInvokedForConditionalGet() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"ETag: v1\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2240,
            "endLine": 2242,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public networkInterceptorInvokedForConditionalGet() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"ETag: v1\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2415,
            "endLine": 2418,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public networkInterceptorInvokedForConditionalGet() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2243,
            "endLine": 2244,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public networkInterceptorInvokedForConditionalGet() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2419,
            "endLine": 2421,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public networkInterceptorNotInvokedForFullyCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2264,
            "endLine": 2266,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public networkInterceptorNotInvokedForFullyCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2441,
            "endLine": 2444,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public iterateCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"c\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2291,
            "endLine": 2292,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public iterateCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"c\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2471,
            "endLine": 2473,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public iterateCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"b\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2286,
            "endLine": 2287,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public iterateCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"b\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2465,
            "endLine": 2467,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public iterateCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2281,
            "endLine": 2282,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public iterateCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2459,
            "endLine": 2461,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public iteratorRemoveFromCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"b\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2328,
            "endLine": 2329,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public iteratorRemoveFromCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"b\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2510,
            "endLine": 2512,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public iteratorRemoveFromCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control: max-age=60\").setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2316,
            "endLine": 2318,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public iteratorRemoveFromCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2497,
            "endLine": 2500,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public iteratorRemoveWithoutNextThrows() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2335,
            "endLine": 2336,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public iteratorRemoveWithoutNextThrows() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2518,
            "endLine": 2520,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public iteratorRemoveOncePerCallToNext() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2351,
            "endLine": 2352,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public iteratorRemoveOncePerCallToNext() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2535,
            "endLine": 2537,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public elementEvictedBetweenHasNextAndNext() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2370,
            "endLine": 2371,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public elementEvictedBetweenHasNextAndNext() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2555,
            "endLine": 2557,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public elementEvictedBeforeHasNextIsOmitted() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2389,
            "endLine": 2390,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public elementEvictedBeforeHasNextIsOmitted() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2575,
            "endLine": 2577,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalMissUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"ETag: v1\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2408,
            "endLine": 2410,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public conditionalMissUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"ETag: v1\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2595,
            "endLine": 2598,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalMissUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"ETag: v2\").setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2413,
            "endLine": 2415,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public conditionalMissUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"ETag: v2\").body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2602,
            "endLine": 2605,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalMissUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2416,
            "endLine": 2417,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public conditionalMissUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2606,
            "endLine": 2608,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalMissUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2411,
            "endLine": 2412,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public conditionalMissUpdatesCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2599,
            "endLine": 2601,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public combinedCacheHeadersCanBeNonAscii() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Transfer-Encoding: none\").addHeaderLenient(\"Gamma\",\"Γ\").addHeaderLenient(\"Δ\",\"Delta\").setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2438,
            "endLine": 2442,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public combinedCacheHeadersCanBeNonAscii() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Transfer-Encoding: none\").addHeaderLenient(\"Gamma\",\"Γ\").addHeaderLenient(\"Δ\",\"Delta\").code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2630,
            "endLine": 2635,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public combinedCacheHeadersCanBeNonAscii() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").addHeaderLenient(\"Alpha\",\"α\").addHeaderLenient(\"β\",\"Beta\").setBody(\"abcd\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2432,
            "endLine": 2437,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "container": "public combinedCacheHeadersCanBeNonAscii() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Cache-Control: max-age=0\").addHeaderLenient(\"Alpha\",\"α\").addHeaderLenient(\"β\",\"Beta\").body(\"abcd\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2623,
            "endLine": 2629,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public etagConditionCanBeNonAscii() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeaderLenient(\"Etag\",\"α\").addHeader(\"Cache-Control: max-age=0\").setBody(\"abcd\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2458,
            "endLine": 2461,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "container": "public etagConditionCanBeNonAscii() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeaderLenient(\"Etag\",\"α\").addHeader(\"Cache-Control: max-age=0\").body(\"abcd\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2651,
            "endLine": 2655,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public etagConditionCanBeNonAscii() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2462,
            "endLine": 2463,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public etagConditionCanBeNonAscii() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2656,
            "endLine": 2658,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalHitHeadersCombined() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Etag\",\"a\").addHeader(\"Cache-Control: max-age=0\").addHeader(\"A: a1\").addHeader(\"B: b2\").addHeader(\"B: b3\").setBody(\"abcd\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2476,
            "endLine": 2482,
            "startColumn": 5,
            "endColumn": 27
          },
          "rightSideLocation": {
            "container": "public conditionalHitHeadersCombined() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Etag\",\"a\").addHeader(\"Cache-Control: max-age=0\").addHeader(\"A: a1\").addHeader(\"B: b2\").addHeader(\"B: b3\").body(\"abcd\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2671,
            "endLine": 2678,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalHitHeadersCombined() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED).addHeader(\"B: b4\").addHeader(\"B: b5\").addHeader(\"C: c6\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2483,
            "endLine": 2487,
            "startColumn": 5,
            "endColumn": 30
          },
          "rightSideLocation": {
            "container": "public conditionalHitHeadersCombined() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).addHeader(\"B: b4\").addHeader(\"B: b5\").addHeader(\"C: c6\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2679,
            "endLine": 2684,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertNotCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(response.setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2531,
            "endLine": 2531,
            "startColumn": 5,
            "endColumn": 43
          },
          "rightSideLocation": {
            "container": "private assertNotCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(response.newBuilder().body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2728,
            "endLine": 2730,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertNotCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2532,
            "endLine": 2533,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "private assertNotCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2731,
            "endLine": 2733,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertConditionallyCached(response MockResponse) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(response.setBody(\"B\").setStatus(\"HTTP/1.1 200 B-OK\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2548,
            "endLine": 2549,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "container": "private assertConditionallyCached(response MockResponse) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(response.newBuilder().body(\"B\").status(\"HTTP/1.1 200 B-OK\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2752,
            "endLine": 2755,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertConditionallyCached(response MockResponse) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2544,
            "endLine": 2545,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "private assertConditionallyCached(response MockResponse) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2747,
            "endLine": 2749,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertConditionallyCached(response MockResponse) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setStatus(\"HTTP/1.1 200 C-OK\").setBody(\"C\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2550,
            "endLine": 2552,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "private assertConditionallyCached(response MockResponse) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().status(\"HTTP/1.1 200 C-OK\").body(\"C\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2756,
            "endLine": 2759,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertConditionallyCached(response MockResponse) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(response.setBody(\"A\").setStatus(\"HTTP/1.1 200 A-OK\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2543,
            "endLine": 2543,
            "startColumn": 5,
            "endColumn": 74
          },
          "rightSideLocation": {
            "container": "private assertConditionallyCached(response MockResponse) : RecordedRequest",
            "type": "Statement",
            "name": "server.enqueue(response.newBuilder().body(\"A\").status(\"HTTP/1.1 200 A-OK\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2743,
            "endLine": 2746,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public immutableIsCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2582,
            "endLine": 2583,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public immutableIsCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2790,
            "endLine": 2792,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public immutableIsCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control\",\"immutable, max-age=10\").setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2579,
            "endLine": 2581,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public immutableIsCached() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control\",\"immutable, max-age=10\").body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2786,
            "endLine": 2789,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public immutableIsCachedAfterMultipleCalls() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2591,
            "endLine": 2592,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public immutableIsCachedAfterMultipleCalls() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2800,
            "endLine": 2802,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public immutableIsCachedAfterMultipleCalls() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Cache-Control\",\"immutable, max-age=10\").setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2593,
            "endLine": 2595,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public immutableIsCachedAfterMultipleCalls() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Cache-Control\",\"immutable, max-age=10\").body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2803,
            "endLine": 2806,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public immutableIsCachedAfterMultipleCalls() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"C\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2596,
            "endLine": 2597,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public immutableIsCachedAfterMultipleCalls() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"C\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2807,
            "endLine": 2809,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public immutableIsNotCachedBeyondFreshnessLifetime() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse().addHeader(\"Cache-Control: immutable\").addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Date: \" + formatDate(-15,TimeUnit.SECONDS)));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2611,
            "endLine": 2614,
            "startColumn": 5,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public immutableIsNotCachedBeyondFreshnessLifetime() : void",
            "type": "Statement",
            "name": "RecordedRequest conditionalRequest=assertConditionallyCached(new MockResponse.Builder().addHeader(\"Cache-Control: immutable\").addHeader(\"Last-Modified: \" + lastModifiedDate).addHeader(\"Date: \" + formatDate(-15,TimeUnit.SECONDS)).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2823,
            "endLine": 2827,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertFullyCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(response.setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2667,
            "endLine": 2667,
            "startColumn": 5,
            "endColumn": 43
          },
          "rightSideLocation": {
            "container": "private assertFullyCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(response.newBuilder().body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2880,
            "endLine": 2880,
            "startColumn": 5,
            "endColumn": 61
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertFullyCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(response.setBody(\"B\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2668,
            "endLine": 2668,
            "startColumn": 5,
            "endColumn": 43
          },
          "rightSideLocation": {
            "container": "private assertFullyCached(response MockResponse) : void",
            "type": "Statement",
            "name": "server.enqueue(response.newBuilder().body(\"B\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2881,
            "endLine": 2881,
            "startColumn": 5,
            "endColumn": 61
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public skipsOnRedirectWhenDnsDontMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(301).addHeader(\"Location\",url.newBuilder().host(\"differentdns.com\").build()));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 279,
            "endLine": 281,
            "startColumn": 5,
            "endColumn": 84
          },
          "rightSideLocation": {
            "container": "public skipsOnRedirectWhenDnsDontMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(301).addHeader(\"Location\",url.newBuilder().host(\"differentdns.com\").build()).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 279,
            "endLine": 282,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public skipsOnRedirectWhenDnsDontMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"unexpected call\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 282,
            "endLine": 283,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public skipsOnRedirectWhenDnsDontMatch() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"unexpected call\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 283,
            "endLine": 285,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public skipsOnRedirectWhenNotSubjectAltName() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(301).addHeader(\"Location\",url.newBuilder().host(\"nonsan.com\").build()));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 310,
            "endLine": 312,
            "startColumn": 5,
            "endColumn": 78
          },
          "rightSideLocation": {
            "container": "public skipsOnRedirectWhenNotSubjectAltName() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(301).addHeader(\"Location\",url.newBuilder().host(\"nonsan.com\").build()).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 312,
            "endLine": 315,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public skipsOnRedirectWhenCertificatePinningFails() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(301).addHeader(\"Location\",url.newBuilder().host(\"san.com\").build()));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 368,
            "endLine": 370,
            "startColumn": 5,
            "endColumn": 75
          },
          "rightSideLocation": {
            "container": "public skipsOnRedirectWhenCertificatePinningFails() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(301).addHeader(\"Location\",url.newBuilder().host(\"san.com\").build()).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 371,
            "endLine": 374,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public skipsOnRedirectWhenHostnameVerifierUsed() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(301).addHeader(\"Location\",url.newBuilder().host(\"san.com\").build()));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 404,
            "endLine": 406,
            "startColumn": 5,
            "endColumn": 75
          },
          "rightSideLocation": {
            "container": "public skipsOnRedirectWhenHostnameVerifierUsed() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(301).addHeader(\"Location\",url.newBuilder().host(\"san.com\").build()).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 408,
            "endLine": 411,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public misdirectedRequestResponseCode() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(421).setBody(\"misdirected!\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 480,
            "endLine": 482,
            "startColumn": 5,
            "endColumn": 35
          },
          "rightSideLocation": {
            "container": "public misdirectedRequestResponseCode() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(421).body(\"misdirected!\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 486,
            "endLine": 489,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public misdirectedRequestResponseCode() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"seed connection\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 478,
            "endLine": 479,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public misdirectedRequestResponseCode() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"seed connection\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 483,
            "endLine": 485,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public misdirectedRequestResponseCode() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"after misdirect\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 483,
            "endLine": 484,
            "startColumn": 5,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "public misdirectedRequestResponseCode() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"after misdirect\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/ConnectionCoalescingTest.java",
            "startLine": 490,
            "endLine": 492,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public testNetscapeResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Set-Cookie: a=android; \" + \"expires=Fri, 31-Dec-9999 23:59:59 GMT; \" + \"path=/path; \"+ \"domain=\" + urlWithIpAddress.host() + \"; \"+ \"secure\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 65,
            "endLine": 69,
            "startColumn": 5,
            "endColumn": 22
          },
          "rightSideLocation": {
            "container": "public testNetscapeResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Set-Cookie: a=android; \" + \"expires=Fri, 31-Dec-9999 23:59:59 GMT; \" + \"path=/path; \"+ \"domain=\" + urlWithIpAddress.host() + \"; \"+ \"secure\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 65,
            "endLine": 71,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public testRfc2109Response() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Set-Cookie: a=android; \" + \"Comment=this cookie is delicious; \" + \"Domain=\" + urlWithIpAddress.host() + \"; \"+ \"Max-Age=60; \"+ \"Path=/path; \"+ \"Secure; \"+ \"Version=1\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 93,
            "endLine": 99,
            "startColumn": 5,
            "endColumn": 25
          },
          "rightSideLocation": {
            "container": "public testRfc2109Response() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Set-Cookie: a=android; \" + \"Comment=this cookie is delicious; \" + \"Domain=\" + urlWithIpAddress.host() + \"; \"+ \"Max-Age=60; \"+ \"Path=/path; \"+ \"Secure; \"+ \"Version=1\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 95,
            "endLine": 103,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public testQuotedAttributeValues() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Set-Cookie: a=\\\"android\\\"; \" + \"Comment=\\\"this cookie is delicious\\\"; \" + \"CommentURL=\\\"http://google.com/\\\"; \"+ \"Discard; \"+ \"Domain=\" + urlWithIpAddress.host() + \"; \"+ \"Max-Age=60; \"+ \"Path=\\\"/path\\\"; \"+ \"Port=\\\"80,443,\"+ server.getPort()+ \"\\\"; \"+ \"Secure; \"+ \"Version=\\\"1\\\"\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 122,
            "endLine": 131,
            "startColumn": 5,
            "endColumn": 29
          },
          "rightSideLocation": {
            "container": "public testQuotedAttributeValues() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Set-Cookie: a=\\\"android\\\"; \" + \"Comment=\\\"this cookie is delicious\\\"; \" + \"CommentURL=\\\"http://google.com/\\\"; \"+ \"Discard; \"+ \"Domain=\" + urlWithIpAddress.host() + \"; \"+ \"Max-Age=60; \"+ \"Path=\\\"/path\\\"; \"+ \"Port=\\\"80,443,\"+ server.getPort()+ \"\\\"; \"+ \"Secure; \"+ \"Version=\\\"1\\\"\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 126,
            "endLine": 137,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public receiveAndSendMultipleCookies() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Set-Cookie\",\"a=android\").addHeader(\"Set-Cookie\",\"b=banana\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 194,
            "endLine": 196,
            "startColumn": 5,
            "endColumn": 47
          },
          "rightSideLocation": {
            "container": "public receiveAndSendMultipleCookies() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Set-Cookie\",\"a=android\").addHeader(\"Set-Cookie\",\"b=banana\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 200,
            "endLine": 203,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public testRedirectsDoNotIncludeTooManyCookies() : void",
            "type": "Statement",
            "name": "redirectTarget.enqueue(new MockResponse().setBody(\"A\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 215,
            "endLine": 215,
            "startColumn": 5,
            "endColumn": 61
          },
          "rightSideLocation": {
            "container": "public testRedirectsDoNotIncludeTooManyCookies() : void",
            "type": "Statement",
            "name": "redirectTarget.enqueue(new MockResponse.Builder().body(\"A\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 222,
            "endLine": 222,
            "startColumn": 5,
            "endColumn": 74
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public testRedirectsDoNotIncludeTooManyCookies() : void",
            "type": "Statement",
            "name": "redirectSource.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).addHeader(\"Location: \" + redirectTargetUrl));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 220,
            "endLine": 222,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public testRedirectsDoNotIncludeTooManyCookies() : void",
            "type": "Statement",
            "name": "redirectSource.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_MOVED_TEMP).addHeader(\"Location: \" + redirectTargetUrl).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CookiesTest.java",
            "startLine": 227,
            "endLine": 230,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public trueDuplexClientWritesFirst() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse().clearHeaders(),new MockDuplexResponseBody().receiveRequest(\"request A\\n\").sendResponse(\"response B\\n\").receiveRequest(\"request C\\n\").sendResponse(\"response D\\n\").receiveRequest(\"request E\\n\").sendResponse(\"response F\\n\").exhaustRequest().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 93,
            "endLine": 104,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public trueDuplexClientWritesFirst() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockDuplexResponseBody().receiveRequest(\"request A\\n\").sendResponse(\"response B\\n\").receiveRequest(\"request C\\n\").sendResponse(\"response D\\n\").receiveRequest(\"request E\\n\").sendResponse(\"response F\\n\").exhaustRequest().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 92,
            "endLine": 103,
            "startColumn": 5,
            "endColumn": 33
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public trueDuplexServerWritesFirst() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse().clearHeaders(),new MockDuplexResponseBody().sendResponse(\"response A\\n\").receiveRequest(\"request B\\n\").sendResponse(\"response C\\n\").receiveRequest(\"request D\\n\").sendResponse(\"response E\\n\").receiveRequest(\"request F\\n\").exhaustResponse().exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 136,
            "endLine": 147,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public trueDuplexServerWritesFirst() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockDuplexResponseBody().sendResponse(\"response A\\n\").receiveRequest(\"request B\\n\").sendResponse(\"response C\\n\").receiveRequest(\"request D\\n\").sendResponse(\"response E\\n\").receiveRequest(\"request F\\n\").exhaustResponse().exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 135,
            "endLine": 146,
            "startColumn": 5,
            "endColumn": 32
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientReadsHeadersDataTrailers() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse().clearHeaders().addHeader(\"h1\",\"v1\").addHeader(\"h2\",\"v2\").setTrailers(Headers.of(\"trailers\",\"boom\")),new MockDuplexResponseBody().sendResponse(\"ok\").exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 179,
            "endLine": 187,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public clientReadsHeadersDataTrailers() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders().addHeader(\"h1\",\"v1\").addHeader(\"h2\",\"v2\").trailers(Headers.of(\"trailers\",\"boom\")),new MockDuplexResponseBody().sendResponse(\"ok\").exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 178,
            "endLine": 186,
            "startColumn": 5,
            "endColumn": 33
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public serverReadsHeadersData() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse().clearHeaders().addHeader(\"h1\",\"v1\").addHeader(\"h2\",\"v2\"),new MockDuplexResponseBody().exhaustResponse().receiveRequest(\"hey\\n\").receiveRequest(\"whats going on\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 209,
            "endLine": 218,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public serverReadsHeadersData() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders().addHeader(\"h1\",\"v1\").addHeader(\"h2\",\"v2\"),new MockDuplexResponseBody().exhaustResponse().receiveRequest(\"hey\\n\").receiveRequest(\"whats going on\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 208,
            "endLine": 217,
            "startColumn": 5,
            "endColumn": 32
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestBodyEndsAfterResponseBody() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse().clearHeaders(),new MockDuplexResponseBody().exhaustResponse().receiveRequest(\"request A\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 238,
            "endLine": 244,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public requestBodyEndsAfterResponseBody() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockDuplexResponseBody().exhaustResponse().receiveRequest(\"request A\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 237,
            "endLine": 243,
            "startColumn": 5,
            "endColumn": 32
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWith100Continue() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse().clearHeaders().add100Continue(),new MockDuplexResponseBody().receiveRequest(\"request body\\n\").sendResponse(\"response body\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 273,
            "endLine": 280,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public duplexWith100Continue() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders().add100Continue(),new MockDuplexResponseBody().receiveRequest(\"request body\\n\").sendResponse(\"response body\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 272,
            "endLine": 279,
            "startColumn": 5,
            "endColumn": 32
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithRedirect() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse().clearHeaders().setResponseCode(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: /b\"),new MockDuplexResponseBody().sendResponse(\"/a has moved!\\n\",duplexResponseSent).requestIOException().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 329,
            "endLine": 337,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public duplexWithRedirect() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders().code(HttpURLConnection.HTTP_MOVED_PERM).addHeader(\"Location: /b\"),new MockDuplexResponseBody().sendResponse(\"/a has moved!\\n\",duplexResponseSent).requestIOException().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 328,
            "endLine": 336,
            "startColumn": 5,
            "endColumn": 33
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithRedirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"this is /b\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 338,
            "endLine": 339,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public duplexWithRedirect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"this is /b\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 337,
            "endLine": 339,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockResponseBody1=enqueueResponseWithBody(new MockResponse().clearHeaders().setResponseCode(HttpURLConnection.HTTP_UNAUTHORIZED),new MockDuplexResponseBody().sendResponse(\"please authenticate!\\n\").requestIOException().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 383,
            "endLine": 390,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockResponseBody1=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders().code(HttpURLConnection.HTTP_UNAUTHORIZED),new MockDuplexResponseBody().sendResponse(\"please authenticate!\\n\").requestIOException().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 383,
            "endLine": 390,
            "startColumn": 5,
            "endColumn": 33
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockResponseBody2=enqueueResponseWithBody(new MockResponse().clearHeaders(),new MockDuplexResponseBody().sendResponse(\"response body\\n\").exhaustResponse().receiveRequest(\"request body\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 391,
            "endLine": 398,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public duplexWithAuthChallenge() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockResponseBody2=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockDuplexResponseBody().sendResponse(\"response body\\n\").exhaustResponse().receiveRequest(\"request body\\n\").exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 391,
            "endLine": 398,
            "startColumn": 5,
            "endColumn": 32
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public fullCallTimeoutAppliesToSetup() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeadersDelay(500,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 434,
            "endLine": 435,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public fullCallTimeoutAppliesToSetup() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().headersDelay(500,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 434,
            "endLine": 436,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public fullCallTimeoutDoesNotApplyOnceConnected() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse().clearHeaders(),new MockDuplexResponseBody().sendResponse(\"response A\\n\").sleep(750,TimeUnit.MILLISECONDS).sendResponse(\"response B\\n\").receiveRequest(\"request C\\n\").exhaustResponse().exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 456,
            "endLine": 465,
            "startColumn": 5,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "public fullCallTimeoutDoesNotApplyOnceConnected() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockDuplexResponseBody().sendResponse(\"response A\\n\").sleep(750,TimeUnit.MILLISECONDS).sendResponse(\"response B\\n\").receiveRequest(\"request C\\n\").exhaustResponse().exhaustRequest());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 457,
            "endLine": 466,
            "startColumn": 5,
            "endColumn": 32
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public duplexWithRewriteInterceptors() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse().clearHeaders(),new MockDuplexResponseBody().receiveRequest(\"REQUEST A\\n\").sendResponse(\"response B\\n\").exhaustRequest().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 492,
            "endLine": 499,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public duplexWithRewriteInterceptors() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockDuplexResponseBody().receiveRequest(\"REQUEST A\\n\").sendResponse(\"response B\\n\").exhaustRequest().exhaustResponse());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 493,
            "endLine": 500,
            "startColumn": 5,
            "endColumn": 33
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public serverCancelsRequestBodyAndSendsResponseBody() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse().clearHeaders(),new MockDuplexResponseBody().sendResponse(\"success!\").exhaustResponse().cancelStream(ErrorCode.NO_ERROR));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 543,
            "endLine": 549,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public serverCancelsRequestBodyAndSendsResponseBody() : void",
            "type": "Statement",
            "name": "MockDuplexResponseBody mockDuplexResponseBody=enqueueResponseWithBody(new MockResponse.Builder().clearHeaders(),new MockDuplexResponseBody().sendResponse(\"success!\").exhaustResponse().cancelStream(ErrorCode.NO_ERROR));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 544,
            "endLine": 550,
            "startColumn": 5,
            "endColumn": 48
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public headersReadTimeoutDoesNotStartUntilLastRequestBodyByteFire() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeadersDelay(1500,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 591,
            "endLine": 592,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "container": "public headersReadTimeoutDoesNotStartUntilLastRequestBodyByteFire() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().headersDelay(1500,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 592,
            "endLine": 594,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public bodyReadTimeoutDoesNotStartUntilLastRequestBodyByteFire() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBodyDelay(1500,TimeUnit.MILLISECONDS).setBody(\"this should never be received\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 616,
            "endLine": 618,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "public bodyReadTimeoutDoesNotStartUntilLastRequestBodyByteFire() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().bodyDelay(1500,TimeUnit.MILLISECONDS).body(\"this should never be received\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 618,
            "endLine": 621,
            "startColumn": 5,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public headersReadTimeoutDoesNotStartUntilLastRequestBodyByteNoFire() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeadersDelay(500,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 646,
            "endLine": 647,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public headersReadTimeoutDoesNotStartUntilLastRequestBodyByteNoFire() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().headersDelay(500,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 649,
            "endLine": 651,
            "startColumn": 5,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public bodyReadTimeoutDoesNotStartUntilLastRequestBodyByteNoFire() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBodyDelay(500,TimeUnit.MILLISECONDS).setBody(\"success\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 670,
            "endLine": 672,
            "startColumn": 5,
            "endColumn": 28
          },
          "rightSideLocation": {
            "container": "public bodyReadTimeoutDoesNotStartUntilLastRequestBodyByteNoFire() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().bodyDelay(500,TimeUnit.MILLISECONDS).body(\"success\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 674,
            "endLine": 677,
            "startColumn": 5,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public successfulCallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 123,
            "endLine": 124,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public successfulCallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 123,
            "endLine": 125,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public successfulCallEventSequenceForIpAddress() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 142,
            "endLine": 143,
            "startColumn": 5,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "public successfulCallEventSequenceForIpAddress() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 143,
            "endLine": 145,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public successfulCallEventSequenceForEnqueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 163,
            "endLine": 164,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public successfulCallEventSequenceForEnqueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 165,
            "endLine": 167,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public failedCallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeadersDelay(2,TimeUnit.SECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 194,
            "endLine": 195,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public failedCallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().headersDelay(2,TimeUnit.SECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 197,
            "endLine": 199,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public failedDribbledCallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"0123456789\").throttleBody(2,100,TimeUnit.MILLISECONDS).setSocketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 218,
            "endLine": 220,
            "startColumn": 5,
            "endColumn": 73
          },
          "rightSideLocation": {
            "container": "public failedDribbledCallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"0123456789\").throttleBody(2,100,TimeUnit.MILLISECONDS).socketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 222,
            "endLine": 226,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cancelAsyncCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 265,
            "endLine": 266,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public cancelAsyncCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 271,
            "endLine": 273,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public multipleCancelsEmitsOnlyOneEvent() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 285,
            "endLine": 286,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public multipleCancelsEmitsOnlyOneEvent() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 292,
            "endLine": 294,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public successfulEmptyHttpsCallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 412,
            "endLine": 413,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public successfulEmptyHttpsCallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 420,
            "endLine": 422,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public successfulChunkedHttpsCallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBodyDelay(100,TimeUnit.MILLISECONDS).setChunkedBody(\"Hello!\",2));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 424,
            "endLine": 425,
            "startColumn": 5,
            "endColumn": 98
          },
          "rightSideLocation": {
            "container": "public successfulChunkedHttpsCallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().bodyDelay(100,TimeUnit.MILLISECONDS).chunkedBody(\"Hello!\",2).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 433,
            "endLine": 436,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public successfulChunkedH2CallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBodyDelay(100,TimeUnit.MILLISECONDS).setChunkedBody(\"Hello!\",2));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 436,
            "endLine": 437,
            "startColumn": 5,
            "endColumn": 98
          },
          "rightSideLocation": {
            "container": "public successfulChunkedH2CallEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().bodyDelay(100,TimeUnit.MILLISECONDS).chunkedBody(\"Hello!\",2).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 447,
            "endLine": 450,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public multipleDnsLookupsForSingleCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(301).setHeader(\"Location\",\"http://www.fakeurl:\" + server.getPort()));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 492,
            "endLine": 494,
            "startColumn": 5,
            "endColumn": 75
          },
          "rightSideLocation": {
            "container": "public multipleDnsLookupsForSingleCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(301).setHeader(\"Location\",\"http://www.fakeurl:\" + server.getPort()).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 505,
            "endLine": 508,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public failedConnect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 586,
            "endLine": 587,
            "startColumn": 5,
            "endColumn": 56
          },
          "rightSideLocation": {
            "container": "public failedConnect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.FAIL_HANDSHAKE).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 600,
            "endLine": 602,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public multipleConnectsForSingleCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 615,
            "endLine": 616,
            "startColumn": 5,
            "endColumn": 56
          },
          "rightSideLocation": {
            "container": "public multipleConnectsForSingleCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.FAIL_HANDSHAKE).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 630,
            "endLine": 632,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public authenticatingTunnelProxyConnect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().inTunnel().setResponseCode(407).addHeader(\"Proxy-Authenticate: Basic realm=\\\"localhost\\\"\").addHeader(\"Connection: close\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 698,
            "endLine": 702,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "container": "public authenticatingTunnelProxyConnect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().inTunnel().code(407).addHeader(\"Proxy-Authenticate: Basic realm=\\\"localhost\\\"\").addHeader(\"Connection: close\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 714,
            "endLine": 719,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public authenticatingTunnelProxyConnect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().inTunnel());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 703,
            "endLine": 704,
            "startColumn": 5,
            "endColumn": 22
          },
          "rightSideLocation": {
            "container": "public authenticatingTunnelProxyConnect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().inTunnel().build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 720,
            "endLine": 722,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public failedSecureConnect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 749,
            "endLine": 750,
            "startColumn": 5,
            "endColumn": 56
          },
          "rightSideLocation": {
            "container": "public failedSecureConnect() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.FAIL_HANDSHAKE).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 767,
            "endLine": 769,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public secureConnectWithTunnel() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().inTunnel());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 771,
            "endLine": 772,
            "startColumn": 5,
            "endColumn": 22
          },
          "rightSideLocation": {
            "container": "public secureConnectWithTunnel() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().inTunnel().build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 790,
            "endLine": 792,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public multipleSecureConnectsForSingleCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 796,
            "endLine": 797,
            "startColumn": 5,
            "endColumn": 56
          },
          "rightSideLocation": {
            "container": "public multipleSecureConnectsForSingleCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.FAIL_HANDSHAKE).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 816,
            "endLine": 818,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public noConnectionFoundOnFollowUp() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(301).addHeader(\"Location\",\"/foo\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 865,
            "endLine": 867,
            "startColumn": 5,
            "endColumn": 41
          },
          "rightSideLocation": {
            "container": "public noConnectionFoundOnFollowUp() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(301).addHeader(\"Location\",\"/foo\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 886,
            "endLine": 889,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public noConnectionFoundOnFollowUp() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"ABC\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 868,
            "endLine": 869,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public noConnectionFoundOnFollowUp() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"ABC\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 890,
            "endLine": 892,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public multipleConnectionsFoundForSingleCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(301).addHeader(\"Location\",\"/foo\").addHeader(\"Connection\",\"Close\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 911,
            "endLine": 914,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "container": "public multipleConnectionsFoundForSingleCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(301).addHeader(\"Location\",\"/foo\").addHeader(\"Connection\",\"Close\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 934,
            "endLine": 938,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public multipleConnectionsFoundForSingleCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"ABC\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 915,
            "endLine": 916,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public multipleConnectionsFoundForSingleCall() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"ABC\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 939,
            "endLine": 941,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private responseBodyFail(expectedProtocol Protocol) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(new Buffer().write(new byte[responseBodySize])).setSocketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 949,
            "endLine": 951,
            "startColumn": 5,
            "endColumn": 73
          },
          "rightSideLocation": {
            "container": "private responseBodyFail(expectedProtocol Protocol) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(new Buffer().write(new byte[responseBodySize])).socketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 974,
            "endLine": 977,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public emptyResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"\").setBodyDelay(1,TimeUnit.SECONDS).setSocketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 973,
            "endLine": 976,
            "startColumn": 5,
            "endColumn": 73
          },
          "rightSideLocation": {
            "container": "public emptyResponseBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"\").bodyDelay(1,TimeUnit.SECONDS).socketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 999,
            "endLine": 1003,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public emptyResponseBodyConnectionClose() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Connection\",\"close\").setBody(\"\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 992,
            "endLine": 994,
            "startColumn": 5,
            "endColumn": 23
          },
          "rightSideLocation": {
            "container": "public emptyResponseBodyConnectionClose() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Connection\",\"close\").body(\"\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1019,
            "endLine": 1022,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public responseBodyClosedClosedWithoutReadingAllData() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\").setBodyDelay(1,TimeUnit.SECONDS).setSocketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1010,
            "endLine": 1013,
            "startColumn": 5,
            "endColumn": 73
          },
          "rightSideLocation": {
            "container": "public responseBodyClosedClosedWithoutReadingAllData() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").bodyDelay(1,TimeUnit.SECONDS).socketPolicy(SocketPolicy.DISCONNECT_DURING_RESPONSE_BODY).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1038,
            "endLine": 1042,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private requestBodyFail(expectedProtocol Protocol) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_DURING_REQUEST_BODY));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1049,
            "endLine": 1050,
            "startColumn": 5,
            "endColumn": 72
          },
          "rightSideLocation": {
            "container": "private requestBodyFail(expectedProtocol Protocol) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.DISCONNECT_DURING_REQUEST_BODY).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1078,
            "endLine": 1080,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public requestBodyMultipleFailuresReportedOnlyOnce() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_DURING_REQUEST_BODY));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1130,
            "endLine": 1131,
            "startColumn": 5,
            "endColumn": 72
          },
          "rightSideLocation": {
            "container": "public requestBodyMultipleFailuresReportedOnlyOnce() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.DISCONNECT_DURING_REQUEST_BODY).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1160,
            "endLine": 1162,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public successfulCallEventSequenceWithListener() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1191,
            "endLine": 1191,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public successfulCallEventSequenceWithListener() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1222,
            "endLine": 1224,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private requestBodySuccess(body RequestBody, requestBodyBytes Matcher<Long>, responseHeaderLength Matcher<Long>) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(200).setBody(\"World!\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1214,
            "endLine": 1216,
            "startColumn": 5,
            "endColumn": 29
          },
          "rightSideLocation": {
            "container": "private requestBodySuccess(body RequestBody, requestBodyBytes Matcher<Long>, responseHeaderLength Matcher<Long>) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(200).body(\"World!\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1247,
            "endLine": 1250,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private timeToFirstByte() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeadersDelay(responseHeadersStartDelay,TimeUnit.MILLISECONDS).setBodyDelay(responseBodyStartDelay,TimeUnit.MILLISECONDS).throttleBody(5,responseBodyEndDelay,TimeUnit.MILLISECONDS).setBody(\"fghijk\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1310,
            "endLine": 1314,
            "startColumn": 5,
            "endColumn": 29
          },
          "rightSideLocation": {
            "container": "private timeToFirstByte() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().headersDelay(responseHeadersStartDelay,TimeUnit.MILLISECONDS).bodyDelay(responseBodyStartDelay,TimeUnit.MILLISECONDS).throttleBody(5,responseBodyEndDelay,TimeUnit.MILLISECONDS).body(\"fghijk\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1344,
            "endLine": 1349,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public redirectUsingSameConnectionEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).addHeader(\"Location: /foo\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1346,
            "endLine": 1348,
            "startColumn": 5,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "public redirectUsingSameConnectionEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_MOVED_TEMP).addHeader(\"Location: /foo\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1381,
            "endLine": 1384,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public redirectUsingNewConnectionEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).addHeader(\"Location: \" + otherServer.url(\"/foo\")));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1366,
            "endLine": 1369,
            "startColumn": 5,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public redirectUsingNewConnectionEventSequence() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_MOVED_TEMP).addHeader(\"Location: \" + otherServer.url(\"/foo\")).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1402,
            "endLine": 1406,
            "startColumn": 5,
            "endColumn": 23
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public applicationInterceptorProceedsMultipleTimes() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"b\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1388,
            "endLine": 1388,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public applicationInterceptorProceedsMultipleTimes() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"b\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1425,
            "endLine": 1425,
            "startColumn": 5,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public applicationInterceptorProceedsMultipleTimes() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1387,
            "endLine": 1387,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public applicationInterceptorProceedsMultipleTimes() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1424,
            "endLine": 1424,
            "startColumn": 5,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public expectContinueStartsResponseHeadersEarly() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().add100Continue());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1435,
            "endLine": 1436,
            "startColumn": 5,
            "endColumn": 28
          },
          "rightSideLocation": {
            "container": "public expectContinueStartsResponseHeadersEarly() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().add100Continue().build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1472,
            "endLine": 1474,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public timeToFirstByteGapBetweenResponseHeaderStartAndEnd() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().add100Continue().setHeadersDelay(responseHeadersStartDelay,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1456,
            "endLine": 1458,
            "startColumn": 5,
            "endColumn": 77
          },
          "rightSideLocation": {
            "container": "public timeToFirstByteGapBetweenResponseHeaderStartAndEnd() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().add100Continue().headersDelay(responseHeadersStartDelay,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1494,
            "endLine": 1497,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1480,
            "endLine": 1481,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public cacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1519,
            "endLine": 1521,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1504,
            "endLine": 1505,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public conditionalCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_MODIFIED).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1545,
            "endLine": 1547,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"ETag: v1\").setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1501,
            "endLine": 1503,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public conditionalCache() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"ETag\",\"v1\").body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1541,
            "endLine": 1544,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalCacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"ETag: v1\").setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1533,
            "endLine": 1535,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public conditionalCacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"ETag: v1\").body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1575,
            "endLine": 1578,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public conditionalCacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_OK).addHeader(\"ETag: v2\").setBody(\"abd\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1536,
            "endLine": 1539,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public conditionalCacheMiss() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_OK).addHeader(\"ETag: v2\").body(\"abd\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1579,
            "endLine": 1583,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cacheHit() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\").addHeader(\"cache-control: public, max-age=300\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1581,
            "endLine": 1581,
            "startColumn": 5,
            "endColumn": 103
          },
          "rightSideLocation": {
            "container": "public cacheHit() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").addHeader(\"cache-control: public, max-age=300\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/EventListenerTest.java",
            "startLine": 1625,
            "endLine": 1628,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public networkInterceptorsCannotShortCircuitResponses() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(500));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 5,
            "endColumn": 61
          },
          "rightSideLocation": {
            "container": "public networkInterceptorsCannotShortCircuitResponses() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(500).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 89,
            "endLine": 91,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public networkInterceptorsCannotChangeServerAddress() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(500));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 5,
            "endColumn": 61
          },
          "rightSideLocation": {
            "container": "public networkInterceptorsCannotChangeServerAddress() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(500).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 143,
            "endLine": 145,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public networkInterceptorsObserveNetworkHeaders() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(gzip(\"abcabcabc\")).addHeader(\"Content-Encoding: gzip\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 187,
            "endLine": 189,
            "startColumn": 5,
            "endColumn": 47
          },
          "rightSideLocation": {
            "container": "public networkInterceptorsObserveNetworkHeaders() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(gzip(\"abcabcabc\")).addHeader(\"Content-Encoding: gzip\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 191,
            "endLine": 194,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private rewriteResponseFromServer(network boolean) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().addHeader(\"Original-Header: foo\").setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 295,
            "endLine": 297,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "private rewriteResponseFromServer(network boolean) : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().addHeader(\"Original-Header: foo\").body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 300,
            "endLine": 303,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public applicationInterceptorsCanMakeMultipleRequestsToServer() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"b\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 389,
            "endLine": 389,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public applicationInterceptorsCanMakeMultipleRequestsToServer() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"b\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 395,
            "endLine": 395,
            "startColumn": 5,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public applicationInterceptorsCanMakeMultipleRequestsToServer() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 388,
            "endLine": 388,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public applicationInterceptorsCanMakeMultipleRequestsToServer() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 394,
            "endLine": 394,
            "startColumn": 5,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public interceptorMakesAnUnrelatedRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"b\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 410,
            "endLine": 410,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public interceptorMakesAnUnrelatedRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"b\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 416,
            "endLine": 416,
            "startColumn": 5,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public interceptorMakesAnUnrelatedRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 409,
            "endLine": 409,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public interceptorMakesAnUnrelatedRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 415,
            "endLine": 415,
            "startColumn": 5,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public interceptorMakesAnUnrelatedAsyncRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"b\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 436,
            "endLine": 436,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public interceptorMakesAnUnrelatedAsyncRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"b\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 442,
            "endLine": 442,
            "startColumn": 5,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public interceptorMakesAnUnrelatedAsyncRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"a\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 435,
            "endLine": 435,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public interceptorMakesAnUnrelatedAsyncRequest() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"a\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 441,
            "endLine": 441,
            "startColumn": 5,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public networkInterceptorReturnsConnectionOnEmptyBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_END).addHeader(\"Connection\",\"Close\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 615,
            "endLine": 617,
            "startColumn": 5,
            "endColumn": 44
          },
          "rightSideLocation": {
            "container": "public networkInterceptorReturnsConnectionOnEmptyBody() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.DISCONNECT_AT_END).addHeader(\"Connection\",\"Close\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 621,
            "endLine": 624,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public chainWithReadTimeout() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\").throttleBody(1,1,TimeUnit.SECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 703,
            "endLine": 705,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public chainWithReadTimeout() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").throttleBody(1,1,TimeUnit.SECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 710,
            "endLine": 713,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public chainWithWriteTimeout() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\").throttleBody(1,1,TimeUnit.SECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 783,
            "endLine": 785,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public chainWithWriteTimeout() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").throttleBody(1,1,TimeUnit.SECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/InterceptorTest.java",
            "startLine": 791,
            "endLine": 794,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public proxy() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"def\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public proxy() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"def\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 5,
            "endColumn": 68
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public proxy() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public proxy() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 5,
            "endColumn": 68
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public proxySelector() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 72,
            "endLine": 72,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public proxySelector() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 72,
            "endLine": 72,
            "startColumn": 5,
            "endColumn": 68
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public checkRemoteDNSResolve() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public checkRemoteDNSResolve() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/SocksProxyTest.java",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 5,
            "endColumn": 68
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public timeoutProcessing() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeadersDelay(500,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 125,
            "endLine": 126,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public timeoutProcessing() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().headersDelay(500,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 125,
            "endLine": 127,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public timeoutProcessingWithEnqueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeadersDelay(500,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 144,
            "endLine": 145,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public timeoutProcessingWithEnqueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().headersDelay(500,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 145,
            "endLine": 147,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public timeoutReadingResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(BIG_ENOUGH_BODY));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 174,
            "endLine": 175,
            "startColumn": 5,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "public timeoutReadingResponse() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(BIG_ENOUGH_BODY).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 176,
            "endLine": 178,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public timeoutReadingResponseWithEnqueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(BIG_ENOUGH_BODY));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 195,
            "endLine": 196,
            "startColumn": 5,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "public timeoutReadingResponseWithEnqueue() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(BIG_ENOUGH_BODY).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 198,
            "endLine": 200,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public singleTimeoutForAllFollowUpRequests() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",\"/f\").setHeadersDelay(100,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 251,
            "endLine": 254,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public singleTimeoutForAllFollowUpRequests() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",\"/f\").headersDelay(100,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 259,
            "endLine": 263,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public singleTimeoutForAllFollowUpRequests() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",\"/e\").setHeadersDelay(100,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 247,
            "endLine": 250,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public singleTimeoutForAllFollowUpRequests() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",\"/e\").headersDelay(100,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 254,
            "endLine": 258,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public singleTimeoutForAllFollowUpRequests() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",\"/c\").setHeadersDelay(100,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 239,
            "endLine": 242,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public singleTimeoutForAllFollowUpRequests() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",\"/c\").headersDelay(100,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 244,
            "endLine": 248,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public singleTimeoutForAllFollowUpRequests() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",\"/d\").setHeadersDelay(100,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 243,
            "endLine": 246,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public singleTimeoutForAllFollowUpRequests() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",\"/d\").headersDelay(100,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 249,
            "endLine": 253,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public singleTimeoutForAllFollowUpRequests() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",\"/b\").setHeadersDelay(100,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 235,
            "endLine": 238,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public singleTimeoutForAllFollowUpRequests() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",\"/b\").headersDelay(100,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 239,
            "endLine": 243,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public timeoutFollowingRedirectOnNewConnection() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",otherServer.url(\"/\")));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 276,
            "endLine": 279,
            "startColumn": 5,
            "endColumn": 59
          },
          "rightSideLocation": {
            "container": "public timeoutFollowingRedirectOnNewConnection() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_MOVED_TEMP).setHeader(\"Location\",otherServer.url(\"/\")).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 285,
            "endLine": 288,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public timeoutFollowingRedirectOnNewConnection() : void",
            "type": "Statement",
            "name": "otherServer.enqueue(new MockResponse().setHeadersDelay(500,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 281,
            "endLine": 281,
            "startColumn": 5,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "public timeoutFollowingRedirectOnNewConnection() : void",
            "type": "Statement",
            "name": "otherServer.enqueue(new MockResponse.Builder().headersDelay(500,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 290,
            "endLine": 292,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public noTimeout() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setHeadersDelay(250,TimeUnit.MILLISECONDS).setBody(BIG_ENOUGH_BODY));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 300,
            "endLine": 302,
            "startColumn": 5,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "public noTimeout() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().headersDelay(250,TimeUnit.MILLISECONDS).body(BIG_ENOUGH_BODY).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/WholeOperationTimeoutTest.java",
            "startLine": 311,
            "endLine": 314,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public pinRootNotPresentInChain() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 104,
            "endLine": 105,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public pinRootNotPresentInChain() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 104,
            "endLine": 106,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public pinIntermediatePresentInChain() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\").setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 152,
            "endLine": 154,
            "startColumn": 5,
            "endColumn": 59
          },
          "rightSideLocation": {
            "container": "public pinIntermediatePresentInChain() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").socketPolicy(SocketPolicy.DISCONNECT_AT_END).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 153,
            "endLine": 156,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public pinIntermediatePresentInChain() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"def\").setSocketPolicy(SocketPolicy.DISCONNECT_AT_END));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 166,
            "endLine": 168,
            "startColumn": 5,
            "endColumn": 59
          },
          "rightSideLocation": {
            "container": "public pinIntermediatePresentInChain() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"def\").socketPolicy(SocketPolicy.DISCONNECT_AT_END).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 168,
            "endLine": 171,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public unrelatedPinnedLeafCertificateInChain() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\").addHeader(\"Content-Type: text/plain\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 236,
            "endLine": 238,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "container": "public unrelatedPinnedLeafCertificateInChain() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").addHeader(\"Content-Type: text/plain\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 239,
            "endLine": 242,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public unrelatedPinnedIntermediateCertificateInChain() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\").addHeader(\"Content-Type: text/plain\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 315,
            "endLine": 317,
            "startColumn": 5,
            "endColumn": 49
          },
          "rightSideLocation": {
            "container": "public unrelatedPinnedIntermediateCertificateInChain() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").addHeader(\"Content-Type: text/plain\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 319,
            "endLine": 322,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public lonePinnedCertificate() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 598,
            "endLine": 599,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public lonePinnedCertificate() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/CertificatePinnerChainValidationTest.java",
            "startLine": 603,
            "endLine": 605,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientAuthForWants() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public clientAuthForWants() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 133,
            "endLine": 135,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientAuthForNeeds() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public clientAuthForNeeds() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 153,
            "endLine": 155,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientAuthSkippedForNone() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 169,
            "endLine": 169,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public clientAuthSkippedForNone() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 173,
            "endLine": 175,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public missingClientAuthSkippedForWantsOnly() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 186,
            "endLine": 186,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public missingClientAuthSkippedForWantsOnly() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 192,
            "endLine": 194,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public invalidClientAuthEvents() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse().setBody(\"abc\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 285,
            "endLine": 285,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public invalidClientAuthEvents() : void",
            "type": "Statement",
            "name": "server.enqueue(new MockResponse.Builder().body(\"abc\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/tls/ClientAuthTest.java",
            "startLine": 293,
            "endLine": 295,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public textMessage() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public textMessage() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 109,
            "endLine": 111,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public binaryMessage() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public binaryMessage() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 124,
            "endLine": 126,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public nullStringThrows() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public nullStringThrows() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 139,
            "endLine": 141,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public nullByteStringThrows() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 152,
            "endLine": 152,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public nullByteStringThrows() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 158,
            "endLine": 160,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public serverMessage() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 167,
            "endLine": 167,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public serverMessage() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 175,
            "endLine": 177,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public throwingOnOpenFailsImmediately() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public throwingOnOpenFailsImmediately() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 190,
            "endLine": 192,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public throwingOnFailLogs() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setResponseCode(200).setBody(\"Body\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 198,
            "endLine": 198,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public throwingOnFailLogs() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().code(200).body(\"Body\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 210,
            "endLine": 213,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public throwingOnMessageClosesImmediatelyAndFails() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 213,
            "endLine": 213,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public throwingOnMessageClosesImmediatelyAndFails() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 228,
            "endLine": 230,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public throwingOnClosingClosesImmediatelyAndFails() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 233,
            "endLine": 233,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public throwingOnClosingClosesImmediatelyAndFails() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 250,
            "endLine": 252,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public unplannedCloseHandledByCloseWithoutFailure() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 253,
            "endLine": 253,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public unplannedCloseHandledByCloseWithoutFailure() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 272,
            "endLine": 274,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public unplannedCloseHandledWithoutFailure() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 273,
            "endLine": 273,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public unplannedCloseHandledWithoutFailure() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 294,
            "endLine": 296,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public non101RetainsBody() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setResponseCode(200).setBody(\"Body\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 283,
            "endLine": 283,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public non101RetainsBody() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().code(200).body(\"Body\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 306,
            "endLine": 309,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public notFound() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setStatus(\"HTTP/1.1 404 Not Found\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 291,
            "endLine": 291,
            "startColumn": 5,
            "endColumn": 79
          },
          "rightSideLocation": {
            "container": "public notFound() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().status(\"HTTP/1.1 404 Not Found\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 317,
            "endLine": 319,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientTimeoutClosesBody() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setResponseCode(408));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 299,
            "endLine": 299,
            "startColumn": 5,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public clientTimeoutClosesBody() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().code(408).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 327,
            "endLine": 329,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientTimeoutClosesBody() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 300,
            "endLine": 300,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public clientTimeoutClosesBody() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 330,
            "endLine": 332,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public missingConnectionHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setResponseCode(101).setHeader(\"Upgrade\",\"websocket\").setHeader(\"Sec-WebSocket-Accept\",\"ujmZX4KXZqjwy6vi1aQFH5p4Ygk=\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 316,
            "endLine": 319,
            "startColumn": 5,
            "endColumn": 77
          },
          "rightSideLocation": {
            "container": "public missingConnectionHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().code(101).setHeader(\"Upgrade\",\"websocket\").setHeader(\"Sec-WebSocket-Accept\",\"ujmZX4KXZqjwy6vi1aQFH5p4Ygk=\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 348,
            "endLine": 352,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public wrongConnectionHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setResponseCode(101).setHeader(\"Upgrade\",\"websocket\").setHeader(\"Connection\",\"Downgrade\").setHeader(\"Sec-WebSocket-Accept\",\"ujmZX4KXZqjwy6vi1aQFH5p4Ygk=\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 327,
            "endLine": 331,
            "startColumn": 5,
            "endColumn": 77
          },
          "rightSideLocation": {
            "container": "public wrongConnectionHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().code(101).setHeader(\"Upgrade\",\"websocket\").setHeader(\"Connection\",\"Downgrade\").setHeader(\"Sec-WebSocket-Accept\",\"ujmZX4KXZqjwy6vi1aQFH5p4Ygk=\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 360,
            "endLine": 365,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public missingUpgradeHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setResponseCode(101).setHeader(\"Connection\",\"Upgrade\").setHeader(\"Sec-WebSocket-Accept\",\"ujmZX4KXZqjwy6vi1aQFH5p4Ygk=\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 339,
            "endLine": 342,
            "startColumn": 5,
            "endColumn": 77
          },
          "rightSideLocation": {
            "container": "public missingUpgradeHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().code(101).setHeader(\"Connection\",\"Upgrade\").setHeader(\"Sec-WebSocket-Accept\",\"ujmZX4KXZqjwy6vi1aQFH5p4Ygk=\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 373,
            "endLine": 377,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public wrongUpgradeHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setResponseCode(101).setHeader(\"Connection\",\"Upgrade\").setHeader(\"Upgrade\",\"Pepsi\").setHeader(\"Sec-WebSocket-Accept\",\"ujmZX4KXZqjwy6vi1aQFH5p4Ygk=\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 350,
            "endLine": 354,
            "startColumn": 5,
            "endColumn": 77
          },
          "rightSideLocation": {
            "container": "public wrongUpgradeHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().code(101).setHeader(\"Connection\",\"Upgrade\").setHeader(\"Upgrade\",\"Pepsi\").setHeader(\"Sec-WebSocket-Accept\",\"ujmZX4KXZqjwy6vi1aQFH5p4Ygk=\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 385,
            "endLine": 390,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public missingMagicHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setResponseCode(101).setHeader(\"Connection\",\"Upgrade\").setHeader(\"Upgrade\",\"websocket\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 362,
            "endLine": 365,
            "startColumn": 5,
            "endColumn": 45
          },
          "rightSideLocation": {
            "container": "public missingMagicHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().code(101).setHeader(\"Connection\",\"Upgrade\").setHeader(\"Upgrade\",\"websocket\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 398,
            "endLine": 402,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public wrongMagicHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setResponseCode(101).setHeader(\"Connection\",\"Upgrade\").setHeader(\"Upgrade\",\"websocket\").setHeader(\"Sec-WebSocket-Accept\",\"magic\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 373,
            "endLine": 377,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "container": "public wrongMagicHeader() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().code(101).setHeader(\"Connection\",\"Upgrade\").setHeader(\"Upgrade\",\"websocket\").setHeader(\"Sec-WebSocket-Accept\",\"magic\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 410,
            "endLine": 415,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public webSocketAndApplicationInterceptors() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 409,
            "endLine": 409,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public webSocketAndApplicationInterceptors() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 447,
            "endLine": 449,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public webSocketAndNetworkInterceptors() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 425,
            "endLine": 425,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public webSocketAndNetworkInterceptors() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 465,
            "endLine": 467,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public overflowOutgoingQueue() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 435,
            "endLine": 435,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public overflowOutgoingQueue() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 477,
            "endLine": 479,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public closeReasonMaximumLength() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 469,
            "endLine": 469,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public closeReasonMaximumLength() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 513,
            "endLine": 515,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public closeReasonTooLong() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 489,
            "endLine": 489,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public closeReasonTooLong() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 535,
            "endLine": 537,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public readTimeoutAppliesToHttpRequest() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.NO_RESPONSE));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 546,
            "endLine": 547,
            "startColumn": 5,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "public readTimeoutAppliesToHttpRequest() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().socketPolicy(SocketPolicy.NO_RESPONSE).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 594,
            "endLine": 596,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public readTimeoutAppliesWithinFrames() : void",
            "type": "Statement",
            "name": "webServer.setDispatcher(new Dispatcher(){\n  @Override public MockResponse dispatch(  RecordedRequest request){\n    return upgradeResponse(request).setBody(new Buffer().write(ByteString.decodeHex(\"81\"))).removeHeader(\"Content-Length\").setSocketPolicy(SocketPolicy.KEEP_OPEN);\n  }\n}\n);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 561,
            "endLine": 568,
            "startColumn": 5,
            "endColumn": 8
          },
          "rightSideLocation": {
            "container": "public readTimeoutAppliesWithinFrames() : void",
            "type": "Statement",
            "name": "webServer.setDispatcher(new Dispatcher(){\n  @Override public MockResponse dispatch(  RecordedRequest request){\n    return upgradeResponse(request).body(new Buffer().write(ByteString.decodeHex(\"81\"))).removeHeader(\"Content-Length\").socketPolicy(SocketPolicy.KEEP_OPEN).build();\n  }\n}\n);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 610,
            "endLine": 618,
            "startColumn": 5,
            "endColumn": 8
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public readTimeoutAppliesWithinFrames() : void",
            "type": "Statement",
            "name": "return upgradeResponse(request).setBody(new Buffer().write(ByteString.decodeHex(\"81\"))).removeHeader(\"Content-Length\").setSocketPolicy(SocketPolicy.KEEP_OPEN);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 563,
            "endLine": 566,
            "startColumn": 9,
            "endColumn": 54
          },
          "rightSideLocation": {
            "container": "public readTimeoutAppliesWithinFrames() : void",
            "type": "Statement",
            "name": "return upgradeResponse(request).body(new Buffer().write(ByteString.decodeHex(\"81\"))).removeHeader(\"Content-Length\").socketPolicy(SocketPolicy.KEEP_OPEN).build();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 612,
            "endLine": 616,
            "startColumn": 9,
            "endColumn": 22
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public readTimeoutDoesNotApplyAcrossFrames() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 578,
            "endLine": 578,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public readTimeoutDoesNotApplyAcrossFrames() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 628,
            "endLine": 630,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientPingsServerOnInterval() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 598,
            "endLine": 598,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public clientPingsServerOnInterval() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 650,
            "endLine": 652,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientDoesNotPingServerByDefault() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 626,
            "endLine": 626,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public clientDoesNotPingServerByDefault() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 680,
            "endLine": 682,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public unacknowledgedPingFailsConnection() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(new WebSocketListener(){\n  @Override public void onOpen(  WebSocket webSocket,  Response response){\n    try {\n      latch.await();\n    }\n catch (    InterruptedException e) {\n      throw new AssertionError(e);\n    }\n  }\n}\n));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 659,
            "endLine": 667,
            "startColumn": 5,
            "endColumn": 9
          },
          "rightSideLocation": {
            "container": "public unacknowledgedPingFailsConnection() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(new WebSocketListener(){\n  @Override public void onOpen(  WebSocket webSocket,  Response response){\n    try {\n      latch.await();\n    }\n catch (    InterruptedException e) {\n      throw new AssertionError(e);\n    }\n  }\n}\n).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 715,
            "endLine": 725,
            "startColumn": 5,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public clientCancelsIfCloseIsNotAcknowledged() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 683,
            "endLine": 683,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public clientCancelsIfCloseIsNotAcknowledged() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 741,
            "endLine": 743,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public webSocketsDontTriggerEventListener() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 712,
            "endLine": 712,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public webSocketsDontTriggerEventListener() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 772,
            "endLine": 774,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public callTimeoutAppliesToSetup() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setHeadersDelay(500,TimeUnit.MILLISECONDS));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 733,
            "endLine": 734,
            "startColumn": 5,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "public callTimeoutAppliesToSetup() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().headersDelay(500,TimeUnit.MILLISECONDS).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 795,
            "endLine": 797,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public callTimeoutDoesNotApplyOnceConnected() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 751,
            "endLine": 752,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public callTimeoutDoesNotApplyOnceConnected() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 814,
            "endLine": 816,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public webSocketConnectionIsReleased() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_FOUND).setBody(\"not found!\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 777,
            "endLine": 779,
            "startColumn": 5,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public webSocketConnectionIsReleased() : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().code(HttpURLConnection.HTTP_NOT_FOUND).body(\"not found!\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 841,
            "endLine": 844,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private successfulExtensions(extensionsHeader String) : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().addHeader(\"Sec-WebSocket-Extensions\",extensionsHeader).withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 838,
            "endLine": 840,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "private successfulExtensions(extensionsHeader String) : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().addHeader(\"Sec-WebSocket-Extensions\",extensionsHeader).webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 903,
            "endLine": 906,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private extensionNegotiationFailure(extensionsHeader String) : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().addHeader(\"Sec-WebSocket-Extensions\",extensionsHeader).withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 884,
            "endLine": 886,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "private extensionNegotiationFailure(extensionsHeader String) : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().addHeader(\"Sec-WebSocket-Extensions\",extensionsHeader).webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 950,
            "endLine": 953,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private websocketScheme(scheme String) : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 912,
            "endLine": 912,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "private websocketScheme(scheme String) : void",
            "type": "Statement",
            "name": "webServer.enqueue(new MockResponse.Builder().webSocketUpgrade(serverListener).build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 979,
            "endLine": 981,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private headersToList(response MockResponse) : List<String>",
            "type": "Statement",
            "name": "Headers headers=response.getHeaders();\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 390,
            "endLine": 390,
            "startColumn": 5,
            "endColumn": 45
          },
          "rightSideLocation": {
            "container": "private headersToList(response MockResponse.Builder) : List<String>",
            "type": "Statement",
            "name": "Headers headers=response.build().getHeaders();\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 411,
            "endLine": 411,
            "startColumn": 5,
            "endColumn": 53
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(response MockResponse, body MockDuplexResponseBody) : MockDuplexResponseBody",
            "type": "Statement",
            "name": "MwsDuplexAccess.instance.setBody(response,body);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 690,
            "endLine": 690,
            "startColumn": 5,
            "endColumn": 54
          },
          "rightSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockDuplexResponseBody) : MockDuplexResponseBody",
            "type": "Statement",
            "name": "MwsDuplexAccess.instance.setBody(builder,body);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 695,
            "endLine": 695,
            "startColumn": 5,
            "endColumn": 53
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private enqueueResponseWithBody(response MockResponse, body MockDuplexResponseBody) : MockDuplexResponseBody",
            "type": "Statement",
            "name": "server.enqueue(response);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 691,
            "endLine": 691,
            "startColumn": 5,
            "endColumn": 30
          },
          "rightSideLocation": {
            "container": "private enqueueResponseWithBody(builder MockResponse.Builder, body MockDuplexResponseBody) : MockDuplexResponseBody",
            "type": "Statement",
            "name": "server.enqueue(builder.build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/DuplexTest.java",
            "startLine": 696,
            "endLine": 696,
            "startColumn": 5,
            "endColumn": 37
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private upgradeResponse(request RecordedRequest) : MockResponse",
            "type": "Statement",
            "name": "return new MockResponse().setStatus(\"HTTP/1.1 101 Switching Protocols\").setHeader(\"Connection\",\"Upgrade\").setHeader(\"Upgrade\",\"websocket\").setHeader(\"Sec-WebSocket-Accept\",WebSocketProtocol.INSTANCE.acceptHeader(key));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 904,
            "endLine": 908,
            "startColumn": 5,
            "endColumn": 90
          },
          "rightSideLocation": {
            "container": "private upgradeResponse(request RecordedRequest) : MockResponse.Builder",
            "type": "Statement",
            "name": "return new MockResponse.Builder().status(\"HTTP/1.1 101 Switching Protocols\").setHeader(\"Connection\",\"Upgrade\").setHeader(\"Upgrade\",\"websocket\").setHeader(\"Sec-WebSocket-Accept\",WebSocketProtocol.INSTANCE.acceptHeader(key));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/internal/ws/WebSocketHttpTest.java",
            "startLine": 971,
            "endLine": 975,
            "startColumn": 5,
            "endColumn": 90
          },
          "validation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Method",
            "name": "setBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2708,
            "endLine": 2708,
            "startColumn": 5,
            "endColumn": 100
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest.TransferKind",
            "type": "Method",
            "name": "setBody",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2922,
            "endLine": 2922,
            "startColumn": 5,
            "endColumn": 108
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "truncateViolently",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2675,
            "endLine": 2687,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "okhttp3.CacheTest",
            "type": "Method",
            "name": "truncateViolently",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2888,
            "endLine": 2901,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setBodyAdjustsHeaders() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse().setBody(\"ABC\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "container": "public setBodyAdjustsHeaders() : void",
            "type": "Statement",
            "name": "MockResponse response=builder.build();\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 5,
            "endColumn": 45
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public mockResponseSetHeaders() : void",
            "type": "Statement",
            "name": "response.setHeaders(new Headers.Builder().add(\"Cookie\",\"a=android\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 5,
            "endColumn": 83
          },
          "rightSideLocation": {
            "container": "public mockResponseSetHeaders() : void",
            "type": "Statement",
            "name": "builder.headers(new Headers.Builder().add(\"Cookie\",\"a=android\").build());\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 145,
            "endLine": 145,
            "startColumn": 5,
            "endColumn": 79
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "mockResponse.setBody(\"\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 184,
            "endLine": 184,
            "startColumn": 7,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "builder.body(\"\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 183,
            "endLine": 183,
            "startColumn": 7,
            "endColumn": 24
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "MockResponse mockResponse=new MockResponse().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).setResponseCode(responseCode).setBody(\"ABCDE\").addHeader(\"WWW-Authenticate: challenge\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 172,
            "endLine": 177,
            "startColumn": 5,
            "endColumn": 51
          },
          "rightSideLocation": {
            "container": "private assertCached(shouldPut boolean, responseCode int) : void",
            "type": "Statement",
            "name": "MockResponse.Builder builder=new MockResponse.Builder().addHeader(\"Last-Modified: \" + formatDate(-1,TimeUnit.HOURS)).addHeader(\"Expires: \" + formatDate(1,TimeUnit.HOURS)).code(responseCode).body(\"ABCDE\").addHeader(\"WWW-Authenticate: challenge\");\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 171,
            "endLine": 176,
            "startColumn": 5,
            "endColumn": 51
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private truncateViolently(response MockResponse, numBytesToKeep int) : MockResponse",
            "type": "Statement",
            "name": "Headers headers=response.getHeaders();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2681,
            "endLine": 2681,
            "startColumn": 5,
            "endColumn": 45
          },
          "rightSideLocation": {
            "container": "private truncateViolently(builder MockResponse.Builder, numBytesToKeep int) : MockResponse.Builder",
            "type": "Statement",
            "name": "Headers headers=response.getHeaders();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2895,
            "endLine": 2895,
            "startColumn": 5,
            "endColumn": 45
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private truncateViolently(response MockResponse, numBytesToKeep int) : MockResponse",
            "type": "Statement",
            "name": "Buffer truncatedBody=new Buffer();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2682,
            "endLine": 2682,
            "startColumn": 5,
            "endColumn": 41
          },
          "rightSideLocation": {
            "container": "private truncateViolently(builder MockResponse.Builder, numBytesToKeep int) : MockResponse.Builder",
            "type": "Statement",
            "name": "Buffer truncatedBody=new Buffer();\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2896,
            "endLine": 2896,
            "startColumn": 5,
            "endColumn": 41
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private truncateViolently(response MockResponse, numBytesToKeep int) : MockResponse",
            "type": "Statement",
            "name": "truncatedBody.write(response.getBody(),numBytesToKeep);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2683,
            "endLine": 2683,
            "startColumn": 5,
            "endColumn": 61
          },
          "rightSideLocation": {
            "container": "private truncateViolently(builder MockResponse.Builder, numBytesToKeep int) : MockResponse.Builder",
            "type": "Statement",
            "name": "truncatedBody.write(response.getBody(),numBytesToKeep);\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2897,
            "endLine": 2897,
            "startColumn": 5,
            "endColumn": 61
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private truncateViolently(response MockResponse, numBytesToKeep int) : MockResponse",
            "type": "Statement",
            "name": "return response;\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2686,
            "endLine": 2686,
            "startColumn": 5,
            "endColumn": 21
          },
          "rightSideLocation": {
            "container": "private truncateViolently(builder MockResponse.Builder, numBytesToKeep int) : MockResponse.Builder",
            "type": "Statement",
            "name": "return builder;\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 2900,
            "endLine": 2900,
            "startColumn": 5,
            "endColumn": 20
          },
          "validation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "container": "public setBodyAdjustsHeaders() : void",
            "type": "Statement",
            "name": "MockResponse response=new MockResponse().setBody(\"ABC\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "container": "public setBodyAdjustsHeaders() : void",
            "type": "Statement",
            "name": "MockResponse.Builder builder=new MockResponse.Builder().body(\"ABC\");\n",
            "filePath": "mockwebserver/src/test/java/mockwebserver3/MockWebServerTest.java",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 5,
            "endColumn": 75
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "public maxAgeInTheFutureWithNoDateHeader() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse().addHeader(\"Cache-Control: max-age=60\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 713,
            "endLine": 714,
            "startColumn": 5,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "public maxAgeInTheFutureWithNoDateHeader() : void",
            "type": "Statement",
            "name": "assertFullyCached(new MockResponse.Builder().addHeader(\"Cache-Control: max-age=60\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 750,
            "endLine": 752,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cacheControlNoCache() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse().addHeader(\"Cache-Control: no-cache\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 925,
            "endLine": 926,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public cacheControlNoCache() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse.Builder().addHeader(\"Cache-Control: no-cache\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 981,
            "endLine": 983,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public pragmaNoCache() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse().addHeader(\"Pragma: no-cache\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 940,
            "endLine": 941,
            "startColumn": 5,
            "endColumn": 41
          },
          "rightSideLocation": {
            "container": "public pragmaNoCache() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse.Builder().addHeader(\"Pragma: no-cache\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 998,
            "endLine": 1000,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public cacheControlNoStore() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse().addHeader(\"Cache-Control: no-store\"));\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 955,
            "endLine": 956,
            "startColumn": 5,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public cacheControlNoStore() : void",
            "type": "Statement",
            "name": "assertNotCached(new MockResponse.Builder().addHeader(\"Cache-Control: no-store\").build());\n",
            "filePath": "okhttp/src/jvmTest/java/okhttp3/CacheTest.java",
            "startLine": 1015,
            "endLine": 1017,
            "startColumn": 5,
            "endColumn": 19
          },
          "validation": true
        }
      ]
    }
  ]
}