{
  "results": [
    {
      "repository": "https://github.com/spring-projects/spring-framework.git",
      "sha1": "2d33aac35038ef9f6773ff60f542975a051e7e42",
      "url": "https://github.com/spring-projects/spring-framework/commit/2d33aac35038ef9f6773ff60f542975a051e7e42",
      "commonMatching": [
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Field",
            "name": "extraInterfaces",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 49,
            "endLine": 49,
            "startColumn": 30,
            "endColumn": 45
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Field",
            "name": "extraInterfaces",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 49,
            "endLine": 49,
            "startColumn": 30,
            "endColumn": 45
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Field",
            "name": "answer",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 24,
            "endColumn": 30
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Field",
            "name": "answer",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 24,
            "endColumn": 30
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Field",
            "name": "serializable",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 24,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Field",
            "name": "serializable",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 24,
            "endColumn": 36
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Method",
            "name": "getAnswer",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 98,
            "endLine": 104,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Method",
            "name": "getAnswer",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 92,
            "endLine": 98,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.Definition",
            "type": "Field",
            "name": "name",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 25,
            "endColumn": 29
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoMetadata",
            "type": "Field",
            "name": "name",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 39,
            "endLine": 39,
            "startColumn": 25,
            "endColumn": 29
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.Definition",
            "type": "Field",
            "name": "reset",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 44,
            "endLine": 44,
            "startColumn": 26,
            "endColumn": 31
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoMetadata",
            "type": "Field",
            "name": "reset",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 26,
            "endColumn": 31
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.Definition",
            "type": "Field",
            "name": "proxyTargetAware",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 24,
            "endColumn": 40
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoMetadata",
            "type": "Field",
            "name": "proxyTargetAware",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 43,
            "endLine": 43,
            "startColumn": 24,
            "endColumn": 40
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.SpyDefinition.SpringAopBypassingVerificationStartedListener",
            "type": "Class",
            "name": "SpringAopBypassingVerificationStartedListener",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 138,
            "endLine": 149,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoSpyBeanMetadata.SpringAopBypassingVerificationStartedListener",
            "type": "Class",
            "name": "SpringAopBypassingVerificationStartedListener",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 126,
            "endLine": 137,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Field",
            "name": "OVERRIDE",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 29,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Field",
            "name": "OVERRIDE",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 195,
            "endLine": 195,
            "startColumn": 29,
            "endColumn": 64
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Field",
            "name": "OVERRIDE_SERVICE",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 205,
            "endLine": 205,
            "startColumn": 30,
            "endColumn": 76
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Field",
            "name": "OVERRIDE_SERVICE",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 196,
            "endLine": 196,
            "startColumn": 30,
            "endColumn": 76
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.ReplaceBeans",
            "type": "Class",
            "name": "ReplaceBeans",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 207,
            "endLine": 218,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.ReplaceBeans",
            "type": "Class",
            "name": "ReplaceBeans",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 198,
            "endLine": 209,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.ReplaceBeans",
            "type": "Field",
            "name": "explicitName",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 210,
            "endLine": 210,
            "startColumn": 26,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.ReplaceBeans",
            "type": "Field",
            "name": "explicitName",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 201,
            "endLine": 201,
            "startColumn": 26,
            "endColumn": 38
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.ReplaceBeans",
            "type": "Field",
            "name": "implicitName",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 213,
            "endLine": 213,
            "startColumn": 26,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.ReplaceBeans",
            "type": "Field",
            "name": "implicitName",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 204,
            "endLine": 204,
            "startColumn": 26,
            "endColumn": 38
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.CreateIfOriginalIsMissingBean",
            "type": "Class",
            "name": "CreateIfOriginalIsMissingBean",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 220,
            "endLine": 231,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.CreateIfOriginalIsMissingBean",
            "type": "Class",
            "name": "CreateIfOriginalIsMissingBean",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 211,
            "endLine": 222,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.CreateIfOriginalIsMissingBean",
            "type": "Field",
            "name": "explicitName",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 223,
            "endLine": 223,
            "startColumn": 26,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.CreateIfOriginalIsMissingBean",
            "type": "Field",
            "name": "explicitName",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 214,
            "endLine": 214,
            "startColumn": 26,
            "endColumn": 38
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.CreateIfOriginalIsMissingBean",
            "type": "Field",
            "name": "implicitName",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 26,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.CreateIfOriginalIsMissingBean",
            "type": "Field",
            "name": "implicitName",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 217,
            "endLine": 217,
            "startColumn": 26,
            "endColumn": 38
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.OverriddenFactoryBean",
            "type": "Class",
            "name": "OverriddenFactoryBean",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 233,
            "endLine": 247,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.OverriddenFactoryBean",
            "type": "Class",
            "name": "OverriddenFactoryBean",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 224,
            "endLine": 238,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.OverriddenFactoryBean",
            "type": "Field",
            "name": "f",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 237,
            "endLine": 237,
            "startColumn": 17,
            "endColumn": 18
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.OverriddenFactoryBean",
            "type": "Field",
            "name": "f",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 228,
            "endLine": 228,
            "startColumn": 17,
            "endColumn": 18
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.EagerInitBean",
            "type": "Class",
            "name": "EagerInitBean",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 249,
            "endLine": 257,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.EagerInitBean",
            "type": "Class",
            "name": "EagerInitBean",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 240,
            "endLine": 248,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.EagerInitBean",
            "type": "Field",
            "name": "service",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 252,
            "endLine": 252,
            "startColumn": 26,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.EagerInitBean",
            "type": "Field",
            "name": "service",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 243,
            "endLine": 243,
            "startColumn": 26,
            "endColumn": 33
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.SingletonBean",
            "type": "Class",
            "name": "SingletonBean",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 259,
            "endLine": 268,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.SingletonBean",
            "type": "Class",
            "name": "SingletonBean",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 250,
            "endLine": 259,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.SingletonBean",
            "type": "Field",
            "name": "value",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 263,
            "endLine": 263,
            "startColumn": 18,
            "endColumn": 23
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.SingletonBean",
            "type": "Field",
            "name": "value",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 254,
            "endLine": 254,
            "startColumn": 18,
            "endColumn": 23
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.TestFactoryBean",
            "type": "Class",
            "name": "TestFactoryBean",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 270,
            "endLine": 286,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.TestFactoryBean",
            "type": "Class",
            "name": "TestFactoryBean",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 261,
            "endLine": 277,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.FactoryBeanRegisteringPostProcessor",
            "type": "Class",
            "name": "FactoryBeanRegisteringPostProcessor",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 288,
            "endLine": 300,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.FactoryBeanRegisteringPostProcessor",
            "type": "Class",
            "name": "FactoryBeanRegisteringPostProcessor",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 279,
            "endLine": 291,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.EarlyBeanInitializationDetector",
            "type": "Class",
            "name": "EarlyBeanInitializationDetector",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 302,
            "endLine": 311,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.EarlyBeanInitializationDetector",
            "type": "Class",
            "name": "EarlyBeanInitializationDetector",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 293,
            "endLine": 302,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.SomeInterface",
            "type": "Interface",
            "name": "SomeInterface",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 313,
            "endLine": 314,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.SomeInterface",
            "type": "Interface",
            "name": "SomeInterface",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 304,
            "endLine": 305,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests.SomeImplementation",
            "type": "Class",
            "name": "SomeImplementation",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 316,
            "endLine": 317,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests.SomeImplementation",
            "type": "Class",
            "name": "SomeImplementation",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 307,
            "endLine": 308,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests.SingleAnnotationOnField",
            "type": "Class",
            "name": "SingleAnnotationOnField",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 77,
            "endLine": 85,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests.SingleAnnotationOnField",
            "type": "Class",
            "name": "SingleAnnotationOnField",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 71,
            "endLine": 79,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests.SingleAnnotationOnField",
            "type": "Field",
            "name": "message",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 10,
            "endColumn": 17
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests.SingleAnnotationOnField",
            "type": "Field",
            "name": "message",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 74,
            "endLine": 74,
            "startColumn": 10,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests.MultipleAnnotationsOnField",
            "type": "Class",
            "name": "MultipleAnnotationsOnField",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 87,
            "endLine": 96,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests.MultipleAnnotationsOnField",
            "type": "Class",
            "name": "MultipleAnnotationsOnField",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 81,
            "endLine": 90,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests.MultipleAnnotationsOnField",
            "type": "Field",
            "name": "message",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 10,
            "endColumn": 17
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests.MultipleAnnotationsOnField",
            "type": "Field",
            "name": "message",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 10,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests.AnnotationsOnMultipleFields",
            "type": "Class",
            "name": "AnnotationsOnMultipleFields",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 98,
            "endLine": 113,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests.AnnotationsOnMultipleFields",
            "type": "Class",
            "name": "AnnotationsOnMultipleFields",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 92,
            "endLine": 107,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests.AnnotationsOnMultipleFields",
            "type": "Field",
            "name": "message",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 10,
            "endColumn": 17
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests.AnnotationsOnMultipleFields",
            "type": "Field",
            "name": "message",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 10,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests.AnnotationsOnMultipleFields",
            "type": "Field",
            "name": "messageOther",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 10,
            "endColumn": 22
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests.AnnotationsOnMultipleFields",
            "type": "Field",
            "name": "messageOther",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 10,
            "endColumn": 22
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory",
            "type": "Method",
            "name": "createContextCustomizer",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 40,
            "endLine": 52,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory",
            "type": "Method",
            "name": "createContextCustomizer",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 42,
            "endLine": 54,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Method",
            "name": "customizeContext",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 78,
            "endLine": 83,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Method",
            "name": "customizeContext",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 73,
            "endLine": 79,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Method",
            "name": "equals",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 85,
            "endLine": 95,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Method",
            "name": "equals",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 81,
            "endLine": 91,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Method",
            "name": "hashCode",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 97,
            "endLine": 100,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Method",
            "name": "hashCode",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 93,
            "endLine": 96,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Class",
            "name": "BeanOverrideContextCustomizer",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 61,
            "endLine": 101,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Class",
            "name": "BeanOverrideContextCustomizer",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 65,
            "endLine": 97,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory",
            "type": "Class",
            "name": "BeanOverrideContextCustomizerFactory",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 31,
            "endLine": 103,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory",
            "type": "Class",
            "name": "BeanOverrideContextCustomizerFactory",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 32,
            "endLine": 99,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideProcessor",
            "type": "Interface",
            "name": "BeanOverrideProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideProcessor.java",
            "startLine": 26,
            "endLine": 71,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideProcessor",
            "type": "Interface",
            "name": "BeanOverrideProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideProcessor.java",
            "startLine": 22,
            "endLine": 49,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideStrategy",
            "type": "Enum",
            "name": "BeanOverrideStrategy",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideStrategy.java",
            "startLine": 19,
            "endLine": 48,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideStrategy",
            "type": "Enum",
            "name": "BeanOverrideStrategy",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideStrategy.java",
            "startLine": 19,
            "endLine": 47,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideTestExecutionListener",
            "type": "Method",
            "name": "injectFields",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 58,
            "endLine": 66,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideTestExecutionListener",
            "type": "Method",
            "name": "injectFields",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 58,
            "endLine": 66,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideTestExecutionListener",
            "type": "Method",
            "name": "reinjectFieldsIfConfigured",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 68,
            "endLine": 88,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideTestExecutionListener",
            "type": "Method",
            "name": "reinjectFieldsIfConfigured",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 68,
            "endLine": 88,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideTestExecutionListener",
            "type": "Class",
            "name": "BeanOverrideTestExecutionListener",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 27,
            "endLine": 113,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideTestExecutionListener",
            "type": "Class",
            "name": "BeanOverrideTestExecutionListener",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 27,
            "endLine": 110,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "equals",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 127,
            "endLine": 140,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "equals",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 114,
            "endLine": 126,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "hashCode",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 142,
            "endLine": 145,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "hashCode",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 128,
            "endLine": 131,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "toString",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 147,
            "endLine": 156,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "toString",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 133,
            "endLine": 140,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Class",
            "name": "OverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 29,
            "endLine": 158,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Class",
            "name": "OverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 28,
            "endLine": 142,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor",
            "type": "Method",
            "name": "findTestBeanFactoryMethod",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 52,
            "endLine": 88,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor",
            "type": "Method",
            "name": "findTestBeanFactoryMethod",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 53,
            "endLine": 104,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor",
            "type": "Class",
            "name": "TestBeanOverrideProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 39,
            "endLine": 162,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor",
            "type": "Class",
            "name": "TestBeanOverrideProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 41,
            "endLine": 193,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanOverrideProcessor",
            "type": "Class",
            "name": "MockitoBeanOverrideProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideProcessor.java",
            "startLine": 26,
            "endLine": 47,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanOverrideProcessor",
            "type": "Class",
            "name": "MockitoBeanOverrideProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideProcessor.java",
            "startLine": 25,
            "endLine": 47,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadataTests",
            "type": "Method",
            "name": "implicitConfigurations",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 39,
            "endLine": 43,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadataTests",
            "type": "Method",
            "name": "implicitConfigurations",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 38,
            "endLine": 42,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadataTests",
            "type": "Method",
            "name": "exampleOverride",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 49,
            "endLine": 53,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadataTests",
            "type": "Method",
            "name": "exampleOverride",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 48,
            "endLine": 52,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadataTests.ConcreteOverrideMetadata",
            "type": "Class",
            "name": "ConcreteOverrideMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 55,
            "endLine": 74,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadataTests.ConcreteOverrideMetadata",
            "type": "Class",
            "name": "ConcreteOverrideMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 54,
            "endLine": 68,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadataTests",
            "type": "Class",
            "name": "OverrideMetadataTests",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 31,
            "endLine": 76,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadataTests",
            "type": "Class",
            "name": "OverrideMetadataTests",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 30,
            "endLine": 70,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests",
            "type": "Method",
            "name": "createMetaDataForUnknownExplicitMethod",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 88,
            "endLine": 103,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests",
            "type": "Method",
            "name": "createMetaDataForUnknownExplicitMethod",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 89,
            "endLine": 104,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests",
            "type": "Method",
            "name": "createMetaDataForKnownExplicitMethod",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 105,
            "endLine": 115,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests",
            "type": "Method",
            "name": "createMetaDataForKnownExplicitMethod",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 106,
            "endLine": 116,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests.MethodConventionConf",
            "type": "Field",
            "name": "field",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 25,
            "endColumn": 30
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests.MethodConventionConf",
            "type": "Field",
            "name": "field",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 25,
            "endColumn": 30
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests.MethodConventionConf",
            "type": "Class",
            "name": "MethodConventionConf",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 133,
            "endLine": 150,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests.MethodConventionConf",
            "type": "Class",
            "name": "MethodConventionConf",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 148,
            "endLine": 165,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests",
            "type": "Class",
            "name": "TestBeanOverrideProcessorTests",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 36,
            "endLine": 165,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests",
            "type": "Class",
            "name": "TestBeanOverrideProcessorTests",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 37,
            "endLine": 180,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.ExampleBeanOverrideAnnotation",
            "type": "Annotation Type",
            "name": "ExampleBeanOverrideAnnotation",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideAnnotation.java",
            "startLine": 26,
            "endLine": 38,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.ExampleBeanOverrideAnnotation",
            "type": "Annotation Type",
            "name": "ExampleBeanOverrideAnnotation",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideAnnotation.java",
            "startLine": 26,
            "endLine": 40,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.ExampleBeanOverrideProcessor",
            "type": "Class",
            "name": "ExampleBeanOverrideProcessor",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideProcessor.java",
            "startLine": 27,
            "endLine": 49,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.ExampleBeanOverrideProcessor",
            "type": "Class",
            "name": "ExampleBeanOverrideProcessor",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideProcessor.java",
            "startLine": 27,
            "endLine": 40,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.TestOverrideMetadata",
            "type": "Method",
            "name": "TestOverrideMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 79,
            "endLine": 84,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.TestOverrideMetadata",
            "type": "Method",
            "name": "TestOverrideMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 81,
            "endLine": 87,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.TestOverrideMetadata",
            "type": "Class",
            "name": "TestOverrideMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 35,
            "endLine": 120,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.TestOverrideMetadata",
            "type": "Class",
            "name": "TestOverrideMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 35,
            "endLine": 148,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Method",
            "name": "getEarlyBeanReference",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 356,
            "endLine": 363,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Method",
            "name": "getEarlyBeanReference",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java",
            "startLine": 249,
            "endLine": 256,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideStrategy",
            "type": "Enum Constant",
            "name": "WRAP_EARLY_BEAN",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideStrategy.java",
            "startLine": 41,
            "endLine": 46,
            "startColumn": 2,
            "endColumn": 17
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideStrategy",
            "type": "Enum Constant",
            "name": "WRAP_BEAN",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideStrategy.java",
            "startLine": 40,
            "endLine": 45,
            "startColumn": 2,
            "endColumn": 11
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.SpyDefinition",
            "type": "Method",
            "name": "equals",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 76,
            "endLine": 87,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoSpyBeanMetadata",
            "type": "Method",
            "name": "equals",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 70,
            "endLine": 81,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor",
            "type": "Method",
            "name": "inject",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 269,
            "endLine": 274,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideRegistrar",
            "type": "Method",
            "name": "inject",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 149,
            "endLine": 154,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParser",
            "type": "Method",
            "name": "parseField",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 92,
            "endLine": 112,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtils",
            "type": "Method",
            "name": "parseField",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 86,
            "endLine": 103,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.Definition",
            "type": "Method",
            "name": "equals",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 99,
            "endLine": 112,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoMetadata",
            "type": "Method",
            "name": "equals",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 96,
            "endLine": 110,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Method",
            "name": "canCreateIfOriginalMissingWithCreateReplaceStrategy",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 101,
            "endLine": 113,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Method",
            "name": "canCreateIfOriginalMissingWithCreateReplaceStrategy",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 95,
            "endLine": 105,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor",
            "type": "Method",
            "name": "getOverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 121,
            "endLine": 126,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideRegistrar",
            "type": "Method",
            "name": "getOverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 71,
            "endLine": 76,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Method",
            "name": "toString",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 141,
            "endLine": 151,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Method",
            "name": "toString",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 129,
            "endLine": 139,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.TestOverrideMetadata",
            "type": "Method",
            "name": "getExpectedBeanName",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 93,
            "endLine": 99,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.TestOverrideMetadata",
            "type": "Method",
            "name": "getBeanName",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 97,
            "endLine": 103,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor",
            "type": "Method",
            "name": "setBeanFactory",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 114,
            "endLine": 119,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideRegistrar",
            "type": "Method",
            "name": "setBeanFactory",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 78,
            "endLine": 83,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.ExampleBeanOverrideProcessor",
            "type": "Method",
            "name": "createMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideProcessor.java",
            "startLine": 38,
            "endLine": 47,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.ExampleBeanOverrideProcessor",
            "type": "Method",
            "name": "createMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideProcessor.java",
            "startLine": 29,
            "endLine": 38,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Method",
            "name": "canReplaceExistingBeanDefinitions",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 58,
            "endLine": 71,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Method",
            "name": "canReplaceExistingBeanDefinitions",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 57,
            "endLine": 68,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor",
            "type": "Class",
            "name": "BeanOverrideBeanPostProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 54,
            "endLine": 382,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideRegistrar",
            "type": "Class",
            "name": "BeanOverrideRegistrar",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 39,
            "endLine": 173,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Method",
            "name": "postProcessorShouldNotTriggerEarlyInitialization",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 146,
            "endLine": 156,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Method",
            "name": "postProcessorShouldNotTriggerEarlyInitialization",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 134,
            "endLine": 143,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.Definition",
            "type": "Class",
            "name": "Definition",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 31,
            "endLine": 123,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoMetadata",
            "type": "Class",
            "name": "MockitoMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 31,
            "endLine": 117,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadataTests.ConcreteOverrideMetadata",
            "type": "Method",
            "name": "ConcreteOverrideMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 57,
            "endLine": 61,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadataTests.ConcreteOverrideMetadata",
            "type": "Method",
            "name": "ConcreteOverrideMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 56,
            "endLine": 60,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Method",
            "name": "MockDefinition",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 56,
            "endLine": 59,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Method",
            "name": "MockitoBeanMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 56,
            "endLine": 59,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "field",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 72,
            "endLine": 77,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "getField",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 74,
            "endLine": 79,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Method",
            "name": "copyDefinitionPrimaryAndScope",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 173,
            "endLine": 192,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Method",
            "name": "copyDefinitionPrimaryAndScope",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 158,
            "endLine": 175,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Method",
            "name": "BeanOverrideContextCustomizer",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 68,
            "endLine": 76,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Method",
            "name": "BeanOverrideContextCustomizer",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 69,
            "endLine": 71,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Method",
            "name": "canOverrideBeanProducedByFactoryBeanWithClassObjectTypeAttribute",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 115,
            "endLine": 128,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Method",
            "name": "canOverrideBeanProducedByFactoryBeanWithClassObjectTypeAttribute",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 107,
            "endLine": 118,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor",
            "type": "Field",
            "name": "earlyOverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 46,
            "endColumn": 85
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideRegistrar",
            "type": "Field",
            "name": "earlyOverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 46,
            "endColumn": 67
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Method",
            "name": "equals",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 114,
            "endLine": 129,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Method",
            "name": "equals",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 108,
            "endLine": 122,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Method",
            "name": "canOverrideBeanProducedByFactoryBeanWithResolvableTypeObjectTypeAttribute",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 130,
            "endLine": 144,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Method",
            "name": "canOverrideBeanProducedByFactoryBeanWithResolvableTypeObjectTypeAttribute",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 120,
            "endLine": 132,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Method",
            "name": "createMock",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 157,
            "endLine": 171,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Method",
            "name": "createMock",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 141,
            "endLine": 155,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParser",
            "type": "Method",
            "name": "hasBeanOverride",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 68,
            "endLine": 90,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtils",
            "type": "Method",
            "name": "hasBeanOverride",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 45,
            "endLine": 65,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideProcessor",
            "type": "Method",
            "name": "createMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideProcessor.java",
            "startLine": 56,
            "endLine": 69,
            "startColumn": 2,
            "endColumn": 109
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideProcessor",
            "type": "Method",
            "name": "createMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideProcessor.java",
            "startLine": 39,
            "endLine": 48,
            "startColumn": 2,
            "endColumn": 98
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.Definition",
            "type": "Method",
            "name": "Definition",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 49,
            "endLine": 56,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoMetadata",
            "type": "Method",
            "name": "MockitoMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 46,
            "endLine": 53,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests.DuplicateConf",
            "type": "Class",
            "name": "DuplicateConf",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 115,
            "endLine": 122,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests.DuplicateConf",
            "type": "Class",
            "name": "DuplicateConf",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 109,
            "endLine": 116,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Method",
            "name": "asClassSet",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 82,
            "endLine": 88,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Method",
            "name": "asClassSet",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 76,
            "endLine": 82,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Method",
            "name": "allowReplaceDefinitionWhenSingletonDefinitionPresent",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 158,
            "endLine": 171,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Method",
            "name": "allowReplaceDefinitionWhenSingletonDefinitionPresent",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 145,
            "endLine": 156,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Class",
            "name": "BeanOverrideBeanPostProcessorTests",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 48,
            "endLine": 319,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Class",
            "name": "BeanOverrideBeanFactoryPostProcessorTests",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 49,
            "endLine": 310,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests.DuplicateConf",
            "type": "Field",
            "name": "message2",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 121,
            "endLine": 121,
            "startColumn": 10,
            "endColumn": 18
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests.DuplicateConf",
            "type": "Field",
            "name": "message2",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 115,
            "endLine": 115,
            "startColumn": 10,
            "endColumn": 18
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests.DuplicateConf",
            "type": "Field",
            "name": "message1",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 10,
            "endColumn": 18
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests.DuplicateConf",
            "type": "Field",
            "name": "message1",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 10,
            "endColumn": 18
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor",
            "type": "Field",
            "name": "beanFactory",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 42,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideRegistrar",
            "type": "Field",
            "name": "beanFactory",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 34,
            "endColumn": 45
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor",
            "type": "Field",
            "name": "overrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 38,
            "endColumn": 54
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideRegistrar",
            "type": "Field",
            "name": "overrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 38,
            "endColumn": 54
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor",
            "type": "Field",
            "name": "beanNameRegistry",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 46,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideRegistrar",
            "type": "Field",
            "name": "beanNameRegistry",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 46,
            "endColumn": 62
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.SpyDefinition",
            "type": "Method",
            "name": "createSpy",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 109,
            "endLine": 136,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoSpyBeanMetadata",
            "type": "Method",
            "name": "createSpy",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 97,
            "endLine": 124,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Field",
            "name": "earlyReferences",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 342,
            "endLine": 342,
            "startColumn": 37,
            "endColumn": 52
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Field",
            "name": "earlyReferences",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java",
            "startLine": 235,
            "endLine": 235,
            "startColumn": 37,
            "endColumn": 52
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests",
            "type": "Method",
            "name": "rejectsMultipleAnnotationsOnSameElement",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 61,
            "endLine": 67,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests",
            "type": "Method",
            "name": "rejectsMultipleAnnotationsOnSameElement",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 55,
            "endLine": 61,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.MethodConventionOverrideMetadata",
            "type": "Method",
            "name": "createOverride",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 140,
            "endLine": 159,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.TestBeanOverrideMetadata",
            "type": "Method",
            "name": "createOverride",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 157,
            "endLine": 169,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Method",
            "name": "cannotReplaceIfNoBeanMatching",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 73,
            "endLine": 84,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Method",
            "name": "cannotReplaceIfNoBeanMatching",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 70,
            "endLine": 80,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor",
            "type": "Method",
            "name": "inject",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 276,
            "endLine": 292,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideRegistrar",
            "type": "Method",
            "name": "inject",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 156,
            "endLine": 172,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "getBeanOverrideStrategy",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 94,
            "endLine": 100,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "getStrategy",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 81,
            "endLine": 87,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessorTests",
            "type": "Method",
            "name": "canReplaceExistingBeanDefinitionsWithCreateReplaceStrategy",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 86,
            "endLine": 99,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Method",
            "name": "canReplaceExistingBeanDefinitionsWithCreateReplaceStrategy",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 82,
            "endLine": 93,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.Definition",
            "type": "Method",
            "name": "getExpectedBeanName",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 59,
            "endLine": 65,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoMetadata",
            "type": "Method",
            "name": "getBeanName",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 56,
            "endLine": 62,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "OverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 46,
            "endLine": 53,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "OverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 52,
            "endLine": 58,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "getExpectedBeanName",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 62,
            "endLine": 70,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "getBeanName",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 60,
            "endLine": 65,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor",
            "type": "Method",
            "name": "wrapIfNecessary",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 214,
            "endLine": 230,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideRegistrar",
            "type": "Method",
            "name": "wrapIfNecessary",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 85,
            "endLine": 98,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.SpyDefinition",
            "type": "Method",
            "name": "SpyDefinition",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 49,
            "endLine": 52,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoSpyBeanMetadata",
            "type": "Method",
            "name": "MockitoSpyBeanMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 49,
            "endLine": 52,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests",
            "type": "Class",
            "name": "BeanOverrideParserTests",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 30,
            "endLine": 124,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests",
            "type": "Class",
            "name": "BeanOverrideParsingUtilsTests",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 30,
            "endLine": 118,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Field",
            "name": "metadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 66,
            "endLine": 66,
            "startColumn": 39,
            "endColumn": 47
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory.BeanOverrideContextCustomizer",
            "type": "Field",
            "name": "detectedClasses",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 31,
            "endColumn": 46
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Method",
            "name": "postProcessAfterInitialization",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 365,
            "endLine": 374,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Method",
            "name": "postProcessAfterInitialization",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java",
            "startLine": 258,
            "endLine": 267,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.SpyDefinition",
            "type": "Method",
            "name": "toString",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 96,
            "endLine": 103,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoSpyBeanMetadata",
            "type": "Method",
            "name": "toString",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 88,
            "endLine": 95,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideTestExecutionListener",
            "type": "Method",
            "name": "postProcessFields",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 90,
            "endLine": 109,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideTestExecutionListener",
            "type": "Method",
            "name": "postProcessFields",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 90,
            "endLine": 106,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests",
            "type": "Method",
            "name": "createMetaDataWithDeferredCheckForExistenceOfConventionBasedFactoryMethod",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 117,
            "endLine": 130,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessorTests",
            "type": "Method",
            "name": "createMetaDataForConventionBasedFactoryMethod",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 118,
            "endLine": 133,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.ExampleBeanOverrideProcessor",
            "type": "Field",
            "name": "DUPLICATE_TRIGGER",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideProcessor.java",
            "startLine": 29,
            "endLine": 29,
            "startColumn": 22,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.ExampleBeanOverrideAnnotation",
            "type": "Field",
            "name": "DUPLICATE_TRIGGER",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideAnnotation.java",
            "startLine": 33,
            "endLine": 33,
            "startColumn": 9,
            "endColumn": 40
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.SpyDefinition",
            "type": "Class",
            "name": "SpyDefinition",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 41,
            "endLine": 151,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoSpyBeanMetadata",
            "type": "Class",
            "name": "MockitoSpyBeanMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 41,
            "endLine": 139,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Class",
            "name": "MockDefinition",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 41,
            "endLine": 173,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Class",
            "name": "MockitoBeanMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 41,
            "endLine": 157,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.TestOverrideMetadata",
            "type": "Method",
            "name": "TestOverrideMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 87,
            "endLine": 91,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.TestOverrideMetadata",
            "type": "Method",
            "name": "TestOverrideMetadata",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 90,
            "endLine": 95,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanOverrideProcessor",
            "type": "Method",
            "name": "createMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideProcessor.java",
            "startLine": 35,
            "endLine": 45,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanOverrideProcessor",
            "type": "Method",
            "name": "createMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideProcessor.java",
            "startLine": 34,
            "endLine": 45,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Class",
            "name": "WrapEarlyBeanPostProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 337,
            "endLine": 380,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Class",
            "name": "WrapEarlyBeanPostProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java",
            "startLine": 230,
            "endLine": 273,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createContextCustomizer(testClass Class<?>, configAttributes List<ContextConfigurationAttributes>) : ContextCustomizer",
            "type": "Statement",
            "name": "return new BeanOverrideContextCustomizer(parser.getOverrideMetadata());\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 3,
            "endColumn": 74
          },
          "rightSideLocation": {
            "container": "public createContextCustomizer(testClass Class<?>, configAttributes List<ContextConfigurationAttributes>) : ContextCustomizer",
            "type": "Statement",
            "name": "return new BeanOverrideContextCustomizer(detectedClasses);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 3,
            "endColumn": 61
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createContextCustomizer(testClass Class<?>, configAttributes List<ContextConfigurationAttributes>) : ContextCustomizer",
            "type": "Statement",
            "name": "if(parser.getOverrideMetadata().isEmpty())",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 47,
            "endLine": 49,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "public createContextCustomizer(testClass Class<?>, configAttributes List<ContextConfigurationAttributes>) : ContextCustomizer",
            "type": "Statement",
            "name": "if(detectedClasses.isEmpty())",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 49,
            "endLine": 51,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "return this.metadata.equals(other.metadata);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 4,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "return this.detectedClasses.equals(other.detectedClasses);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 4,
            "endColumn": 62
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public hashCode() : int",
            "type": "Statement",
            "name": "return this.metadata.hashCode();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 4,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "public hashCode() : int",
            "type": "Statement",
            "name": "return this.detectedClasses.hashCode();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 4,
            "endColumn": 43
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected injectFields(testContext TestContext) : void",
            "type": "Statement",
            "name": "postProcessFields(testContext,(testMetadata,postProcessor) -> postProcessor.inject(testMetadata.overrideMetadata.field(),testMetadata.testInstance,testMetadata.overrideMetadata));\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 64,
            "endLine": 65,
            "startColumn": 3,
            "endColumn": 103
          },
          "rightSideLocation": {
            "container": "protected injectFields(testContext TestContext) : void",
            "type": "Statement",
            "name": "postProcessFields(testContext,(testMetadata,overrideRegistrar) -> overrideRegistrar.inject(testMetadata.testInstance,testMetadata.overrideMetadata));\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 64,
            "endLine": 65,
            "startColumn": 3,
            "endColumn": 64
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected reinjectFieldsIfConfigured(testContext TestContext) : void",
            "type": "Statement",
            "name": "Field field=testMetadata.overrideMetadata.field();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 5,
            "endColumn": 57
          },
          "rightSideLocation": {
            "container": "protected reinjectFieldsIfConfigured(testContext TestContext) : void",
            "type": "Statement",
            "name": "Field field=testMetadata.overrideMetadata.getField();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 5,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected reinjectFieldsIfConfigured(testContext TestContext) : void",
            "type": "Statement",
            "name": "postProcessFields(testContext,(testMetadata,postProcessor) -> {\n  Object testInstance=testMetadata.testInstance;\n  Field field=testMetadata.overrideMetadata.field();\n  ReflectionUtils.makeAccessible(field);\n  ReflectionUtils.setField(field,testInstance,null);\n  postProcessor.inject(field,testInstance,testMetadata.overrideMetadata);\n}\n);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 80,
            "endLine": 86,
            "startColumn": 4,
            "endColumn": 7
          },
          "rightSideLocation": {
            "container": "protected reinjectFieldsIfConfigured(testContext TestContext) : void",
            "type": "Statement",
            "name": "postProcessFields(testContext,(testMetadata,postProcessor) -> {\n  Object testInstance=testMetadata.testInstance;\n  Field field=testMetadata.overrideMetadata.getField();\n  ReflectionUtils.makeAccessible(field);\n  ReflectionUtils.setField(field,testInstance,null);\n  postProcessor.inject(testInstance,testMetadata.overrideMetadata);\n}\n);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 80,
            "endLine": 86,
            "startColumn": 4,
            "endColumn": 7
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected reinjectFieldsIfConfigured(testContext TestContext) : void",
            "type": "Statement",
            "name": "postProcessor.inject(field,testInstance,testMetadata.overrideMetadata);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 5,
            "endColumn": 78
          },
          "rightSideLocation": {
            "container": "protected reinjectFieldsIfConfigured(testContext TestContext) : void",
            "type": "Statement",
            "name": "postProcessor.inject(testInstance,testMetadata.overrideMetadata);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 5,
            "endColumn": 71
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "return Objects.equals(this.field,that.field) && Objects.equals(this.overrideAnnotation,that.overrideAnnotation) && Objects.equals(this.strategy,that.strategy)&& Objects.equals(typeToOverride(),that.typeToOverride());\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 136,
            "endLine": 139,
            "startColumn": 3,
            "endColumn": 61
          },
          "rightSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "return Objects.equals(this.strategy,that.strategy) && Objects.equals(this.field,that.field) && Objects.equals(this.beanType,that.beanType);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 123,
            "endLine": 125,
            "startColumn": 3,
            "endColumn": 50
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public hashCode() : int",
            "type": "Statement",
            "name": "return Objects.hash(this.field,this.overrideAnnotation,this.strategy,typeToOverride());\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 144,
            "endLine": 144,
            "startColumn": 3,
            "endColumn": 93
          },
          "rightSideLocation": {
            "container": "public hashCode() : int",
            "type": "Statement",
            "name": "return Objects.hash(this.strategy,this.field,this.beanType);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 3,
            "endColumn": 65
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public toString() : String",
            "type": "Statement",
            "name": "return new ToStringCreator(this).append(\"category\",getBeanOverrideDescription()).append(\"field\",this.field).append(\"overrideAnnotation\",this.overrideAnnotation).append(\"strategy\",this.strategy).append(\"typeToOverride\",typeToOverride()).toString();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 149,
            "endLine": 155,
            "startColumn": 3,
            "endColumn": 17
          },
          "rightSideLocation": {
            "container": "public toString() : String",
            "type": "Statement",
            "name": "return new ToStringCreator(this).append(\"strategy\",this.strategy).append(\"field\",this.field).append(\"beanType\",this.beanType).toString();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 135,
            "endLine": 139,
            "startColumn": 3,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public findTestBeanFactoryMethod(clazz Class<?>, methodReturnType Class<?>, methodNames String...) : Method",
            "type": "Statement",
            "name": "List<Method> methods=Arrays.stream(clazz.getDeclaredMethods()).filter(method -> Modifier.isStatic(method.getModifiers()) && supportedNames.contains(method.getName()) && methodReturnType.isAssignableFrom(method.getReturnType())).toList();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 71,
            "endLine": 75,
            "startColumn": 3,
            "endColumn": 15
          },
          "rightSideLocation": {
            "container": "package findTestBeanFactoryMethod(clazz Class<?>, methodReturnType Class<?>, methodNames String...) : Method",
            "type": "Statement",
            "name": "List<Method> methods=Arrays.stream(ReflectionUtils.getAllDeclaredMethods(clazz)).filter(method -> Modifier.isStatic(method.getModifiers()) && supportedNames.contains(method.getName()) && methodReturnType.isAssignableFrom(method.getReturnType())).toList();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 77,
            "endLine": 81,
            "startColumn": 3,
            "endColumn": 15
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public findTestBeanFactoryMethod(clazz Class<?>, methodReturnType Class<?>, methodNames String...) : Method",
            "type": "Statement",
            "name": "Assert.state(methods.size() == 1,() -> \"\"\"\n\t\t\t\tFound %d competing static test bean factory methods in %s with return type %s \\\n\t\t\t\twhose name matches one of the supported candidates %s\"\"\".formatted(methods.size(),clazz.getName(),methodReturnType.getName(),supportedNames));\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 82,
            "endLine": 85,
            "startColumn": 3,
            "endColumn": 85
          },
          "rightSideLocation": {
            "container": "package findTestBeanFactoryMethod(clazz Class<?>, methodReturnType Class<?>, methodNames String...) : Method",
            "type": "Statement",
            "name": "Assert.state(nameCount == 1,() -> \"\"\"\n\t\t\t\tFound %d competing static test bean factory methods in %s with return type %s \\\n\t\t\t\twhose name matches one of the supported candidates %s\"\"\".formatted(methodCount,clazz.getName(),methodReturnType.getName(),supportedNames));\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 98,
            "endLine": 101,
            "startColumn": 3,
            "endColumn": 81
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package implicitConfigurations() : void",
            "type": "Statement",
            "name": "assertThat(metadata.getExpectedBeanName()).as(\"expectedBeanName\").isEqualTo(metadata.field().getName());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 42,
            "endLine": 42,
            "startColumn": 3,
            "endColumn": 107
          },
          "rightSideLocation": {
            "container": "package implicitConfigurations() : void",
            "type": "Statement",
            "name": "assertThat(metadata.getBeanName()).as(\"expectedBeanName\").isEqualTo(metadata.getField().getName());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 3,
            "endColumn": 102
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private exampleOverride() : OverrideMetadata",
            "type": "Statement",
            "name": "return new ConcreteOverrideMetadata(field,field.getAnnotation(NonNull.class),ResolvableType.forClass(String.class),BeanOverrideStrategy.REPLACE_DEFINITION);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 51,
            "endLine": 52,
            "startColumn": 3,
            "endColumn": 85
          },
          "rightSideLocation": {
            "container": "private exampleOverride() : OverrideMetadata",
            "type": "Statement",
            "name": "return new ConcreteOverrideMetadata(field,ResolvableType.forClass(String.class),BeanOverrideStrategy.REPLACE_DEFINITION);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 50,
            "endLine": 51,
            "startColumn": 3,
            "endColumn": 46
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package createMetaDataForUnknownExplicitMethod() : void",
            "type": "Statement",
            "name": "assertThatIllegalStateException().isThrownBy(() -> processor.createMetadata(field,overrideAnnotation,ResolvableType.forClass(returnType))).withMessage(\"\"\"\n\t\t\t\t\t\tFailed to find a static test bean factory method in %s with return type %s \\\n\t\t\t\t\t\twhose name matches one of the supported candidates %s\"\"\",clazz.getName(),returnType.getName(),List.of(\"explicit1\"));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 97,
            "endLine": 102,
            "startColumn": 3,
            "endColumn": 68
          },
          "rightSideLocation": {
            "container": "package createMetaDataForUnknownExplicitMethod() : void",
            "type": "Statement",
            "name": "assertThatIllegalStateException().isThrownBy(() -> processor.createMetadata(overrideAnnotation,clazz,field)).withMessage(\"\"\"\n\t\t\t\t\t\tFailed to find a static test bean factory method in %s with return type %s \\\n\t\t\t\t\t\twhose name matches one of the supported candidates %s\"\"\",clazz.getName(),returnType.getName(),List.of(\"explicit1\"));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 98,
            "endLine": 103,
            "startColumn": 3,
            "endColumn": 68
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package createMetaDataForKnownExplicitMethod() : void",
            "type": "Statement",
            "name": "Field field=ExplicitMethodNameConf.class.getField(\"b\");\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 3,
            "endColumn": 60
          },
          "rightSideLocation": {
            "container": "package createMetaDataForKnownExplicitMethod() : void",
            "type": "Statement",
            "name": "Field field=clazz.getField(\"b\");\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 3,
            "endColumn": 37
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package createMetaDataForKnownExplicitMethod() : void",
            "type": "Statement",
            "name": "assertThat(processor.createMetadata(field,overrideAnnotation,ResolvableType.forClass(returnType))).isInstanceOf(MethodConventionOverrideMetadata.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 113,
            "endLine": 114,
            "startColumn": 3,
            "endColumn": 59
          },
          "rightSideLocation": {
            "container": "package createMetaDataForKnownExplicitMethod() : void",
            "type": "Statement",
            "name": "assertThat(processor.createMetadata(overrideAnnotation,clazz,field)).isInstanceOf(TestBeanOverrideMetadata.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 114,
            "endLine": 115,
            "startColumn": 3,
            "endColumn": 51
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package createMetaDataForKnownExplicitMethod() : void",
            "type": "Statement",
            "name": "Class<?> returnType=ExampleService.class;\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 107,
            "endLine": 107,
            "startColumn": 3,
            "endColumn": 46
          },
          "rightSideLocation": {
            "container": "package createMetaDataForKnownExplicitMethod() : void",
            "type": "Statement",
            "name": "Class<?> clazz=ExplicitMethodNameConf.class;\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 3,
            "endColumn": 49
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public TestOverrideMetadata(field Field, overrideAnnotation ExampleBeanOverrideAnnotation, typeToOverride ResolvableType)",
            "type": "Statement",
            "name": "super(field,overrideAnnotation,typeToOverride,overrideAnnotation.createIfMissing() ? BeanOverrideStrategy.REPLACE_OR_CREATE_DEFINITION : BeanOverrideStrategy.REPLACE_DEFINITION);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 80,
            "endLine": 81,
            "startColumn": 3,
            "endColumn": 97
          },
          "rightSideLocation": {
            "container": "public TestOverrideMetadata(field Field, overrideAnnotation ExampleBeanOverrideAnnotation, typeToOverride ResolvableType)",
            "type": "Statement",
            "name": "super(field,typeToOverride,overrideAnnotation.createIfMissing() ? BeanOverrideStrategy.REPLACE_OR_CREATE_DEFINITION : BeanOverrideStrategy.REPLACE_DEFINITION);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 82,
            "endLine": 83,
            "startColumn": 3,
            "endColumn": 97
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getEarlyBeanReference(bean Object, beanName String) : Object",
            "type": "Statement",
            "name": "return this.mainProcessor.wrapIfNecessary(bean,beanName);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 362,
            "endLine": 362,
            "startColumn": 4,
            "endColumn": 62
          },
          "rightSideLocation": {
            "container": "public getEarlyBeanReference(bean Object, beanName String) : Object",
            "type": "Statement",
            "name": "return this.overrideRegistrar.wrapIfNecessary(bean,beanName);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java",
            "startLine": 255,
            "endLine": 255,
            "startColumn": 4,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "SpyDefinition that=(SpyDefinition)obj;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 85,
            "endLine": 85,
            "startColumn": 3,
            "endColumn": 44
          },
          "rightSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "MockitoSpyBeanMetadata that=(MockitoSpyBeanMetadata)obj;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 79,
            "endLine": 79,
            "startColumn": 3,
            "endColumn": 62
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "return (super.equals(obj) && ObjectUtils.nullSafeEquals(typeToOverride(),that.typeToOverride()));\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 3,
            "endColumn": 101
          },
          "rightSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "return (super.equals(obj) && ObjectUtils.nullSafeEquals(getBeanType(),that.getBeanType()));\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 80,
            "endLine": 80,
            "startColumn": 3,
            "endColumn": 95
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package inject(field Field, target Object, overrideMetadata OverrideMetadata) : void",
            "type": "Statement",
            "name": "inject(field,target,beanName);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 273,
            "endLine": 273,
            "startColumn": 3,
            "endColumn": 35
          },
          "rightSideLocation": {
            "container": "package inject(target Object, overrideMetadata OverrideMetadata) : void",
            "type": "Statement",
            "name": "inject(overrideMetadata.getField(),target,beanName);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 3,
            "endColumn": 57
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "boolean result=ObjectUtils.nullSafeEquals(this.name,other.name);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 3,
            "endColumn": 70
          },
          "rightSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "boolean result=super.equals(obj);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 3,
            "endColumn": 38
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "Definition other=(Definition)obj;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 107,
            "endLine": 107,
            "startColumn": 3,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "MockitoMetadata other=(MockitoMetadata)obj;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 3,
            "endColumn": 49
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected getExpectedBeanName() : String",
            "type": "Statement",
            "name": "return super.getExpectedBeanName();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 3,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "protected getBeanName() : String",
            "type": "Statement",
            "name": "return super.getBeanName();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 3,
            "endColumn": 30
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setBeanFactory(beanFactory BeanFactory) : void",
            "type": "Statement",
            "name": "this.beanFactory=(ConfigurableListableBeanFactory)beanFactory;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 3,
            "endColumn": 68
          },
          "rightSideLocation": {
            "container": "public setBeanFactory(beanFactory BeanFactory) : void",
            "type": "Statement",
            "name": "this.beanFactory=(ConfigurableBeanFactory)beanFactory;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 82,
            "endLine": 82,
            "startColumn": 3,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package ConcreteOverrideMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType, strategy BeanOverrideStrategy)",
            "type": "Statement",
            "name": "super(field,overrideAnnotation,typeToOverride,strategy);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 60,
            "endLine": 60,
            "startColumn": 4,
            "endColumn": 63
          },
          "rightSideLocation": {
            "container": "package ConcreteOverrideMetadata(field Field, typeToOverride ResolvableType, strategy BeanOverrideStrategy)",
            "type": "Statement",
            "name": "super(field,typeToOverride,strategy);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/OverrideMetadataTests.java",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 4,
            "endColumn": 43
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package MockDefinition(annotation MockitoBean, field Field, typeToMock ResolvableType)",
            "type": "Statement",
            "name": "this(annotation.name(),annotation.reset(),field,annotation,typeToMock,annotation.extraInterfaces(),annotation.answers(),annotation.serializable());\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 57,
            "endLine": 58,
            "startColumn": 3,
            "endColumn": 84
          },
          "rightSideLocation": {
            "container": "package MockitoBeanMetadata(annotation MockitoBean, field Field, typeToMock ResolvableType)",
            "type": "Statement",
            "name": "this(annotation.name(),annotation.reset(),field,typeToMock,annotation.extraInterfaces(),annotation.answers(),annotation.serializable());\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 57,
            "endLine": 58,
            "startColumn": 3,
            "endColumn": 84
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package BeanOverrideContextCustomizer(metadata Set<OverrideMetadata>)",
            "type": "Statement",
            "name": "this.metadata=metadata;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 75,
            "endLine": 75,
            "startColumn": 4,
            "endColumn": 29
          },
          "rightSideLocation": {
            "container": "package BeanOverrideContextCustomizer(detectedClasses Set<Class<?>>)",
            "type": "Statement",
            "name": "this.detectedClasses=detectedClasses;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 70,
            "endLine": 70,
            "startColumn": 4,
            "endColumn": 43
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "MockDefinition other=(MockDefinition)obj;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 3,
            "endColumn": 47
          },
          "rightSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "MockitoBeanMetadata other=(MockitoBeanMetadata)obj;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 3,
            "endColumn": 57
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package createMock(name String) : T",
            "type": "Statement",
            "name": "return (T)mock(typeToOverride().resolve(),settings);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 170,
            "endLine": 170,
            "startColumn": 3,
            "endColumn": 57
          },
          "rightSideLocation": {
            "container": "package createMock(name String) : T",
            "type": "Statement",
            "name": "return (T)mock(getBeanType().resolve(),settings);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 3,
            "endColumn": 54
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package Definition(name String, reset MockReset, proxyTargetAware boolean, field Field, annotation Annotation, typeToOverride ResolvableType, strategy BeanOverrideStrategy)",
            "type": "Statement",
            "name": "super(field,annotation,typeToOverride,strategy);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 52,
            "endLine": 52,
            "startColumn": 3,
            "endColumn": 54
          },
          "rightSideLocation": {
            "container": "package MockitoMetadata(name String, reset MockReset, proxyTargetAware boolean, field Field, typeToOverride ResolvableType, strategy BeanOverrideStrategy)",
            "type": "Statement",
            "name": "super(field,typeToOverride,strategy);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 49,
            "endLine": 49,
            "startColumn": 3,
            "endColumn": 42
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package createSpy(name String, instance Object) : T",
            "type": "Statement",
            "name": "Class<?> resolvedTypeToOverride=typeToOverride().resolve();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 112,
            "endLine": 112,
            "startColumn": 3,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "package createSpy(name String, instance Object) : T",
            "type": "Statement",
            "name": "Class<?> resolvedTypeToOverride=getBeanType().resolve();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 100,
            "endLine": 100,
            "startColumn": 3,
            "endColumn": 61
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package createSpy(name String, instance Object) : T",
            "type": "Statement",
            "name": "toSpy=typeToOverride().toClass();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 128,
            "endLine": 128,
            "startColumn": 4,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "package createSpy(name String, instance Object) : T",
            "type": "Statement",
            "name": "toSpy=getBeanType().toClass();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 4,
            "endColumn": 36
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package rejectsMultipleAnnotationsOnSameElement() : void",
            "type": "Statement",
            "name": "assertThatRuntimeException().isThrownBy(() -> parser.parse(MultipleAnnotationsOnField.class)).withMessage(\"Multiple @BeanOverride annotations found on field: \" + field);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 64,
            "endLine": 66,
            "startColumn": 3,
            "endColumn": 81
          },
          "rightSideLocation": {
            "container": "package rejectsMultipleAnnotationsOnSameElement() : void",
            "type": "Statement",
            "name": "assertThatRuntimeException().isThrownBy(() -> BeanOverrideParsingUtils.parse(MultipleAnnotationsOnField.class)).withMessage(\"Multiple @BeanOverride annotations found on field: \" + field);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 58,
            "endLine": 60,
            "startColumn": 3,
            "endColumn": 81
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package cannotReplaceIfNoBeanMatching() : void",
            "type": "Statement",
            "name": "assertThatIllegalStateException().isThrownBy(context::refresh).withMessage(\"Unable to override test bean; expected a bean definition to replace with name 'explicit'\");\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 81,
            "endLine": 83,
            "startColumn": 3,
            "endColumn": 110
          },
          "rightSideLocation": {
            "container": "package cannotReplaceIfNoBeanMatching() : void",
            "type": "Statement",
            "name": "assertThatIllegalStateException().isThrownBy(context::refresh).withMessage(\"Unable to override bean 'explicit'; \" + \"there is no bean definition to replace with that name\");\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 76,
            "endLine": 79,
            "startColumn": 3,
            "endColumn": 64
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private inject(field Field, target Object, beanName String) : void",
            "type": "Statement",
            "name": "Assert.state(this.beanFactory != null,\"ConfigurableListableBeanFactory must not be null\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 280,
            "endLine": 280,
            "startColumn": 4,
            "endColumn": 95
          },
          "rightSideLocation": {
            "container": "private inject(field Field, target Object, beanName String) : void",
            "type": "Statement",
            "name": "Assert.state(this.beanFactory != null,\"beanFactory must not be null\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 160,
            "endLine": 160,
            "startColumn": 4,
            "endColumn": 75
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected getExpectedBeanName() : String",
            "type": "Statement",
            "name": "return super.getExpectedBeanName();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 3,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "protected getBeanName() : String",
            "type": "Statement",
            "name": "return super.getBeanName();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 3,
            "endColumn": 30
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected OverrideMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType, strategy BeanOverrideStrategy)",
            "type": "Statement",
            "name": "this.typeToOverride=typeToOverride;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 51,
            "endLine": 51,
            "startColumn": 3,
            "endColumn": 40
          },
          "rightSideLocation": {
            "container": "protected OverrideMetadata(field Field, beanType ResolvableType, strategy BeanOverrideStrategy)",
            "type": "Statement",
            "name": "this.beanType=beanType;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 3,
            "endColumn": 28
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected wrapIfNecessary(bean Object, beanName String) : Object",
            "type": "Statement",
            "name": "if(metadata != null && metadata.getBeanOverrideStrategy() == BeanOverrideStrategy.WRAP_EARLY_BEAN)",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 224,
            "endLine": 228,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "package wrapIfNecessary(bean Object, beanName String) : Object",
            "type": "Statement",
            "name": "if(metadata != null && metadata.getStrategy() == BeanOverrideStrategy.WRAP_BEAN)",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 92,
            "endLine": 96,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected wrapIfNecessary(bean Object, beanName String) : Object",
            "type": "Statement",
            "name": "Assert.state(this.beanFactory != null,\"ConfigurableListableBeanFactory must not be null\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 4,
            "endColumn": 95
          },
          "rightSideLocation": {
            "container": "package wrapIfNecessary(bean Object, beanName String) : Object",
            "type": "Statement",
            "name": "Assert.state(this.beanFactory != null,\"ConfigurableBeanFactory must not be null\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 4,
            "endColumn": 87
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package SpyDefinition(spyAnnotation MockitoSpyBean, field Field, typeToSpy ResolvableType)",
            "type": "Statement",
            "name": "this(spyAnnotation.name(),spyAnnotation.reset(),spyAnnotation.proxyTargetAware(),field,spyAnnotation,typeToSpy);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 50,
            "endLine": 51,
            "startColumn": 3,
            "endColumn": 31
          },
          "rightSideLocation": {
            "container": "package MockitoSpyBeanMetadata(spyAnnotation MockitoSpyBean, field Field, typeToSpy ResolvableType)",
            "type": "Statement",
            "name": "this(spyAnnotation.name(),spyAnnotation.reset(),spyAnnotation.proxyTargetAware(),field,typeToSpy);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 50,
            "endLine": 51,
            "startColumn": 3,
            "endColumn": 23
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private getOrAddInfrastructureBeanDefinition(registry BeanDefinitionRegistry, clazz Class<?>, beanName String, constructorArgumentsConsumer Consumer<ConstructorArgumentValues>) : BeanDefinition",
            "type": "Statement",
            "name": "registry.registerBeanDefinition(beanName,definition);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 330,
            "endLine": 330,
            "startColumn": 4,
            "endColumn": 58
          },
          "rightSideLocation": {
            "container": "public register(registry BeanDefinitionRegistry, detectedTestClasses Set<Class<?>>) : void",
            "type": "Statement",
            "name": "registry.registerBeanDefinition(INFRASTRUCTURE_BEAN_NAME,definition);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 4,
            "endColumn": 74
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private getOrAddInfrastructureBeanDefinition(registry BeanDefinitionRegistry, clazz Class<?>, beanName String, constructorArgumentsConsumer Consumer<ConstructorArgumentValues>) : BeanDefinition",
            "type": "Statement",
            "name": "if(!registry.containsBeanDefinition(beanName))",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 325,
            "endLine": 332,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "public register(registry BeanDefinitionRegistry, detectedTestClasses Set<Class<?>>) : void",
            "type": "Statement",
            "name": "if(!registry.containsBeanDefinition(BeanOverrideRegistrar.INFRASTRUCTURE_BEAN_NAME))",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 129,
            "endLine": 138,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public postProcessAfterInitialization(bean Object, beanName String) : Object",
            "type": "Statement",
            "name": "return this.mainProcessor.wrapIfNecessary(bean,beanName);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 371,
            "endLine": 371,
            "startColumn": 5,
            "endColumn": 63
          },
          "rightSideLocation": {
            "container": "public postProcessAfterInitialization(bean Object, beanName String) : Object",
            "type": "Statement",
            "name": "return this.overrideRegistrar.wrapIfNecessary(bean,beanName);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java",
            "startLine": 264,
            "endLine": 264,
            "startColumn": 5,
            "endColumn": 67
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public toString() : String",
            "type": "Statement",
            "name": "return new ToStringCreator(this).append(\"name\",this.name).append(\"typeToSpy\",typeToOverride()).append(\"reset\",getReset()).toString();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 98,
            "endLine": 102,
            "startColumn": 3,
            "endColumn": 17
          },
          "rightSideLocation": {
            "container": "public toString() : String",
            "type": "Statement",
            "name": "return new ToStringCreator(this).append(\"beanName\",getBeanName()).append(\"beanType\",getBeanType()).append(\"reset\",getReset()).toString();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 90,
            "endLine": 94,
            "startColumn": 3,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private postProcessFields(testContext TestContext, consumer BiConsumer<TestContextOverrideMetadata,BeanOverrideBeanPostProcessor>) : void",
            "type": "Statement",
            "name": "consumer.accept(new TestContextOverrideMetadata(testInstance,metadata),postProcessor);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 5,
            "endColumn": 93
          },
          "rightSideLocation": {
            "container": "private postProcessFields(testContext TestContext, consumer BiConsumer<TestContextOverrideMetadata,BeanOverrideRegistrar>) : void",
            "type": "Statement",
            "name": "consumer.accept(new TestContextOverrideMetadata(testInstance,metadata),registrar);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 5,
            "endColumn": 89
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private postProcessFields(testContext TestContext, consumer BiConsumer<TestContextOverrideMetadata,BeanOverrideBeanPostProcessor>) : void",
            "type": "Statement",
            "name": "if(!metadata.field().getDeclaringClass().equals(testClass))",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 103,
            "endLine": 105,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "private postProcessFields(testContext TestContext, consumer BiConsumer<TestContextOverrideMetadata,BeanOverrideRegistrar>) : void",
            "type": "Statement",
            "name": "if(!metadata.getField().getDeclaringClass().isAssignableFrom(testClass))",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 100,
            "endLine": 102,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private postProcessFields(testContext TestContext, consumer BiConsumer<TestContextOverrideMetadata,BeanOverrideBeanPostProcessor>) : void",
            "type": "Statement",
            "name": "for(metadata: postProcessor.getOverrideMetadata())",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 102,
            "endLine": 107,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "container": "private postProcessFields(testContext TestContext, consumer BiConsumer<TestContextOverrideMetadata,BeanOverrideRegistrar>) : void",
            "type": "Statement",
            "name": "for(metadata: registrar.getOverrideMetadata())",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 99,
            "endLine": 104,
            "startColumn": 4,
            "endColumn": 5
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private postProcessFields(testContext TestContext, consumer BiConsumer<TestContextOverrideMetadata,BeanOverrideBeanPostProcessor>) : void",
            "type": "Statement",
            "name": "BeanOverrideBeanPostProcessor postProcessor=testContext.getApplicationContext().getBean(BeanOverrideBeanPostProcessor.class);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 99,
            "endLine": 100,
            "startColumn": 4,
            "endColumn": 87
          },
          "rightSideLocation": {
            "container": "private postProcessFields(testContext TestContext, consumer BiConsumer<TestContextOverrideMetadata,BeanOverrideRegistrar>) : void",
            "type": "Statement",
            "name": "BeanOverrideRegistrar registrar=testContext.getApplicationContext().getBean(BeanOverrideRegistrar.class);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 97,
            "endLine": 98,
            "startColumn": 4,
            "endColumn": 79
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private postProcessFields(testContext TestContext, consumer BiConsumer<TestContextOverrideMetadata,BeanOverrideBeanPostProcessor>) : void",
            "type": "Statement",
            "name": "if(parser.hasBeanOverride(testClass))",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 98,
            "endLine": 108,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "private postProcessFields(testContext TestContext, consumer BiConsumer<TestContextOverrideMetadata,BeanOverrideRegistrar>) : void",
            "type": "Statement",
            "name": "if(BeanOverrideParsingUtils.hasBeanOverride(testClass))",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideTestExecutionListener.java",
            "startLine": 96,
            "endLine": 105,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package createMetaDataWithDeferredCheckForExistenceOfConventionBasedFactoryMethod() : void",
            "type": "Statement",
            "name": "Field field=MethodConventionConf.class.getField(\"field\");\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 3,
            "endColumn": 62
          },
          "rightSideLocation": {
            "container": "package createMetaDataForConventionBasedFactoryMethod() : void",
            "type": "Statement",
            "name": "Field field=clazz.getField(\"field\");\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 3,
            "endColumn": 41
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package TestOverrideMetadata()",
            "type": "Statement",
            "name": "this.beanName=null;\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 3,
            "endColumn": 24
          },
          "rightSideLocation": {
            "container": "package TestOverrideMetadata(duplicateTrigger String)",
            "type": "Statement",
            "name": "this.beanName=duplicateTrigger;\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 3,
            "endColumn": 36
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package TestOverrideMetadata()",
            "type": "Statement",
            "name": "super(null,null,null,null);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 88,
            "endLine": 88,
            "startColumn": 3,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "package TestOverrideMetadata(duplicateTrigger String)",
            "type": "Statement",
            "name": "super(null,null,null);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/TestOverrideMetadata.java",
            "startLine": 91,
            "endLine": 91,
            "startColumn": 3,
            "endColumn": 27
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToMock ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "return new SpyDefinition(spyBean,field,typeToMock);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideProcessor.java",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 4,
            "endColumn": 57
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : MockitoMetadata",
            "type": "Statement",
            "name": "return new MockitoSpyBeanMetadata(spyBean,field,ResolvableType.forField(field,testClass));\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideProcessor.java",
            "startLine": 40,
            "endLine": 40,
            "startColumn": 4,
            "endColumn": 97
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToMock ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "return new MockDefinition(mockBean,field,typeToMock);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideProcessor.java",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 4,
            "endColumn": 59
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : MockitoMetadata",
            "type": "Statement",
            "name": "return new MockitoBeanMetadata(mockBean,field,ResolvableType.forField(field,testClass));\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideProcessor.java",
            "startLine": 37,
            "endLine": 37,
            "startColumn": 4,
            "endColumn": 95
          },
          "validation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.MethodConventionOverrideMetadata",
            "type": "Method",
            "name": "MethodConventionOverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 119,
            "endLine": 125,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.TestBeanOverrideMetadata",
            "type": "Method",
            "name": "TestBeanOverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 143,
            "endLine": 150,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Field",
            "name": "typeToOverride",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 41,
            "endLine": 41,
            "startColumn": 31,
            "endColumn": 45
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Field",
            "name": "beanType",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 47,
            "endLine": 47,
            "startColumn": 31,
            "endColumn": 39
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor",
            "type": "Method",
            "name": "getOrAddInfrastructureBeanDefinition",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 322,
            "endLine": 334,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideRegistrar",
            "type": "Method",
            "name": "register",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 116,
            "endLine": 147,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Method",
            "name": "MockDefinition",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 61,
            "endLine": 69,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Method",
            "name": "MockitoBeanMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 61,
            "endLine": 69,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.MethodConventionOverrideMetadata",
            "type": "Field",
            "name": "beanName",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 24,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.TestBeanOverrideMetadata",
            "type": "Field",
            "name": "beanName",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 141,
            "endLine": 141,
            "startColumn": 24,
            "endColumn": 32
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.MethodConventionOverrideMetadata",
            "type": "Field",
            "name": "overrideMethod",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 24,
            "endColumn": 38
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.TestBeanOverrideMetadata",
            "type": "Field",
            "name": "overrideMethod",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 139,
            "endLine": 139,
            "startColumn": 24,
            "endColumn": 38
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory",
            "type": "Method",
            "name": "parseMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 54,
            "endLine": 59,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideContextCustomizerFactory",
            "type": "Method",
            "name": "findClassesWithBeanOverride",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 56,
            "endLine": 63,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParser",
            "type": "Method",
            "name": "parse",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 55,
            "endLine": 66,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessorTests",
            "type": "Method",
            "name": "createContext",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 178,
            "endLine": 183,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor",
            "type": "Method",
            "name": "createMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 90,
            "endLine": 108,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor",
            "type": "Method",
            "name": "createMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 106,
            "endLine": 134,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.SpyDefinition",
            "type": "Method",
            "name": "SpyDefinition",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 54,
            "endLine": 59,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoSpyBeanMetadata",
            "type": "Method",
            "name": "MockitoSpyBeanMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 54,
            "endLine": 58,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.MethodConventionOverrideMetadata",
            "type": "Class",
            "name": "MethodConventionOverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 111,
            "endLine": 160,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.TestBeanOverrideMetadata",
            "type": "Class",
            "name": "TestBeanOverrideMetadata",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 137,
            "endLine": 191,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.MethodConventionOverrideMetadata",
            "type": "Method",
            "name": "getExpectedBeanName",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 127,
            "endLine": 133,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.convention.TestBeanOverrideProcessor.TestBeanOverrideMetadata",
            "type": "Method",
            "name": "getBeanName",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 152,
            "endLine": 155,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package getAnswer() : Answers",
            "type": "Statement",
            "name": "return this.answer;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 3,
            "endColumn": 22
          },
          "rightSideLocation": {
            "container": "package getAnswer() : Answers",
            "type": "Statement",
            "name": "return this.answer;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 3,
            "endColumn": 22
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public MethodConventionOverrideMetadata(field Field, overrideMethod Method, beanName String, overrideAnnotation Annotation, typeToOverride ResolvableType)",
            "type": "Statement",
            "name": "this.overrideMethod=overrideMethod;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 123,
            "endLine": 123,
            "startColumn": 4,
            "endColumn": 41
          },
          "rightSideLocation": {
            "container": "public TestBeanOverrideMetadata(field Field, overrideMethod Method, overrideAnnotation TestBean, typeToOverride ResolvableType)",
            "type": "Statement",
            "name": "this.overrideMethod=overrideMethod;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 149,
            "endLine": 149,
            "startColumn": 4,
            "endColumn": 41
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public MethodConventionOverrideMetadata(field Field, overrideMethod Method, beanName String, overrideAnnotation Annotation, typeToOverride ResolvableType)",
            "type": "Statement",
            "name": "this.beanName=beanName;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 124,
            "endLine": 124,
            "startColumn": 4,
            "endColumn": 29
          },
          "rightSideLocation": {
            "container": "public TestBeanOverrideMetadata(field Field, overrideMethod Method, overrideAnnotation TestBean, typeToOverride ResolvableType)",
            "type": "Statement",
            "name": "this.beanName=StringUtils.hasText(overrideAnnotation.name()) ? overrideAnnotation.name() : field.getName();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 147,
            "endLine": 148,
            "startColumn": 4,
            "endColumn": 50
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public MethodConventionOverrideMetadata(field Field, overrideMethod Method, beanName String, overrideAnnotation Annotation, typeToOverride ResolvableType)",
            "type": "Statement",
            "name": "super(field,overrideAnnotation,typeToOverride,BeanOverrideStrategy.REPLACE_DEFINITION);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 4,
            "endColumn": 94
          },
          "rightSideLocation": {
            "container": "public TestBeanOverrideMetadata(field Field, overrideMethod Method, overrideAnnotation TestBean, typeToOverride ResolvableType)",
            "type": "Statement",
            "name": "super(field,typeToOverride,BeanOverrideStrategy.REPLACE_DEFINITION);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 146,
            "endLine": 146,
            "startColumn": 4,
            "endColumn": 74
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canOverrideBeanProducedByFactoryBeanWithClassObjectTypeAttribute() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "package canOverrideBeanProducedByFactoryBeanWithClassObjectTypeAttribute() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=createContext(OverriddenFactoryBean.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 109,
            "endLine": 109,
            "startColumn": 3,
            "endColumn": 91
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package hasBeanOverride(testClass Class<?>) : boolean",
            "type": "Statement",
            "name": "if(hasBeanOverride.get())",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 83,
            "endLine": 85,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "container": "package hasBeanOverride(clazz Class<?>) : boolean",
            "type": "Statement",
            "name": "if(hasBeanOverride.get())",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 55,
            "endLine": 57,
            "startColumn": 4,
            "endColumn": 5
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package hasBeanOverride(testClass Class<?>) : boolean",
            "type": "Statement",
            "name": "return;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 5,
            "endColumn": 12
          },
          "rightSideLocation": {
            "container": "package hasBeanOverride(clazz Class<?>) : boolean",
            "type": "Statement",
            "name": "return;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 5,
            "endColumn": 12
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package hasBeanOverride(testClass Class<?>) : boolean",
            "type": "Statement",
            "name": "boolean present=MergedAnnotations.from(field,DIRECT).isPresent(BeanOverride.class);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 86,
            "endLine": 86,
            "startColumn": 4,
            "endColumn": 90
          },
          "rightSideLocation": {
            "container": "package hasBeanOverride(clazz Class<?>) : boolean",
            "type": "Statement",
            "name": "boolean present=MergedAnnotations.from(field,DIRECT).isPresent(BeanOverride.class);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 58,
            "endLine": 58,
            "startColumn": 4,
            "endColumn": 90
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package hasBeanOverride(testClass Class<?>) : boolean",
            "type": "Statement",
            "name": "hasBeanOverride.compareAndSet(false,present);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 4,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "package hasBeanOverride(clazz Class<?>) : boolean",
            "type": "Statement",
            "name": "hasBeanOverride.compareAndSet(false,present);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 4,
            "endColumn": 50
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package hasBeanOverride(testClass Class<?>) : boolean",
            "type": "Statement",
            "name": "AtomicBoolean hasBeanOverride=new AtomicBoolean();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 3,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "package hasBeanOverride(clazz Class<?>) : boolean",
            "type": "Statement",
            "name": "AtomicBoolean hasBeanOverride=new AtomicBoolean();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 53,
            "endLine": 53,
            "startColumn": 3,
            "endColumn": 55
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package hasBeanOverride(testClass Class<?>) : boolean",
            "type": "Statement",
            "name": "ReflectionUtils.doWithFields(testClass,field -> {\n  if (hasBeanOverride.get()) {\n    return;\n  }\n  boolean present=MergedAnnotations.from(field,DIRECT).isPresent(BeanOverride.class);\n  hasBeanOverride.compareAndSet(false,present);\n}\n);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 82,
            "endLine": 88,
            "startColumn": 3,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "package hasBeanOverride(clazz Class<?>) : boolean",
            "type": "Statement",
            "name": "ReflectionUtils.doWithFields(clazz,field -> {\n  if (hasBeanOverride.get()) {\n    return;\n  }\n  boolean present=MergedAnnotations.from(field,DIRECT).isPresent(BeanOverride.class);\n  hasBeanOverride.compareAndSet(false,present);\n}\n);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 54,
            "endLine": 60,
            "startColumn": 3,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package createMetaDataWithDeferredCheckForExistenceOfConventionBasedFactoryMethod() : void",
            "type": "Statement",
            "name": "assertThat(processor.createMetadata(field,overrideAnnotation,ResolvableType.forClass(returnType))).isInstanceOf(MethodConventionOverrideMetadata.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 128,
            "endLine": 129,
            "startColumn": 3,
            "endColumn": 59
          },
          "rightSideLocation": {
            "container": "package createMetaDataForConventionBasedFactoryMethod() : void",
            "type": "Statement",
            "name": "assertThatIllegalStateException().isThrownBy(() -> processor.createMetadata(overrideAnnotation,clazz,field)).withMessage(\"\"\"\n\t\t\t\t\t\tFailed to find a static test bean factory method in %s with return type %s \\\n\t\t\t\t\t\twhose name matches one of the supported candidates %s\"\"\",clazz.getName(),returnType.getName(),List.of(\"someFieldTestOverride\",\"fieldTestOverride\"));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessorTests.java",
            "startLine": 127,
            "endLine": 132,
            "startColumn": 3,
            "endColumn": 101
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private getOrAddInfrastructureBeanDefinition(registry BeanDefinitionRegistry, clazz Class<?>, beanName String, constructorArgumentsConsumer Consumer<ConstructorArgumentValues>) : BeanDefinition",
            "type": "Statement",
            "name": "constructorArgumentsConsumer.accept(constructorArguments);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 329,
            "endLine": 329,
            "startColumn": 4,
            "endColumn": 62
          },
          "rightSideLocation": {
            "container": "public register(registry BeanDefinitionRegistry, detectedTestClasses Set<Class<?>>) : void",
            "type": "Statement",
            "name": "constructorArguments.addIndexedArgumentValue(0,new LinkedHashSet<Class<?>>());\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideRegistrar.java",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 4,
            "endColumn": 83
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package MockDefinition(name String, reset MockReset, field Field, annotation Annotation, typeToMock ResolvableType, extraInterfaces Class<?>[], answer Answers, serializable boolean)",
            "type": "Statement",
            "name": "Assert.notNull(typeToMock,\"TypeToMock must not be null\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 65,
            "endLine": 65,
            "startColumn": 3,
            "endColumn": 61
          },
          "rightSideLocation": {
            "container": "package MockitoBeanMetadata(name String, reset MockReset, field Field, typeToMock ResolvableType, extraInterfaces Class<?>[], answer Answers, serializable boolean)",
            "type": "Statement",
            "name": "Assert.notNull(typeToMock,\"TypeToMock must not be null\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 65,
            "endLine": 65,
            "startColumn": 3,
            "endColumn": 61
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package MockDefinition(name String, reset MockReset, field Field, annotation Annotation, typeToMock ResolvableType, extraInterfaces Class<?>[], answer Answers, serializable boolean)",
            "type": "Statement",
            "name": "this.extraInterfaces=asClassSet(extraInterfaces);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 66,
            "endLine": 66,
            "startColumn": 3,
            "endColumn": 54
          },
          "rightSideLocation": {
            "container": "package MockitoBeanMetadata(name String, reset MockReset, field Field, typeToMock ResolvableType, extraInterfaces Class<?>[], answer Answers, serializable boolean)",
            "type": "Statement",
            "name": "this.extraInterfaces=asClassSet(extraInterfaces);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 66,
            "endLine": 66,
            "startColumn": 3,
            "endColumn": 54
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package MockDefinition(name String, reset MockReset, field Field, annotation Annotation, typeToMock ResolvableType, extraInterfaces Class<?>[], answer Answers, serializable boolean)",
            "type": "Statement",
            "name": "this.answer=(answer != null) ? answer : Answers.RETURNS_DEFAULTS;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 3,
            "endColumn": 70
          },
          "rightSideLocation": {
            "container": "package MockitoBeanMetadata(name String, reset MockReset, field Field, typeToMock ResolvableType, extraInterfaces Class<?>[], answer Answers, serializable boolean)",
            "type": "Statement",
            "name": "this.answer=(answer != null) ? answer : Answers.RETURNS_DEFAULTS;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 67,
            "endLine": 67,
            "startColumn": 3,
            "endColumn": 70
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package MockDefinition(name String, reset MockReset, field Field, annotation Annotation, typeToMock ResolvableType, extraInterfaces Class<?>[], answer Answers, serializable boolean)",
            "type": "Statement",
            "name": "this.serializable=serializable;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 68,
            "endLine": 68,
            "startColumn": 3,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "package MockitoBeanMetadata(name String, reset MockReset, field Field, typeToMock ResolvableType, extraInterfaces Class<?>[], answer Answers, serializable boolean)",
            "type": "Statement",
            "name": "this.serializable=serializable;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 68,
            "endLine": 68,
            "startColumn": 3,
            "endColumn": 36
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package MockDefinition(name String, reset MockReset, field Field, annotation Annotation, typeToMock ResolvableType, extraInterfaces Class<?>[], answer Answers, serializable boolean)",
            "type": "Statement",
            "name": "super(name,reset,false,field,annotation,typeToMock,BeanOverrideStrategy.REPLACE_OR_CREATE_DEFINITION);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 3,
            "endColumn": 111
          },
          "rightSideLocation": {
            "container": "package MockitoBeanMetadata(name String, reset MockReset, field Field, typeToMock ResolvableType, extraInterfaces Class<?>[], answer Answers, serializable boolean)",
            "type": "Statement",
            "name": "super(name,reset,false,field,typeToMock,BeanOverrideStrategy.REPLACE_OR_CREATE_DEFINITION);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 64,
            "endLine": 64,
            "startColumn": 3,
            "endColumn": 99
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "if(annotation.value().equals(DUPLICATE_TRIGGER))",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideProcessor.java",
            "startLine": 43,
            "endLine": 45,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : OverrideMetadata",
            "type": "Statement",
            "name": "if(annotation.value().startsWith(ExampleBeanOverrideAnnotation.DUPLICATE_TRIGGER))",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideProcessor.java",
            "startLine": 34,
            "endLine": 36,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "return new TestOverrideMetadata(field,annotation,typeToOverride);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideProcessor.java",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 3,
            "endColumn": 70
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : OverrideMetadata",
            "type": "Statement",
            "name": "return new TestOverrideMetadata(field,annotation,ResolvableType.forField(field,testClass));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideProcessor.java",
            "startLine": 37,
            "endLine": 37,
            "startColumn": 3,
            "endColumn": 97
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canOverrideBeanProducedByFactoryBeanWithResolvableTypeObjectTypeAttribute() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "package canOverrideBeanProducedByFactoryBeanWithResolvableTypeObjectTypeAttribute() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=createContext(OverriddenFactoryBean.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 122,
            "endLine": 122,
            "startColumn": 3,
            "endColumn": 91
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canReplaceExistingBeanDefinitions() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "package canReplaceExistingBeanDefinitions() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=createContext(ReplaceBeans.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 59,
            "endLine": 59,
            "startColumn": 3,
            "endColumn": 82
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canReplaceExistingBeanDefinitionsWithCreateReplaceStrategy() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "package canReplaceExistingBeanDefinitionsWithCreateReplaceStrategy() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=createContext(CreateIfOriginalIsMissingBean.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 84,
            "endLine": 84,
            "startColumn": 3,
            "endColumn": 99
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseMetadata(testClass Class<?>, parser BeanOverrideParser) : void",
            "type": "Statement",
            "name": "if(TestContextAnnotationUtils.searchEnclosingClass(testClass))",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 56,
            "endLine": 58,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "private findClassesWithBeanOverride(testClass Class<?>, detectedClasses Set<Class<?>>) : void",
            "type": "Statement",
            "name": "if(TestContextAnnotationUtils.searchEnclosingClass(testClass))",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 60,
            "endLine": 62,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseMetadata(testClass Class<?>, parser BeanOverrideParser) : void",
            "type": "Statement",
            "name": "parseMetadata(testClass.getEnclosingClass(),parser);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 4,
            "endColumn": 57
          },
          "rightSideLocation": {
            "container": "private findClassesWithBeanOverride(testClass Class<?>, detectedClasses Set<Class<?>>) : void",
            "type": "Statement",
            "name": "findClassesWithBeanOverride(testClass.getEnclosingClass(),detectedClasses);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 4,
            "endColumn": 80
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected createOverride(beanName String, existingBeanDefinition BeanDefinition, existingBeanInstance Object) : Object",
            "type": "Statement",
            "name": "try",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 151,
            "endLine": 158,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "container": "protected createOverride(beanName String, existingBeanDefinition BeanDefinition, existingBeanInstance Object) : Object",
            "type": "Statement",
            "name": "try",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 161,
            "endLine": 168,
            "startColumn": 4,
            "endColumn": 5
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected createOverride(beanName String, existingBeanDefinition BeanDefinition, existingBeanInstance Object) : Object",
            "type": "Statement",
            "name": "catch(ex)",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 155,
            "endLine": 158,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "container": "protected createOverride(beanName String, existingBeanDefinition BeanDefinition, existingBeanInstance Object) : Object",
            "type": "Statement",
            "name": "catch(ex)",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 165,
            "endLine": 168,
            "startColumn": 4,
            "endColumn": 5
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected createOverride(beanName String, existingBeanDefinition BeanDefinition, existingBeanInstance Object) : Object",
            "type": "Statement",
            "name": "ReflectionUtils.makeAccessible(methodToInvoke);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 152,
            "endLine": 152,
            "startColumn": 5,
            "endColumn": 52
          },
          "rightSideLocation": {
            "container": "protected createOverride(beanName String, existingBeanDefinition BeanDefinition, existingBeanInstance Object) : Object",
            "type": "Statement",
            "name": "ReflectionUtils.makeAccessible(this.overrideMethod);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 162,
            "endLine": 162,
            "startColumn": 5,
            "endColumn": 57
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected createOverride(beanName String, existingBeanDefinition BeanDefinition, existingBeanInstance Object) : Object",
            "type": "Statement",
            "name": "return methodToInvoke.invoke(null);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 5,
            "endColumn": 40
          },
          "rightSideLocation": {
            "container": "protected createOverride(beanName String, existingBeanDefinition BeanDefinition, existingBeanInstance Object) : Object",
            "type": "Statement",
            "name": "return this.overrideMethod.invoke(null);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 163,
            "endLine": 163,
            "startColumn": 5,
            "endColumn": 45
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected createOverride(beanName String, existingBeanDefinition BeanDefinition, existingBeanInstance Object) : Object",
            "type": "Statement",
            "name": "throw new IllegalArgumentException(\"Could not invoke bean overriding method \" + methodToInvoke.getName() + \"; a static method with no formal parameters is expected\",ex);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 156,
            "endLine": 157,
            "startColumn": 5,
            "endColumn": 70
          },
          "rightSideLocation": {
            "container": "protected createOverride(beanName String, existingBeanDefinition BeanDefinition, existingBeanInstance Object) : Object",
            "type": "Statement",
            "name": "throw new IllegalArgumentException(\"Could not invoke bean overriding method \" + this.overrideMethod.getName() + \"; a static method with no formal parameters is expected\",ex);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 166,
            "endLine": 167,
            "startColumn": 5,
            "endColumn": 70
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package copyDefinitionPrimaryAndScope() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 176,
            "endLine": 176,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "package copyDefinitionPrimaryAndScope() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=createContext(SingletonBean.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 160,
            "endLine": 160,
            "startColumn": 3,
            "endColumn": 83
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package postProcessorShouldNotTriggerEarlyInitialization() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 149,
            "endLine": 149,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "package postProcessorShouldNotTriggerEarlyInitialization() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=createContext(EagerInitBean.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 136,
            "endLine": 136,
            "startColumn": 3,
            "endColumn": 83
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "if(!testBeanAnnotation.methodName().isBlank())",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 96,
            "endLine": 99,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : TestBeanOverrideMetadata",
            "type": "Statement",
            "name": "if(!testBeanAnnotation.methodName().isBlank())",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 117,
            "endLine": 131,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "String beanName=null;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 4,
            "endColumn": 27
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : TestBeanOverrideMetadata",
            "type": "Statement",
            "name": "String beanName=testBeanAnnotation.name();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 121,
            "endLine": 121,
            "startColumn": 4,
            "endColumn": 48
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "overrideMethod=findTestBeanFactoryMethod(declaringClass,field.getType(),testBeanAnnotation.methodName());\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 5,
            "endColumn": 114
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : TestBeanOverrideMetadata",
            "type": "Statement",
            "name": "explicitOverrideMethod=findTestBeanFactoryMethod(testClass,field.getType(),testBeanAnnotation.methodName());\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 4,
            "endColumn": 116
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "beanName=testBeanAnnotation.name();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 5,
            "endColumn": 42
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : TestBeanOverrideMetadata",
            "type": "Statement",
            "name": "explicitOverrideMethod=findTestBeanFactoryMethod(testClass,field.getType(),beanName + TestBean.CONVENTION_SUFFIX,field.getName() + TestBean.CONVENTION_SUFFIX);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 127,
            "endLine": 129,
            "startColumn": 5,
            "endColumn": 53
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "if(!testBeanAnnotation.name().isBlank())",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 100,
            "endLine": 102,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : TestBeanOverrideMetadata",
            "type": "Statement",
            "name": "if(!StringUtils.hasText(beanName))",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 122,
            "endLine": 130,
            "startColumn": 4,
            "endColumn": 5
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "if(overrideAnnotation instanceof TestBean testBeanAnnotation)",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 93,
            "endLine": 105,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : TestBeanOverrideMetadata",
            "type": "Statement",
            "name": "if(!testBeanAnnotation.methodName().isBlank())",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 117,
            "endLine": 131,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "Method overrideMethod=null;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 4,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : TestBeanOverrideMetadata",
            "type": "Statement",
            "name": "Method explicitOverrideMethod;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 116,
            "endLine": 116,
            "startColumn": 3,
            "endColumn": 33
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package SpyDefinition(name String, reset MockReset, proxyTargetAware boolean, field Field, annotation Annotation, typeToSpy ResolvableType)",
            "type": "Statement",
            "name": "Assert.notNull(typeToSpy,\"typeToSpy must not be null\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 58,
            "endLine": 58,
            "startColumn": 3,
            "endColumn": 59
          },
          "rightSideLocation": {
            "container": "package MockitoSpyBeanMetadata(name String, reset MockReset, proxyTargetAware boolean, field Field, typeToSpy ResolvableType)",
            "type": "Statement",
            "name": "Assert.notNull(typeToSpy,\"typeToSpy must not be null\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 3,
            "endColumn": 59
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package SpyDefinition(name String, reset MockReset, proxyTargetAware boolean, field Field, annotation Annotation, typeToSpy ResolvableType)",
            "type": "Statement",
            "name": "super(name,reset,proxyTargetAware,field,annotation,typeToSpy,BeanOverrideStrategy.WRAP_EARLY_BEAN);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 57,
            "endLine": 57,
            "startColumn": 3,
            "endColumn": 108
          },
          "rightSideLocation": {
            "container": "package MockitoSpyBeanMetadata(name String, reset MockReset, proxyTargetAware boolean, field Field, typeToSpy ResolvableType)",
            "type": "Statement",
            "name": "super(name,reset,proxyTargetAware,field,typeToSpy,BeanOverrideStrategy.WRAP_BEAN);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 56,
            "endLine": 56,
            "startColumn": 3,
            "endColumn": 90
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canCreateIfOriginalMissingWithCreateReplaceStrategy() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "package canCreateIfOriginalMissingWithCreateReplaceStrategy() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=createContext(CreateIfOriginalIsMissingBean.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 3,
            "endColumn": 99
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseField(field Field, source Class<?>) : void",
            "type": "Statement",
            "name": "AtomicBoolean overrideAnnotationFound=new AtomicBoolean();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 3,
            "endColumn": 63
          },
          "rightSideLocation": {
            "container": "private parseField(field Field, testClass Class<?>, metadataSet Set<OverrideMetadata>) : void",
            "type": "Statement",
            "name": "AtomicBoolean overrideAnnotationFound=new AtomicBoolean();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 87,
            "endLine": 87,
            "startColumn": 3,
            "endColumn": 63
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseField(field Field, source Class<?>) : void",
            "type": "Statement",
            "name": "BeanOverride beanOverride=mergedAnnotation.synthesize();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 98,
            "endLine": 98,
            "startColumn": 4,
            "endColumn": 62
          },
          "rightSideLocation": {
            "container": "private parseField(field Field, testClass Class<?>, metadataSet Set<OverrideMetadata>) : void",
            "type": "Statement",
            "name": "BeanOverride beanOverride=mergedAnnotation.synthesize();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 92,
            "endLine": 92,
            "startColumn": 4,
            "endColumn": 62
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseField(field Field, source Class<?>) : void",
            "type": "Statement",
            "name": "BeanOverrideProcessor processor=BeanUtils.instantiateClass(beanOverride.value());\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 99,
            "endLine": 99,
            "startColumn": 4,
            "endColumn": 87
          },
          "rightSideLocation": {
            "container": "private parseField(field Field, testClass Class<?>, metadataSet Set<OverrideMetadata>) : void",
            "type": "Statement",
            "name": "BeanOverrideProcessor processor=BeanUtils.instantiateClass(beanOverride.value());\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 93,
            "endLine": 93,
            "startColumn": 4,
            "endColumn": 87
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseField(field Field, source Class<?>) : void",
            "type": "Statement",
            "name": "MergedAnnotation<?> metaSource=mergedAnnotation.getMetaSource();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 100,
            "endLine": 100,
            "startColumn": 4,
            "endColumn": 70
          },
          "rightSideLocation": {
            "container": "private parseField(field Field, testClass Class<?>, metadataSet Set<OverrideMetadata>) : void",
            "type": "Statement",
            "name": "MergedAnnotation<?> metaSource=mergedAnnotation.getMetaSource();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 4,
            "endColumn": 70
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseField(field Field, source Class<?>) : void",
            "type": "Statement",
            "name": "Annotation composedAnnotation=metaSource.synthesize();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 102,
            "endLine": 102,
            "startColumn": 4,
            "endColumn": 60
          },
          "rightSideLocation": {
            "container": "private parseField(field Field, testClass Class<?>, metadataSet Set<OverrideMetadata>) : void",
            "type": "Statement",
            "name": "Annotation composedAnnotation=metaSource.synthesize();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 4,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseField(field Field, source Class<?>) : void",
            "type": "Statement",
            "name": "OverrideMetadata metadata=processor.createMetadata(field,composedAnnotation,typeToOverride);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 107,
            "endLine": 107,
            "startColumn": 4,
            "endColumn": 100
          },
          "rightSideLocation": {
            "container": "private parseField(field Field, testClass Class<?>, metadataSet Set<OverrideMetadata>) : void",
            "type": "Statement",
            "name": "OverrideMetadata metadata=processor.createMetadata(composedAnnotation,testClass,field);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 100,
            "endLine": 100,
            "startColumn": 4,
            "endColumn": 95
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseField(field Field, source Class<?>) : void",
            "type": "Statement",
            "name": "Assert.state(mergedAnnotation.isMetaPresent(),\"@BeanOverride annotation must be meta-present\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 96,
            "endLine": 96,
            "startColumn": 4,
            "endColumn": 100
          },
          "rightSideLocation": {
            "container": "private parseField(field Field, testClass Class<?>, metadataSet Set<OverrideMetadata>) : void",
            "type": "Statement",
            "name": "Assert.state(mergedAnnotation.isMetaPresent(),\"@BeanOverride annotation must be meta-present\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 4,
            "endColumn": 100
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseField(field Field, source Class<?>) : void",
            "type": "Statement",
            "name": "Assert.state(metaSource != null,\"Meta-annotation source must not be null\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 4,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "private parseField(field Field, testClass Class<?>, metadataSet Set<OverrideMetadata>) : void",
            "type": "Statement",
            "name": "Assert.state(metaSource != null,\"Meta-annotation source must not be null\");\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 4,
            "endColumn": 80
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseField(field Field, source Class<?>) : void",
            "type": "Statement",
            "name": "Assert.state(overrideAnnotationFound.compareAndSet(false,true),() -> \"Multiple @BeanOverride annotations found on field: \" + field);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 105,
            "endLine": 106,
            "startColumn": 4,
            "endColumn": 75
          },
          "rightSideLocation": {
            "container": "private parseField(field Field, testClass Class<?>, metadataSet Set<OverrideMetadata>) : void",
            "type": "Statement",
            "name": "Assert.state(overrideAnnotationFound.compareAndSet(false,true),() -> \"Multiple @BeanOverride annotations found on field: \" + field);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 98,
            "endLine": 99,
            "startColumn": 4,
            "endColumn": 75
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseField(field Field, source Class<?>) : void",
            "type": "Statement",
            "name": "MergedAnnotations.from(field,DIRECT).stream(BeanOverride.class).forEach(mergedAnnotation -> {\n  Assert.state(mergedAnnotation.isMetaPresent(),\"@BeanOverride annotation must be meta-present\");\n  BeanOverride beanOverride=mergedAnnotation.synthesize();\n  BeanOverrideProcessor processor=BeanUtils.instantiateClass(beanOverride.value());\n  MergedAnnotation<?> metaSource=mergedAnnotation.getMetaSource();\n  Assert.state(metaSource != null,\"Meta-annotation source must not be null\");\n  Annotation composedAnnotation=metaSource.synthesize();\n  ResolvableType typeToOverride=processor.getOrDeduceType(field,composedAnnotation,source);\n  Assert.state(overrideAnnotationFound.compareAndSet(false,true),() -> \"Multiple @BeanOverride annotations found on field: \" + field);\n  OverrideMetadata metadata=processor.createMetadata(field,composedAnnotation,typeToOverride);\n  boolean isNewDefinition=this.parsedMetadata.add(metadata);\n  Assert.state(isNewDefinition,() -> \"Duplicate \" + metadata.getBeanOverrideDescription() + \" OverrideMetadata: \"+ metadata);\n}\n);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 95,
            "endLine": 111,
            "startColumn": 3,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "private parseField(field Field, testClass Class<?>, metadataSet Set<OverrideMetadata>) : void",
            "type": "Statement",
            "name": "MergedAnnotations.from(field,DIRECT).stream(BeanOverride.class).forEach(mergedAnnotation -> {\n  Assert.state(mergedAnnotation.isMetaPresent(),\"@BeanOverride annotation must be meta-present\");\n  BeanOverride beanOverride=mergedAnnotation.synthesize();\n  BeanOverrideProcessor processor=BeanUtils.instantiateClass(beanOverride.value());\n  MergedAnnotation<?> metaSource=mergedAnnotation.getMetaSource();\n  Assert.state(metaSource != null,\"Meta-annotation source must not be null\");\n  Annotation composedAnnotation=metaSource.synthesize();\n  Assert.state(overrideAnnotationFound.compareAndSet(false,true),() -> \"Multiple @BeanOverride annotations found on field: \" + field);\n  OverrideMetadata metadata=processor.createMetadata(composedAnnotation,testClass,field);\n  metadataSet.add(metadata);\n}\n);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 89,
            "endLine": 102,
            "startColumn": 3,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private parseField(field Field, source Class<?>) : void",
            "type": "Statement",
            "name": "Assert.state(isNewDefinition,() -> \"Duplicate \" + metadata.getBeanOverrideDescription() + \" OverrideMetadata: \"+ metadata);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 109,
            "endLine": 110,
            "startColumn": 4,
            "endColumn": 41
          },
          "rightSideLocation": {
            "container": "private parseField(field Field, testClass Class<?>, metadataSet Set<OverrideMetadata>) : void",
            "type": "Statement",
            "name": "metadataSet.add(metadata);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 101,
            "endLine": 101,
            "startColumn": 4,
            "endColumn": 30
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "protected getExpectedBeanName() : String",
            "type": "Statement",
            "name": "return this.beanName;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 5,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "protected getBeanName() : String",
            "type": "Statement",
            "name": "return this.beanName;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/convention/TestBeanOverrideProcessor.java",
            "startLine": 154,
            "endLine": 154,
            "startColumn": 4,
            "endColumn": 25
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package cannotReplaceIfNoBeanMatching() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "package cannotReplaceIfNoBeanMatching() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=createContext(ReplaceBeans.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 72,
            "endLine": 72,
            "startColumn": 3,
            "endColumn": 82
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package allowReplaceDefinitionWhenSingletonDefinitionPresent() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "package allowReplaceDefinitionWhenSingletonDefinitionPresent() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=createContext(SingletonBean.class);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 147,
            "endLine": 147,
            "startColumn": 3,
            "endColumn": 83
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToMock ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "throw new IllegalArgumentException(\"Invalid annotation for MockitoBeanOverrideProcessor: \" + overrideAnnotation.getClass().getName());\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideProcessor.java",
            "startLine": 43,
            "endLine": 44,
            "startColumn": 3,
            "endColumn": 46
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : MockitoMetadata",
            "type": "Statement",
            "name": "throw new IllegalStateException(String.format(\"Invalid annotation passed to MockitoBeanOverrideProcessor: \" + \"expected @MockitoBean/@MockitoSpyBean on field %s.%s\",field.getDeclaringClass().getName(),field.getName()));\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanOverrideProcessor.java",
            "startLine": 42,
            "endLine": 44,
            "startColumn": 3,
            "endColumn": 60
          },
          "validation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "container": "public customizeContext(context ConfigurableApplicationContext, mergedConfig MergedContextConfiguration) : void",
            "type": "Statement",
            "name": "BeanOverrideBeanPostProcessor.register(registry,this.metadata);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 81,
            "endLine": 81,
            "startColumn": 5,
            "endColumn": 69
          },
          "rightSideLocation": {
            "container": "public customizeContext(context ConfigurableApplicationContext, mergedConfig MergedContextConfiguration) : void",
            "type": "Statement",
            "name": "BeanOverrideBeanFactoryPostProcessor.register(registry);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideContextCustomizerFactory.java",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 5,
            "endColumn": 61
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "typeToOverride",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 87,
            "endLine": 92,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.OverrideMetadata",
            "type": "Method",
            "name": "getBeanType",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/OverrideMetadata.java",
            "startLine": 67,
            "endLine": 72,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public createMetadata(field Field, overrideAnnotation Annotation, typeToOverride ResolvableType) : OverrideMetadata",
            "type": "Statement",
            "name": "return new TestOverrideMetadata(field,annotation,typeToOverride);\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideProcessor.java",
            "startLine": 46,
            "endLine": 46,
            "startColumn": 3,
            "endColumn": 70
          },
          "rightSideLocation": {
            "container": "public createMetadata(overrideAnnotation Annotation, testClass Class<?>, field Field) : OverrideMetadata",
            "type": "Statement",
            "name": "return new TestOverrideMetadata(annotation.value());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideProcessor.java",
            "startLine": 35,
            "endLine": 35,
            "startColumn": 4,
            "endColumn": 56
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.SpyDefinition",
            "type": "Method",
            "name": "hashCode",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/SpyDefinition.java",
            "startLine": 89,
            "endLine": 94,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoSpyBeanMetadata",
            "type": "Method",
            "name": "hashCode",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoSpyBeanMetadata.java",
            "startLine": 83,
            "endLine": 86,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "boolean result=ObjectUtils.nullSafeEquals(this.name,other.name);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 3,
            "endColumn": 70
          },
          "rightSideLocation": {
            "container": "public equals(obj Object) : boolean",
            "type": "Statement",
            "name": "result=result && ObjectUtils.nullSafeEquals(this.name,other.name);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 106,
            "endLine": 106,
            "startColumn": 3,
            "endColumn": 72
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.Definition",
            "type": "Method",
            "name": "hashCode",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/Definition.java",
            "startLine": 114,
            "endLine": 121,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoMetadata",
            "type": "Method",
            "name": "hashCode",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoMetadata.java",
            "startLine": 112,
            "endLine": 115,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockDefinition",
            "type": "Method",
            "name": "hashCode",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 131,
            "endLine": 139,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.mockito.MockitoBeanMetadata",
            "type": "Method",
            "name": "hashCode",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 124,
            "endLine": 127,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public toString() : String",
            "type": "Statement",
            "name": "return new ToStringCreator(this).append(\"name\",this.name).append(\"typeToMock\",typeToOverride()).append(\"extraInterfaces\",this.extraInterfaces).append(\"answer\",this.answer).append(\"serializable\",this.serializable).append(\"reset\",getReset()).toString();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockDefinition.java",
            "startLine": 143,
            "endLine": 150,
            "startColumn": 3,
            "endColumn": 17
          },
          "rightSideLocation": {
            "container": "public toString() : String",
            "type": "Statement",
            "name": "return new ToStringCreator(this).append(\"beanName\",getBeanName()).append(\"fieldType\",getBeanType()).append(\"extraInterfaces\",getExtraInterfaces()).append(\"answer\",getAnswer()).append(\"serializable\",isSerializable()).append(\"reset\",getReset()).toString();\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/mockito/MockitoBeanMetadata.java",
            "startLine": 131,
            "endLine": 138,
            "startColumn": 3,
            "endColumn": 17
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests",
            "type": "Method",
            "name": "findsOnField",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 43,
            "endLine": 50,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests",
            "type": "Method",
            "name": "findsOnField",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 41,
            "endLine": 46,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package findsOnField() : void",
            "type": "Statement",
            "name": "assertThat(parser.getOverrideMetadata()).map(om -> ((ExampleBeanOverrideAnnotation)om.overrideAnnotation()).value()).containsExactly(\"onField\");\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 47,
            "endLine": 49,
            "startColumn": 3,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "package findsOnField() : void",
            "type": "Statement",
            "name": "assertThat(BeanOverrideParsingUtils.parse(SingleAnnotationOnField.class)).map(Object::toString).containsExactly(\"onField\");\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 43,
            "endLine": 45,
            "startColumn": 3,
            "endColumn": 33
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests",
            "type": "Method",
            "name": "allowsMultipleProcessorsOnDifferentElements",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 52,
            "endLine": 59,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtilsTests",
            "type": "Method",
            "name": "allowsMultipleProcessorsOnDifferentElements",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 48,
            "endLine": 53,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package allowsMultipleProcessorsOnDifferentElements() : void",
            "type": "Statement",
            "name": "assertThat(parser.getOverrideMetadata()).map(om -> ((ExampleBeanOverrideAnnotation)om.overrideAnnotation()).value()).containsExactlyInAnyOrder(\"onField1\",\"onField2\");\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 56,
            "endLine": 58,
            "startColumn": 3,
            "endColumn": 56
          },
          "rightSideLocation": {
            "container": "package allowsMultipleProcessorsOnDifferentElements() : void",
            "type": "Statement",
            "name": "assertThat(BeanOverrideParsingUtils.parse(AnnotationsOnMultipleFields.class)).map(Object::toString).containsExactlyInAnyOrder(\"onField1\",\"onField2\");\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtilsTests.java",
            "startLine": 50,
            "endLine": 52,
            "startColumn": 3,
            "endColumn": 56
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParser",
            "type": "Class",
            "name": "BeanOverrideParser",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 35,
            "endLine": 114,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtils",
            "type": "Class",
            "name": "BeanOverrideParsingUtils",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 34,
            "endLine": 105,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParser",
            "type": "Method",
            "name": "parse",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParser.java",
            "startLine": 55,
            "endLine": 66,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParsingUtils",
            "type": "Method",
            "name": "parse",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideParsingUtils.java",
            "startLine": 79,
            "endLine": 84,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Method",
            "name": "WrapEarlyBeanPostProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 345,
            "endLine": 348,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Method",
            "name": "WrapEarlyBeanPostProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java",
            "startLine": 238,
            "endLine": 241,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private WrapEarlyBeanPostProcessor(mainProcessor BeanOverrideBeanPostProcessor)",
            "type": "Statement",
            "name": "this.earlyReferences=new ConcurrentHashMap<>(16);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 347,
            "endLine": 347,
            "startColumn": 4,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "private WrapEarlyBeanPostProcessor(registrar BeanOverrideRegistrar)",
            "type": "Statement",
            "name": "this.earlyReferences=new ConcurrentHashMap<>(16);\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java",
            "startLine": 240,
            "endLine": 240,
            "startColumn": 4,
            "endColumn": 55
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private WrapEarlyBeanPostProcessor(mainProcessor BeanOverrideBeanPostProcessor)",
            "type": "Statement",
            "name": "this.mainProcessor=mainProcessor;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 346,
            "endLine": 346,
            "startColumn": 4,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "private WrapEarlyBeanPostProcessor(registrar BeanOverrideRegistrar)",
            "type": "Statement",
            "name": "this.overrideRegistrar=registrar;\n",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java",
            "startLine": 239,
            "endLine": 239,
            "startColumn": 4,
            "endColumn": 39
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Field",
            "name": "mainProcessor",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessor.java",
            "startLine": 340,
            "endLine": 340,
            "startColumn": 47,
            "endColumn": 60
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideBeanFactoryPostProcessor.WrapEarlyBeanPostProcessor",
            "type": "Field",
            "name": "overrideRegistrar",
            "filePath": "spring-test/src/main/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessor.java",
            "startLine": 233,
            "endLine": 233,
            "startColumn": 39,
            "endColumn": 56
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canReplaceExistingBeanDefinitions() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 61,
            "endLine": 61,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 3,
            "endColumn": 89
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canReplaceExistingBeanDefinitions() : void",
            "type": "Statement",
            "name": "BeanOverrideBeanPostProcessor.register(context,this.parser.getOverrideMetadata());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 62,
            "endLine": 62,
            "startColumn": 3,
            "endColumn": 86
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "BeanOverrideRegistrar.register(context,Set.of(classes));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 3,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package cannotReplaceIfNoBeanMatching() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 76,
            "endLine": 76,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 3,
            "endColumn": 89
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package cannotReplaceIfNoBeanMatching() : void",
            "type": "Statement",
            "name": "BeanOverrideBeanPostProcessor.register(context,this.parser.getOverrideMetadata());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 3,
            "endColumn": 86
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "BeanOverrideRegistrar.register(context,Set.of(classes));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 3,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canReplaceExistingBeanDefinitionsWithCreateReplaceStrategy() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 89,
            "endLine": 89,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 3,
            "endColumn": 89
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canReplaceExistingBeanDefinitionsWithCreateReplaceStrategy() : void",
            "type": "Statement",
            "name": "BeanOverrideBeanPostProcessor.register(context,this.parser.getOverrideMetadata());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 90,
            "endLine": 90,
            "startColumn": 3,
            "endColumn": 86
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "BeanOverrideRegistrar.register(context,Set.of(classes));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 3,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canCreateIfOriginalMissingWithCreateReplaceStrategy() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 3,
            "endColumn": 89
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canCreateIfOriginalMissingWithCreateReplaceStrategy() : void",
            "type": "Statement",
            "name": "BeanOverrideBeanPostProcessor.register(context,this.parser.getOverrideMetadata());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 105,
            "endLine": 105,
            "startColumn": 3,
            "endColumn": 86
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "BeanOverrideRegistrar.register(context,Set.of(classes));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 3,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canOverrideBeanProducedByFactoryBeanWithClassObjectTypeAttribute() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 118,
            "endLine": 118,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 3,
            "endColumn": 89
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canOverrideBeanProducedByFactoryBeanWithClassObjectTypeAttribute() : void",
            "type": "Statement",
            "name": "BeanOverrideBeanPostProcessor.register(context,parser.getOverrideMetadata());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 119,
            "endLine": 119,
            "startColumn": 3,
            "endColumn": 81
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "BeanOverrideRegistrar.register(context,Set.of(classes));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 3,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canOverrideBeanProducedByFactoryBeanWithResolvableTypeObjectTypeAttribute() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 133,
            "endLine": 133,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 3,
            "endColumn": 89
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canOverrideBeanProducedByFactoryBeanWithResolvableTypeObjectTypeAttribute() : void",
            "type": "Statement",
            "name": "BeanOverrideBeanPostProcessor.register(context,parser.getOverrideMetadata());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 3,
            "endColumn": 81
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "BeanOverrideRegistrar.register(context,Set.of(classes));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 3,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package postProcessorShouldNotTriggerEarlyInitialization() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 149,
            "endLine": 149,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 3,
            "endColumn": 89
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package postProcessorShouldNotTriggerEarlyInitialization() : void",
            "type": "Statement",
            "name": "BeanOverrideBeanPostProcessor.register(context,parser.getOverrideMetadata());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 151,
            "endLine": 151,
            "startColumn": 3,
            "endColumn": 81
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "BeanOverrideRegistrar.register(context,Set.of(classes));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 3,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package allowReplaceDefinitionWhenSingletonDefinitionPresent() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 161,
            "endLine": 161,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 3,
            "endColumn": 89
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package allowReplaceDefinitionWhenSingletonDefinitionPresent() : void",
            "type": "Statement",
            "name": "BeanOverrideBeanPostProcessor.register(context,this.parser.getOverrideMetadata());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 165,
            "endLine": 165,
            "startColumn": 3,
            "endColumn": 86
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "BeanOverrideRegistrar.register(context,Set.of(classes));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 3,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package copyDefinitionPrimaryAndScope() : void",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 176,
            "endLine": 176,
            "startColumn": 3,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext();\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 179,
            "endLine": 179,
            "startColumn": 3,
            "endColumn": 89
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package copyDefinitionPrimaryAndScope() : void",
            "type": "Statement",
            "name": "BeanOverrideBeanPostProcessor.register(context,this.parser.getOverrideMetadata());\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanPostProcessorTests.java",
            "startLine": 182,
            "endLine": 182,
            "startColumn": 3,
            "endColumn": 86
          },
          "rightSideLocation": {
            "container": "private createContext(classes Class<?>...) : AnnotationConfigApplicationContext",
            "type": "Statement",
            "name": "BeanOverrideRegistrar.register(context,Set.of(classes));\n",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideBeanFactoryPostProcessorTests.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 3,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.test.context.bean.override.BeanOverrideParserTests",
            "type": "Field",
            "name": "DUPLICATE_TRIGGER",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/BeanOverrideParserTests.java",
            "startLine": 38,
            "endLine": 38,
            "startColumn": 30,
            "endColumn": 61
          },
          "rightSideLocation": {
            "container": "org.springframework.test.context.bean.override.example.ExampleBeanOverrideAnnotation",
            "type": "Field",
            "name": "DUPLICATE_TRIGGER",
            "filePath": "spring-test/src/test/java/org/springframework/test/context/bean/override/example/ExampleBeanOverrideAnnotation.java",
            "startLine": 33,
            "endLine": 33,
            "startColumn": 9,
            "endColumn": 40
          },
          "validation": false
        }
      ]
    },
    {
      "repository": "https://github.com/spring-projects/spring-framework.git",
      "sha1": "39cd31613b60ba5759808f0774e6fa0261cccf87",
      "url": "https://github.com/spring-projects/spring-framework/commit/39cd31613b60ba5759808f0774e6fa0261cccf87",
      "commonMatching": [
        {
          "leftSideLocation": {
            "container": "org.springframework.aop.framework.CglibAopProxy",
            "type": "Class",
            "name": "CglibAopProxy",
            "filePath": "spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java",
            "startLine": 59,
            "endLine": 951,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.aop.framework.CglibAopProxy",
            "type": "Class",
            "name": "CglibAopProxy",
            "filePath": "spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java",
            "startLine": 59,
            "endLine": 951,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.aop.support.AopUtils",
            "type": "Method",
            "name": "invokeJoinpointUsingReflection",
            "filePath": "spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
            "startLine": 336,
            "endLine": 367,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.aop.support.AopUtils",
            "type": "Method",
            "name": "invokeJoinpointUsingReflection",
            "filePath": "spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
            "startLine": 337,
            "endLine": 368,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.aop.support.AopUtils",
            "type": "Class",
            "name": "AopUtils",
            "filePath": "spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
            "startLine": 50,
            "endLine": 383,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.aop.support.AopUtils",
            "type": "Class",
            "name": "AopUtils",
            "filePath": "spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
            "startLine": 50,
            "endLine": 384,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.context.aot.KotlinReflectionBeanRegistrationAotProcessor",
            "type": "Method",
            "name": "processAheadOfTime",
            "filePath": "spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java",
            "startLine": 38,
            "endLine": 46,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.context.aot.KotlinReflectionBeanRegistrationAotProcessor",
            "type": "Method",
            "name": "processAheadOfTime",
            "filePath": "spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java",
            "startLine": 38,
            "endLine": 46,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.context.aot.KotlinReflectionBeanRegistrationAotProcessor",
            "type": "Class",
            "name": "KotlinReflectionBeanRegistrationAotProcessor",
            "filePath": "spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java",
            "startLine": 29,
            "endLine": 76,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.context.aot.KotlinReflectionBeanRegistrationAotProcessor",
            "type": "Class",
            "name": "KotlinReflectionBeanRegistrationAotProcessor",
            "filePath": "spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java",
            "startLine": 29,
            "endLine": 77,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.http.server.ServletServerHttpRequestTests",
            "type": "Method",
            "name": "getHeaders",
            "filePath": "spring-web/src/test/java/org/springframework/http/server/ServletServerHttpRequestTests.java",
            "startLine": 113,
            "endLine": 131,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.http.server.ServletServerHttpRequestTests",
            "type": "Method",
            "name": "getHeaders",
            "filePath": "spring-web/src/test/java/org/springframework/http/server/ServletServerHttpRequestTests.java",
            "startLine": 113,
            "endLine": 132,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.http.server.ServletServerHttpRequestTests",
            "type": "Class",
            "name": "ServletServerHttpRequestTests",
            "filePath": "spring-web/src/test/java/org/springframework/http/server/ServletServerHttpRequestTests.java",
            "startLine": 35,
            "endLine": 219,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.http.server.ServletServerHttpRequestTests",
            "type": "Class",
            "name": "ServletServerHttpRequestTests",
            "filePath": "spring-web/src/test/java/org/springframework/http/server/ServletServerHttpRequestTests.java",
            "startLine": 35,
            "endLine": 220,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveString",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 146,
            "endLine": 156,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveString",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 146,
            "endLine": 154,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveStringArray",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 158,
            "endLine": 168,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveStringArray",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 156,
            "endLine": 164,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveStringArrayWithEmptyArraySuffix",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 170,
            "endLine": 181,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveStringArrayWithEmptyArraySuffix",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 166,
            "endLine": 175,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveMultipartFile",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 183,
            "endLine": 195,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveMultipartFile",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 177,
            "endLine": 187,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveMultipartFileList",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 197,
            "endLine": 213,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveMultipartFileList",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 189,
            "endLine": 202,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveMultipartFileArray",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 226,
            "endLine": 245,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveMultipartFileArray",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 215,
            "endLine": 232,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolvePart",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 258,
            "endLine": 273,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolvePart",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 245,
            "endLine": 257,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolvePartList",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 275,
            "endLine": 293,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolvePartList",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 259,
            "endLine": 274,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolvePartArray",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 308,
            "endLine": 329,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolvePartArray",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 289,
            "endLine": 308,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveMultipartFileNotAnnot",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 344,
            "endLine": 356,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveMultipartFileNotAnnot",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 323,
            "endLine": 333,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveMultipartFileListNotannot",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 358,
            "endLine": 374,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveMultipartFileListNotannot",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 335,
            "endLine": 349,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolvePartNotAnnot",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 416,
            "endLine": 430,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolvePartNotAnnot",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 391,
            "endLine": 403,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveDefaultValue",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 432,
            "endLine": 439,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveDefaultValue",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 405,
            "endLine": 410,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveSimpleTypeParam",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 507,
            "endLine": 516,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveSimpleTypeParam",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 474,
            "endLine": 480,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveOptionalMultipartFile",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 648,
            "endLine": 665,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveOptionalMultipartFile",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 612,
            "endLine": 627,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Class",
            "name": "RequestParamMethodArgumentResolverTests",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 58,
            "endLine": 721,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.web.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Class",
            "name": "RequestParamMethodArgumentResolverTests",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 58,
            "endLine": 683,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests",
            "type": "Method",
            "name": "testException",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ControllerAdviceTests.java",
            "startLine": 184,
            "endLine": 194,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests",
            "type": "Method",
            "name": "testException",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ControllerAdviceTests.java",
            "startLine": 184,
            "endLine": 194,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests",
            "type": "Class",
            "name": "ControllerAdviceTests",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ControllerAdviceTests.java",
            "startLine": 59,
            "endLine": 336,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.ControllerAdviceTests",
            "type": "Class",
            "name": "ControllerAdviceTests",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ControllerAdviceTests.java",
            "startLine": 59,
            "endLine": 337,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveStringArray",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 123,
            "endLine": 131,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveStringArray",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 122,
            "endLine": 128,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveStringArrayWithEmptyArraySuffix",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 133,
            "endLine": 141,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolveStringArrayWithEmptyArraySuffix",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 130,
            "endLine": 136,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolve",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 224,
            "endLine": 226,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Method",
            "name": "resolve",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 218,
            "endLine": 221,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Class",
            "name": "RequestParamMethodArgumentResolverTests",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 45,
            "endLine": 244,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.web.reactive.result.method.annotation.RequestParamMethodArgumentResolverTests",
            "type": "Class",
            "name": "RequestParamMethodArgumentResolverTests",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 46,
            "endLine": 239,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public invokeJoinpointUsingReflection(target Object, method Method, args Object[]) : Object",
            "type": "Statement",
            "name": "return coroutinesReactorPresent && KotlinDetector.isSuspendingFunction(method) ? KotlinDelegate.invokeSuspendingFunction(method,target,args) : method.invoke(target,args);\n",
            "filePath": "spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
            "startLine": 352,
            "endLine": 353,
            "startColumn": 4,
            "endColumn": 98
          },
          "rightSideLocation": {
            "container": "public invokeJoinpointUsingReflection(target Object, method Method, args Object[]) : Object",
            "type": "Statement",
            "name": "return (coroutinesReactorPresent && KotlinDetector.isSuspendingFunction(method) ? KotlinDelegate.invokeSuspendingFunction(method,target,args) : method.invoke(target,args));\n",
            "filePath": "spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java",
            "startLine": 353,
            "endLine": 354,
            "startColumn": 4,
            "endColumn": 99
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package resolveStringArray() : void",
            "type": "Statement",
            "name": "assertThat((String[])result).as(\"Invalid result\").isEqualTo(expected);\n",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 167,
            "endLine": 167,
            "startColumn": 3,
            "endColumn": 74
          },
          "rightSideLocation": {
            "container": "package resolveStringArray() : void",
            "type": "Statement",
            "name": "assertThat(result).as(\"Invalid result\").isEqualTo(expected);\n",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 163,
            "endLine": 163,
            "startColumn": 3,
            "endColumn": 63
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package resolveStringArrayWithEmptyArraySuffix() : void",
            "type": "Statement",
            "name": "assertThat((String[])result).isEqualTo(expected);\n",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 180,
            "endLine": 180,
            "startColumn": 3,
            "endColumn": 53
          },
          "rightSideLocation": {
            "container": "package resolveStringArrayWithEmptyArraySuffix() : void",
            "type": "Statement",
            "name": "assertThat(result).isEqualTo(expected);\n",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 174,
            "endLine": 174,
            "startColumn": 3,
            "endColumn": 42
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package resolveMultipartFileArray() : void",
            "type": "Statement",
            "name": "assertThat(condition).isTrue();\n",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 240,
            "endLine": 240,
            "startColumn": 3,
            "endColumn": 34
          },
          "rightSideLocation": {
            "container": "package resolveMultipartFileArray() : void",
            "type": "Statement",
            "name": "assertThat(result instanceof MultipartFile[]).isTrue();\n",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 227,
            "endLine": 227,
            "startColumn": 3,
            "endColumn": 58
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package resolvePartArray() : void",
            "type": "Statement",
            "name": "assertThat(condition).isTrue();\n",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 324,
            "endLine": 324,
            "startColumn": 3,
            "endColumn": 34
          },
          "rightSideLocation": {
            "container": "package resolvePartArray() : void",
            "type": "Statement",
            "name": "assertThat(result instanceof Part[]).isTrue();\n",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 303,
            "endLine": 303,
            "startColumn": 3,
            "endColumn": 49
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package resolveOptionalMultipartFile() : void",
            "type": "Statement",
            "name": "assertThat(condition).isTrue();\n",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 663,
            "endLine": 663,
            "startColumn": 3,
            "endColumn": 34
          },
          "rightSideLocation": {
            "container": "package resolveOptionalMultipartFile() : void",
            "type": "Statement",
            "name": "assertThat(result instanceof Optional).isTrue();\n",
            "filePath": "spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 625,
            "endLine": 625,
            "startColumn": 3,
            "endColumn": 51
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private testException(exception Throwable, threadName String, expected String) : void",
            "type": "Statement",
            "name": "Object actual=handle(adapter,controller,this.postExchange,Duration.ofMillis(100),\"threadWithArg\",String.class).getReturnValue();\n",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ControllerAdviceTests.java",
            "startLine": 191,
            "endLine": 192,
            "startColumn": 3,
            "endColumn": 55
          },
          "rightSideLocation": {
            "container": "private testException(exception Throwable, threadName String, expected String) : void",
            "type": "Statement",
            "name": "Object actual=handle(adapter,controller,this.postExchange,Duration.ofMillis(1000),\"threadWithArg\",String.class).getReturnValue();\n",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ControllerAdviceTests.java",
            "startLine": 191,
            "endLine": 192,
            "startColumn": 3,
            "endColumn": 53
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package resolveStringArray() : void",
            "type": "Statement",
            "name": "assertThat((String[])result).isEqualTo(new String[]{\"foo\",\"bar\"});\n",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 130,
            "endLine": 130,
            "startColumn": 3,
            "endColumn": 72
          },
          "rightSideLocation": {
            "container": "package resolveStringArray() : void",
            "type": "Statement",
            "name": "assertThat(result).isEqualTo(new String[]{\"foo\",\"bar\"});\n",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 127,
            "endLine": 127,
            "startColumn": 3,
            "endColumn": 61
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package resolveStringArrayWithEmptyArraySuffix() : void",
            "type": "Statement",
            "name": "assertThat((String[])result).isEqualTo(new String[]{\"foo\",\"bar\"});\n",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 140,
            "endLine": 140,
            "startColumn": 3,
            "endColumn": 72
          },
          "rightSideLocation": {
            "container": "package resolveStringArrayWithEmptyArraySuffix() : void",
            "type": "Statement",
            "name": "assertThat(result).isEqualTo(new String[]{\"foo\",\"bar\"});\n",
            "filePath": "spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolverTests.java",
            "startLine": 135,
            "endLine": 135,
            "startColumn": 3,
            "endColumn": 61
          },
          "validation": true
        }
      ],
      "ourApproach": [],
      "baseline": []
    },
    {
      "repository": "https://github.com/spring-projects/spring-framework.git",
      "sha1": "1c9cff668c4765f4dd676958a6386de90af8fd7e",
      "url": "https://github.com/spring-projects/spring-framework/commit/1c9cff668c4765f4dd676958a6386de90af8fd7e",
      "commonMatching": [
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.IndexedType",
            "type": "Enum",
            "name": "IndexedType",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 2,
            "endColumn": 61
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.IndexedType",
            "type": "Enum",
            "name": "IndexedType",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 77,
            "endLine": 77,
            "startColumn": 2,
            "endColumn": 69
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "getValueInternal",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 151,
            "endLine": 154,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "getValueInternal",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 216,
            "endLine": 219,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "setValueInternal",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 156,
            "endLine": 164,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "setValueInternal",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 221,
            "endLine": 228,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "isWritable",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 166,
            "endLine": 169,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "isWritable",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 230,
            "endLine": 233,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "getValueRef",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 172,
            "endLine": 269,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "getValueRef",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 235,
            "endLine": 238,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "isCompilable",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 271,
            "endLine": 291,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "isCompilable",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 356,
            "endLine": 376,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "generateCode",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 293,
            "endLine": 385,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Method",
            "name": "generateCode",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 378,
            "endLine": 471,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.IndexAccessorValueRef",
            "type": "Method",
            "name": "getValue",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 903,
            "endLine": 913,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.IndexAccessorValueRef",
            "type": "Method",
            "name": "getValue",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1010,
            "endLine": 1057,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.IndexAccessorValueRef",
            "type": "Method",
            "name": "setValue",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 915,
            "endLine": 925,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.IndexAccessorValueRef",
            "type": "Method",
            "name": "setValue",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1059,
            "endLine": 1108,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.IndexAccessorValueRef",
            "type": "Class",
            "name": "IndexAccessorValueRef",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 879,
            "endLine": 931,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.IndexAccessorValueRef",
            "type": "Class",
            "name": "IndexAccessorValueRef",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 989,
            "endLine": 1114,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Class",
            "name": "Indexer",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 45,
            "endLine": 933,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Class",
            "name": "Indexer",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 45,
            "endLine": 1116,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests.IndexAccessorTests",
            "type": "Method",
            "name": "canReadThrowsException",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 510,
            "endLine": 529,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests.IndexAccessorTests",
            "type": "Method",
            "name": "canReadThrowsException",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 510,
            "endLine": 532,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests.IndexAccessorTests",
            "type": "Method",
            "name": "readThrowsException",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 531,
            "endLine": 552,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests.IndexAccessorTests",
            "type": "Method",
            "name": "readThrowsException",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 534,
            "endLine": 558,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests.IndexAccessorTests",
            "type": "Method",
            "name": "canWriteThrowsException",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 554,
            "endLine": 577,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests.IndexAccessorTests",
            "type": "Method",
            "name": "canWriteThrowsException",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 560,
            "endLine": 582,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests.IndexAccessorTests",
            "type": "Method",
            "name": "writeThrowsException",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 579,
            "endLine": 603,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests.IndexAccessorTests",
            "type": "Method",
            "name": "writeThrowsException",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 584,
            "endLine": 608,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests.IndexAccessorTests",
            "type": "Class",
            "name": "IndexAccessorTests",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 469,
            "endLine": 682,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests.IndexAccessorTests",
            "type": "Class",
            "name": "IndexAccessorTests",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 469,
            "endLine": 687,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests",
            "type": "Class",
            "name": "IndexingTests",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 64,
            "endLine": 744,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.IndexingTests",
            "type": "Class",
            "name": "IndexingTests",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 64,
            "endLine": 749,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyIndexingValueRef",
            "type": "Field",
            "name": "targetObject",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 642,
            "endLine": 642,
            "startColumn": 24,
            "endColumn": 36
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyAccessorValueRef",
            "type": "Field",
            "name": "targetObject",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 756,
            "endLine": 756,
            "startColumn": 24,
            "endColumn": 36
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyIndexingValueRef",
            "type": "Field",
            "name": "name",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 644,
            "endLine": 644,
            "startColumn": 24,
            "endColumn": 28
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyAccessorValueRef",
            "type": "Field",
            "name": "name",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 758,
            "endLine": 758,
            "startColumn": 24,
            "endColumn": 28
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyIndexingValueRef",
            "type": "Field",
            "name": "evaluationContext",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 646,
            "endLine": 646,
            "startColumn": 35,
            "endColumn": 52
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyAccessorValueRef",
            "type": "Field",
            "name": "evaluationContext",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 760,
            "endLine": 760,
            "startColumn": 35,
            "endColumn": 52
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyIndexingValueRef",
            "type": "Field",
            "name": "targetObjectTypeDescriptor",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 648,
            "endLine": 648,
            "startColumn": 32,
            "endColumn": 58
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyAccessorValueRef",
            "type": "Field",
            "name": "targetObjectTypeDescriptor",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 762,
            "endLine": 762,
            "startColumn": 32,
            "endColumn": 58
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyIndexingValueRef",
            "type": "Method",
            "name": "PropertyIndexingValueRef",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 650,
            "endLine": 657,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyAccessorValueRef",
            "type": "Method",
            "name": "PropertyAccessorValueRef",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 764,
            "endLine": 771,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.IndexAccessorValueRef",
            "type": "Method",
            "name": "IndexAccessorValueRef",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 892,
            "endLine": 900,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.IndexAccessorValueRef",
            "type": "Method",
            "name": "IndexAccessorValueRef",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1000,
            "endLine": 1007,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyIndexingValueRef",
            "type": "Method",
            "name": "getValue",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 659,
            "endLine": 696,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyAccessorValueRef",
            "type": "Method",
            "name": "getValue",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 773,
            "endLine": 808,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyIndexingValueRef",
            "type": "Method",
            "name": "setValue",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 698,
            "endLine": 728,
            "startColumn": 3,
            "endColumn": 4
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyAccessorValueRef",
            "type": "Method",
            "name": "setValue",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 810,
            "endLine": 838,
            "startColumn": 3,
            "endColumn": 4
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedReadAccessor",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 103,
            "endLine": 103,
            "startColumn": 27,
            "endColumn": 45
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedPropertyReadAccessor",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 120,
            "endLine": 120,
            "startColumn": 27,
            "endColumn": 53
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedWriteAccessor",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 27,
            "endColumn": 46
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedPropertyWriteAccessor",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 134,
            "endLine": 134,
            "startColumn": 27,
            "endColumn": 54
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyIndexingValueRef",
            "type": "Class",
            "name": "PropertyIndexingValueRef",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 640,
            "endLine": 734,
            "startColumn": 2,
            "endColumn": 3
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer.PropertyAccessorValueRef",
            "type": "Class",
            "name": "PropertyAccessorValueRef",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 754,
            "endLine": 844,
            "startColumn": 2,
            "endColumn": 3
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValueInternal(state ExpressionState) : TypedValue",
            "type": "Statement",
            "name": "return getValueRef(state).getValue();\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 153,
            "endLine": 153,
            "startColumn": 3,
            "endColumn": 40
          },
          "rightSideLocation": {
            "container": "public getValueInternal(state ExpressionState) : TypedValue",
            "type": "Statement",
            "name": "return getValueRef(state,AccessMode.READ).getValue();\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 218,
            "endLine": 218,
            "startColumn": 3,
            "endColumn": 57
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setValueInternal(state ExpressionState, valueSupplier Supplier<TypedValue>) : TypedValue",
            "type": "Statement",
            "name": "getValueRef(state).setValue(typedValue.getValue());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 162,
            "endLine": 162,
            "startColumn": 3,
            "endColumn": 54
          },
          "rightSideLocation": {
            "container": "public setValueInternal(state ExpressionState, valueSupplier Supplier<TypedValue>) : TypedValue",
            "type": "Statement",
            "name": "getValueRef(state,AccessMode.WRITE).setValue(typedValue.getValue());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 226,
            "endLine": 226,
            "startColumn": 3,
            "endColumn": 72
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public isWritable(expressionState ExpressionState) : boolean",
            "type": "Statement",
            "name": "return getValueRef(expressionState).isWritable();\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 168,
            "endLine": 168,
            "startColumn": 3,
            "endColumn": 52
          },
          "rightSideLocation": {
            "container": "public isWritable(expressionState ExpressionState) : boolean",
            "type": "Statement",
            "name": "return getValueRef(expressionState,AccessMode.WRITE).isWritable();\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 232,
            "endLine": 232,
            "startColumn": 3,
            "endColumn": 70
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected getValueRef(state ExpressionState) : ValueRef",
            "type": "Statement",
            "name": "return new PropertyIndexingValueRef(target,(String)index,state.getEvaluationContext(),targetDescriptor);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 248,
            "endLine": 249,
            "startColumn": 4,
            "endColumn": 78
          },
          "rightSideLocation": {
            "container": "private getValueRef(state ExpressionState, accessMode AccessMode) : ValueRef",
            "type": "Statement",
            "name": "return new PropertyAccessorValueRef(target,(String)index,state.getEvaluationContext(),targetDescriptor);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 315,
            "endLine": 316,
            "startColumn": 4,
            "endColumn": 78
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "protected getValueRef(state ExpressionState) : ValueRef",
            "type": "Statement",
            "name": "return new IndexAccessorValueRef(indexAccessor,target,index,evalContext,targetDescriptor);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 257,
            "endLine": 257,
            "startColumn": 6,
            "endColumn": 100
          },
          "rightSideLocation": {
            "container": "private getValueRef(state ExpressionState, accessMode AccessMode) : ValueRef",
            "type": "Statement",
            "name": "return new IndexAccessorValueRef(target,index,evalContext,targetDescriptor);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 326,
            "endLine": 326,
            "startColumn": 7,
            "endColumn": 86
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public isCompilable() : boolean",
            "type": "Statement",
            "name": "return (index instanceof StringLiteral && this.cachedReadAccessor instanceof int MISSING && compilablePropertyAccessor.isCompilable());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 286,
            "endLine": 288,
            "startColumn": 4,
            "endColumn": 49
          },
          "rightSideLocation": {
            "container": "public isCompilable() : boolean",
            "type": "Statement",
            "name": "return (index instanceof StringLiteral && this.cachedPropertyReadAccessor instanceof int MISSING && cpa.isCompilable());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 371,
            "endLine": 373,
            "startColumn": 4,
            "endColumn": 26
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public generateCode(mv MethodVisitor, cf CodeFlow) : void",
            "type": "Statement",
            "name": "CompilablePropertyAccessor compilablePropertyAccessor=(CompilablePropertyAccessor)this.cachedReadAccessor;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 367,
            "endLine": 367,
            "startColumn": 4,
            "endColumn": 113
          },
          "rightSideLocation": {
            "container": "public generateCode(mv MethodVisitor, cf CodeFlow) : void",
            "type": "Statement",
            "name": "CompilablePropertyAccessor compilablePropertyAccessor=(CompilablePropertyAccessor)this.cachedPropertyReadAccessor;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 452,
            "endLine": 453,
            "startColumn": 4,
            "endColumn": 67
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "throw new SpelEvaluationException(getStartPosition(),ex,SpelMessage.EXCEPTION_DURING_INDEX_READ,this.index,this.typeDescriptor.toString());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 909,
            "endLine": 911,
            "startColumn": 5,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "throw new SpelEvaluationException(getStartPosition(),exception,SpelMessage.EXCEPTION_DURING_INDEX_READ,this.index,this.typeDescriptor.toString());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1051,
            "endLine": 1053,
            "startColumn": 5,
            "endColumn": 39
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "this.indexAccessor.write(this.evaluationContext,this.target,this.index,newValue);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 918,
            "endLine": 918,
            "startColumn": 5,
            "endColumn": 89
          },
          "rightSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "indexAccessor.write(this.evaluationContext,this.target,this.index,newValue);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1092,
            "endLine": 1092,
            "startColumn": 7,
            "endColumn": 86
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "throw new SpelEvaluationException(getStartPosition(),ex,SpelMessage.EXCEPTION_DURING_INDEX_WRITE,this.index,this.typeDescriptor.toString());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 921,
            "endLine": 923,
            "startColumn": 5,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "throw new SpelEvaluationException(getStartPosition(),exception,SpelMessage.EXCEPTION_DURING_INDEX_WRITE,this.index,this.typeDescriptor.toString());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1102,
            "endLine": 1104,
            "startColumn": 5,
            "endColumn": 39
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package readThrowsException() : void",
            "type": "Statement",
            "name": "verify(mock,times(1)).canRead(any(),any(),any());\n",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 550,
            "endLine": 550,
            "startColumn": 4,
            "endColumn": 56
          },
          "rightSideLocation": {
            "container": "package readThrowsException() : void",
            "type": "Statement",
            "name": "verify(mock,times(2)).canRead(any(),any(),any());\n",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 555,
            "endLine": 555,
            "startColumn": 4,
            "endColumn": 56
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package canWriteThrowsException() : void",
            "type": "Statement",
            "name": "given(mock.canRead(any(),eq(this),any())).willReturn(true);\n",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 562,
            "endLine": 562,
            "startColumn": 4,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "package canWriteThrowsException() : void",
            "type": "Statement",
            "name": "given(mock.getSpecificTargetClasses()).willReturn(null);\n",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 566,
            "endLine": 566,
            "startColumn": 4,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "PropertyAccessor accessor=Indexer.this.cachedReadAccessor;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 668,
            "endLine": 668,
            "startColumn": 6,
            "endColumn": 66
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "PropertyAccessor accessor=Indexer.this.cachedPropertyReadAccessor;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 782,
            "endLine": 782,
            "startColumn": 6,
            "endColumn": 74
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "List<PropertyAccessor> accessorsToTry=AstUtils.getPropertyAccessorsToTry(targetObjectRuntimeClass,this.evaluationContext.getPropertyAccessors());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 672,
            "endLine": 673,
            "startColumn": 5,
            "endColumn": 80
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "List<PropertyAccessor> accessorsToTry=AstUtils.getPropertyAccessorsToTry(targetType,this.evaluationContext.getPropertyAccessors());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 786,
            "endLine": 787,
            "startColumn": 5,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "Class<?> targetObjectRuntimeClass=getObjectClass(this.targetObject);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 662,
            "endLine": 662,
            "startColumn": 4,
            "endColumn": 74
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "Class<?> targetType=getObjectClass(this.targetObject);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 775,
            "endLine": 775,
            "startColumn": 4,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "if(Indexer.this.cachedReadName != null && Indexer.this.cachedReadName.equals(this.name) && Indexer.this.cachedReadTargetType != null && Indexer.this.cachedReadTargetType.equals(targetObjectRuntimeClass))",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 664,
            "endLine": 671,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "if(cachedPropertyReadName != null && cachedPropertyReadName.equals(this.name) && cachedPropertyReadTargetType != null && cachedPropertyReadTargetType.equals(targetType))",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 779,
            "endLine": 785,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "Assert.state(accessor != null,\"No cached read accessor\");\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 669,
            "endLine": 669,
            "startColumn": 6,
            "endColumn": 64
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "Assert.state(accessor != null,\"No cached PropertyAccessor for reading\");\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 783,
            "endLine": 783,
            "startColumn": 6,
            "endColumn": 79
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "PropertyAccessor accessor=Indexer.this.cachedWriteAccessor;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 707,
            "endLine": 707,
            "startColumn": 6,
            "endColumn": 67
          },
          "rightSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "PropertyAccessor accessor=Indexer.this.cachedPropertyWriteAccessor;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 819,
            "endLine": 819,
            "startColumn": 6,
            "endColumn": 75
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "List<PropertyAccessor> accessorsToTry=AstUtils.getPropertyAccessorsToTry(contextObjectClass,this.evaluationContext.getPropertyAccessors());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 712,
            "endLine": 713,
            "startColumn": 5,
            "endColumn": 74
          },
          "rightSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "List<PropertyAccessor> accessorsToTry=AstUtils.getPropertyAccessorsToTry(targetType,this.evaluationContext.getPropertyAccessors());\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 824,
            "endLine": 825,
            "startColumn": 5,
            "endColumn": 66
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "if(Indexer.this.cachedWriteName != null && Indexer.this.cachedWriteName.equals(this.name) && Indexer.this.cachedWriteTargetType != null && Indexer.this.cachedWriteTargetType.equals(contextObjectClass))",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 703,
            "endLine": 711,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "if(cachedPropertyWriteName != null && cachedPropertyWriteName.equals(this.name) && cachedPropertyWriteTargetType != null && cachedPropertyWriteTargetType.equals(targetType))",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 816,
            "endLine": 823,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "Assert.state(accessor != null,\"No cached write accessor\");\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 708,
            "endLine": 708,
            "startColumn": 6,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "Assert.state(accessor != null,\"No cached PropertyAccessor for writing\");\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 820,
            "endLine": 820,
            "startColumn": 6,
            "endColumn": 79
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "Class<?> contextObjectClass=getObjectClass(this.targetObject);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 701,
            "endLine": 701,
            "startColumn": 4,
            "endColumn": 68
          },
          "rightSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "Class<?> targetType=getObjectClass(this.targetObject);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 812,
            "endLine": 812,
            "startColumn": 4,
            "endColumn": 60
          },
          "validation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedReadTargetType",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 100,
            "endLine": 100,
            "startColumn": 19,
            "endColumn": 39
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedPropertyReadTargetType",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 117,
            "endLine": 117,
            "startColumn": 19,
            "endColumn": 47
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedWriteTargetType",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 19,
            "endColumn": 40
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedPropertyWriteTargetType",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 131,
            "endLine": 131,
            "startColumn": 19,
            "endColumn": 48
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedReadName",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 97,
            "endLine": 97,
            "startColumn": 17,
            "endColumn": 31
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedPropertyReadName",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 114,
            "endLine": 114,
            "startColumn": 17,
            "endColumn": 39
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedWriteName",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 111,
            "endLine": 111,
            "startColumn": 17,
            "endColumn": 32
          },
          "rightSideLocation": {
            "container": "org.springframework.expression.spel.ast.Indexer",
            "type": "Field",
            "name": "cachedPropertyWriteName",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 128,
            "endLine": 128,
            "startColumn": 17,
            "endColumn": 40
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "try",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 905,
            "endLine": 912,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "try",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1014,
            "endLine": 1048,
            "startColumn": 4,
            "endColumn": 5
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "catch(ex)",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 908,
            "endLine": 912,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "catch(ex)",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1046,
            "endLine": 1048,
            "startColumn": 4,
            "endColumn": 5
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "return this.indexAccessor.read(this.evaluationContext,this.target,this.index);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 906,
            "endLine": 906,
            "startColumn": 5,
            "endColumn": 85
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "return indexAccessor.read(this.evaluationContext,this.target,this.index);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1042,
            "endLine": 1042,
            "startColumn": 7,
            "endColumn": 82
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "package writeThrowsException() : void",
            "type": "Statement",
            "name": "given(mock.canRead(any(),eq(this),any())).willReturn(true);\n",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 586,
            "endLine": 586,
            "startColumn": 4,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "package writeThrowsException() : void",
            "type": "Statement",
            "name": "verify(mock,times(2)).canWrite(any(),any(),any());\n",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 605,
            "endLine": 605,
            "startColumn": 4,
            "endColumn": 57
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "Indexer.this.cachedReadName=this.name;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 681,
            "endLine": 681,
            "startColumn": 7,
            "endColumn": 47
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "updatePropertyReadState(accessor,this.name,targetType);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 794,
            "endLine": 794,
            "startColumn": 7,
            "endColumn": 64
          },
          "validation": false
        },
        {
          "leftSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "Indexer.this.cachedWriteName=this.name;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 716,
            "endLine": 716,
            "startColumn": 7,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "updatePropertyWriteState(accessor,this.name,targetType);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 828,
            "endLine": 828,
            "startColumn": 7,
            "endColumn": 65
          },
          "validation": false
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "return this.indexAccessor.read(this.evaluationContext,this.target,this.index);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 906,
            "endLine": 906,
            "startColumn": 5,
            "endColumn": 85
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "return accessor.read(this.evaluationContext,this.target,this.index);\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1024,
            "endLine": 1024,
            "startColumn": 8,
            "endColumn": 78
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "try",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 905,
            "endLine": 912,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "try",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1023,
            "endLine": 1031,
            "startColumn": 7,
            "endColumn": 8
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "catch(ex)",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 908,
            "endLine": 912,
            "startColumn": 4,
            "endColumn": 5
          },
          "rightSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "catch(ex)",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 1026,
            "endLine": 1031,
            "startColumn": 7,
            "endColumn": 8
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package writeThrowsException() : void",
            "type": "Statement",
            "name": "given(mock.canRead(any(),eq(this),any())).willReturn(true);\n",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 586,
            "endLine": 586,
            "startColumn": 4,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "package writeThrowsException() : void",
            "type": "Statement",
            "name": "given(mock.getSpecificTargetClasses()).willReturn(null);\n",
            "filePath": "spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java",
            "startLine": 590,
            "endLine": 590,
            "startColumn": 4,
            "endColumn": 60
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "Indexer.this.cachedReadAccessor=accessor;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 680,
            "endLine": 680,
            "startColumn": 7,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "private updatePropertyReadState(propertyAccessor PropertyAccessor, name String, targetType Class<?>) : void",
            "type": "Statement",
            "name": "this.cachedPropertyReadAccessor=propertyAccessor;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 494,
            "endLine": 494,
            "startColumn": 3,
            "endColumn": 54
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "Indexer.this.cachedReadName=this.name;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 681,
            "endLine": 681,
            "startColumn": 7,
            "endColumn": 47
          },
          "rightSideLocation": {
            "container": "private updatePropertyReadState(propertyAccessor PropertyAccessor, name String, targetType Class<?>) : void",
            "type": "Statement",
            "name": "this.cachedPropertyReadName=name;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 495,
            "endLine": 495,
            "startColumn": 3,
            "endColumn": 38
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public getValue() : TypedValue",
            "type": "Statement",
            "name": "Indexer.this.cachedReadTargetType=targetObjectRuntimeClass;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 682,
            "endLine": 682,
            "startColumn": 7,
            "endColumn": 68
          },
          "rightSideLocation": {
            "container": "private updatePropertyReadState(propertyAccessor PropertyAccessor, name String, targetType Class<?>) : void",
            "type": "Statement",
            "name": "this.cachedPropertyReadTargetType=targetType;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 496,
            "endLine": 496,
            "startColumn": 3,
            "endColumn": 50
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "Indexer.this.cachedWriteAccessor=accessor;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 718,
            "endLine": 718,
            "startColumn": 7,
            "endColumn": 51
          },
          "rightSideLocation": {
            "container": "private updatePropertyWriteState(propertyAccessor PropertyAccessor, name String, targetType Class<?>) : void",
            "type": "Statement",
            "name": "this.cachedPropertyWriteAccessor=propertyAccessor;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 501,
            "endLine": 501,
            "startColumn": 3,
            "endColumn": 55
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "Indexer.this.cachedWriteName=this.name;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 716,
            "endLine": 716,
            "startColumn": 7,
            "endColumn": 48
          },
          "rightSideLocation": {
            "container": "private updatePropertyWriteState(propertyAccessor PropertyAccessor, name String, targetType Class<?>) : void",
            "type": "Statement",
            "name": "this.cachedPropertyWriteName=name;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 502,
            "endLine": 502,
            "startColumn": 3,
            "endColumn": 39
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public setValue(newValue Object) : void",
            "type": "Statement",
            "name": "Indexer.this.cachedWriteTargetType=contextObjectClass;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 717,
            "endLine": 717,
            "startColumn": 7,
            "endColumn": 63
          },
          "rightSideLocation": {
            "container": "private updatePropertyWriteState(propertyAccessor PropertyAccessor, name String, targetType Class<?>) : void",
            "type": "Statement",
            "name": "this.cachedPropertyWriteTargetType=targetType;\n",
            "filePath": "spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java",
            "startLine": 503,
            "endLine": 503,
            "startColumn": 3,
            "endColumn": 51
          },
          "validation": true
        }
      ]
    }
  ]
}