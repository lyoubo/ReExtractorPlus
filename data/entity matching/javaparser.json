{
  "results": [
    {
      "repository": "https://github.com/javaparser/javaparser.git",
      "sha1": "37f42462dec876276ca3c7da672906825da77fd0",
      "url": "https://github.com/javaparser/javaparser/commit/37f42462dec876276ca3c7da672906825da77fd0",
      "commonMatching": [
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.resolution.types.ResolvedReferenceType",
            "type": "Method",
            "name": "erasureOfParamaters",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 577,
            "endLine": 590,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.resolution.types.ResolvedReferenceType",
            "type": "Method",
            "name": "erasureOfParamaters",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 577,
            "endLine": 579,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.resolution.types.ResolvedReferenceType",
            "type": "Class",
            "name": "ResolvedReferenceType",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 40,
            "endLine": 600,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.resolution.types.ResolvedReferenceType",
            "type": "Class",
            "name": "ResolvedReferenceType",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 40,
            "endLine": 589,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest",
            "type": "Method",
            "name": "erasure_arraytype_with_bound",
            "filePath": "javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/model/typesystem/ReferenceTypeTest.java",
            "startLine": 888,
            "endLine": 896,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest",
            "type": "Method",
            "name": "erasure_arraytype_with_bound",
            "filePath": "javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/model/typesystem/ReferenceTypeTest.java",
            "startLine": 914,
            "endLine": 922,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest",
            "type": "Method",
            "name": "erasure_type_variable",
            "filePath": "javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/model/typesystem/ReferenceTypeTest.java",
            "startLine": 898,
            "endLine": 906,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest",
            "type": "Method",
            "name": "erasure_type_variable",
            "filePath": "javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/model/typesystem/ReferenceTypeTest.java",
            "startLine": 887,
            "endLine": 895,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest",
            "type": "Class",
            "name": "ReferenceTypeTest",
            "filePath": "javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/model/typesystem/ReferenceTypeTest.java",
            "startLine": 59,
            "endLine": 1026,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.symbolsolver.model.typesystem.ReferenceTypeTest",
            "type": "Class",
            "name": "ReferenceTypeTest",
            "filePath": "javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/model/typesystem/ReferenceTypeTest.java",
            "startLine": 67,
            "endLine": 1051,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private erasureOfParamaters(typeParametersMap ResolvedTypeParametersMap) : List<ResolvedType>",
            "type": "Statement",
            "name": "return erasedParameters;\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 589,
            "endLine": 589,
            "startColumn": 9,
            "endColumn": 33
          },
          "rightSideLocation": {
            "container": "private erasureOfParamaters(typeParametersMap ResolvedTypeParametersMap) : List<ResolvedType>",
            "type": "Statement",
            "name": "return new ArrayList<ResolvedType>();\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 578,
            "endLine": 578,
            "startColumn": 9,
            "endColumn": 46
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package erasure_arraytype_with_bound() : void",
            "type": "Statement",
            "name": "String expected=\"java.util.List<java.io.Serializable>[]\";\n",
            "filePath": "javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/model/typesystem/ReferenceTypeTest.java",
            "startLine": 894,
            "endLine": 894,
            "startColumn": 9,
            "endColumn": 68
          },
          "rightSideLocation": {
            "container": "package erasure_arraytype_with_bound() : void",
            "type": "Statement",
            "name": "String expected=\"java.util.List[]\";\n",
            "filePath": "javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/model/typesystem/ReferenceTypeTest.java",
            "startLine": 920,
            "endLine": 920,
            "startColumn": 9,
            "endColumn": 46
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "package erasure_type_variable() : void",
            "type": "Statement",
            "name": "String expected=\"A<java.lang.Number>\";\n",
            "filePath": "javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/model/typesystem/ReferenceTypeTest.java",
            "startLine": 904,
            "endLine": 904,
            "startColumn": 9,
            "endColumn": 50
          },
          "rightSideLocation": {
            "container": "package erasure_type_variable() : void",
            "type": "Statement",
            "name": "String expected=\"A\";\n",
            "filePath": "javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/model/typesystem/ReferenceTypeTest.java",
            "startLine": 893,
            "endLine": 893,
            "startColumn": 9,
            "endColumn": 32
          },
          "validation": true
        }
      ],
      "ourApproach": [],
      "baseline": []
    },
    {
      "repository": "https://github.com/javaparser/javaparser.git",
      "sha1": "b3c51ccbd030fbaac1c76ea69e2947c26a80c5a1",
      "url": "https://github.com/javaparser/javaparser/commit/b3c51ccbd030fbaac1c76ea69e2947c26a80c5a1",
      "commonMatching": [
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.resolution.types.ResolvedReferenceType",
            "type": "Method",
            "name": "equals",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 87,
            "endLine": 100,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.resolution.types.ResolvedReferenceType",
            "type": "Method",
            "name": "equals",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 87,
            "endLine": 110,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.resolution.types.ResolvedReferenceType",
            "type": "Class",
            "name": "ResolvedReferenceType",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 40,
            "endLine": 601,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.resolution.types.ResolvedReferenceType",
            "type": "Class",
            "name": "ResolvedReferenceType",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 40,
            "endLine": 600,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "public equals(o Object) : boolean",
            "type": "Statement",
            "name": "if(o == null || (!isLazyType(o) && getClass() != o.getClass()) || (isLazyType(o) && !this.equals(asResolvedReferenceType(o))))",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 91,
            "endLine": 93,
            "startColumn": 9,
            "endColumn": 26
          },
          "rightSideLocation": {
            "container": "public equals(o Object) : boolean",
            "type": "Statement",
            "name": "if(o == null)",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 91,
            "endLine": 92,
            "startColumn": 9,
            "endColumn": 26
          },
          "validation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "container": "public equals(o Object) : boolean",
            "type": "Statement",
            "name": "ResolvedReferenceType that=asResolvedReferenceType(o);\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 94,
            "endLine": 94,
            "startColumn": 9,
            "endColumn": 65
          },
          "rightSideLocation": {
            "container": "public equals(o Object) : boolean",
            "type": "Statement",
            "name": "ResolvedReferenceType that=(ResolvedReferenceType)o;\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 104,
            "endLine": 104,
            "startColumn": 9,
            "endColumn": 64
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private asResolvedReferenceType(o Object) : ResolvedReferenceType",
            "type": "Statement",
            "name": "return ((LazyType)o).asReferenceType();\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 108,
            "endLine": 108,
            "startColumn": 7,
            "endColumn": 47
          },
          "rightSideLocation": {
            "container": "public equals(o Object) : boolean",
            "type": "Statement",
            "name": "final LazyType lazyType=(LazyType)o;\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 95,
            "endLine": 95,
            "startColumn": 13,
            "endColumn": 52
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private asResolvedReferenceType(o Object) : ResolvedReferenceType",
            "type": "Statement",
            "name": "if(isLazyType(o))",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 107,
            "endLine": 109,
            "startColumn": 6,
            "endColumn": 7
          },
          "rightSideLocation": {
            "container": "public equals(o Object) : boolean",
            "type": "Statement",
            "name": "if(o instanceof LazyType)",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/resolution/types/ResolvedReferenceType.java",
            "startLine": 94,
            "endLine": 99,
            "startColumn": 9,
            "endColumn": 10
          },
          "validation": true
        }
      ],
      "baseline": []
    },
    {
      "repository": "https://github.com/javaparser/javaparser.git",
      "sha1": "6a26527b8a0745c53be0523f009a01aa0540cfb3",
      "url": "https://github.com/javaparser/javaparser/commit/6a26527b8a0745c53be0523f009a01aa0540cfb3",
      "commonMatching": [
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest",
            "type": "Class",
            "name": "LexicalPreservingPrinterTest",
            "filePath": "javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinterTest.java",
            "startLine": 54,
            "endLine": 1837,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinterTest",
            "type": "Class",
            "name": "LexicalPreservingPrinterTest",
            "filePath": "javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinterTest.java",
            "startLine": 57,
            "endLine": 1858,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.Observer",
            "type": "Method",
            "name": "findChildTextElementForComment",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 288,
            "endLine": 299,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.Observer",
            "type": "Method",
            "name": "findChildTextElementForComment",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 288,
            "endLine": 305,
            "startColumn": 9,
            "endColumn": 10
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.Observer",
            "type": "Method",
            "name": "findTokenTextElementForComment",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 325,
            "endLine": 339,
            "startColumn": 9,
            "endColumn": 10
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.Observer",
            "type": "Method",
            "name": "findTokenTextElementForComment",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 331,
            "endLine": 358,
            "startColumn": 9,
            "endColumn": 10
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.Observer",
            "type": "Class",
            "name": "Observer",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 123,
            "endLine": 407,
            "startColumn": 5,
            "endColumn": 6
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.Observer",
            "type": "Class",
            "name": "Observer",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 123,
            "endLine": 419,
            "startColumn": 5,
            "endColumn": 6
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter",
            "type": "Class",
            "name": "LexicalPreservingPrinter",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 58,
            "endLine": 717,
            "startColumn": 0,
            "endColumn": 2
          },
          "rightSideLocation": {
            "container": "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter",
            "type": "Class",
            "name": "LexicalPreservingPrinter",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 58,
            "endLine": 729,
            "startColumn": 0,
            "endColumn": 2
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private findChildTextElementForComment(oldValue Comment, nodeText NodeText) : List<ChildTextElement>",
            "type": "Statement",
            "name": "matchingChildElements=matchingChildElements.stream().filter(t -> isEqualRange(t.getChild().getRange(),oldValue.getRange())).collect(toList());\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 293,
            "endLine": 293,
            "startColumn": 17,
            "endColumn": 162
          },
          "rightSideLocation": {
            "container": "private findChildTextElementForComment(oldValue Comment, nodeText NodeText) : List<ChildTextElement>",
            "type": "Statement",
            "name": "matchingChildElements=matchingChildElements.stream().filter(t -> t.getChild().hasRange() && oldValue.hasRange()).filter(t -> t.getChild().getRange().get().equals(oldValue.getRange().get()) || (t.getChild().getComment().isPresent() && t.getChild().getComment().get().hasRange() && t.getChild().getComment().get().getRange().get().equals(oldValue.getRange().get()))).collect(toList());\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 293,
            "endLine": 299,
            "startColumn": 5,
            "endColumn": 26
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private findTokenTextElementForComment(oldValue Comment, nodeText NodeText) : List<TokenTextElement>",
            "type": "Statement",
            "name": "matchingTokens=nodeText.getElements().stream().filter(e -> e.isToken(SINGLE_LINE_COMMENT)).map(e -> (TokenTextElement)e).filter(t -> t.getText().trim().equals((oldValue.getHeader() + oldValue.getContent()).trim())).collect(toList());\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 332,
            "endLine": 332,
            "startColumn": 17,
            "endColumn": 253
          },
          "rightSideLocation": {
            "container": "private findTokenTextElementForComment(oldValue Comment, nodeText NodeText) : List<TokenTextElement>",
            "type": "Statement",
            "name": "matchingTokens=nodeText.getElements().stream().filter(e -> e.isToken(SINGLE_LINE_COMMENT)).map(e -> (TokenTextElement)e).filter(t -> t.getText().trim().equals((oldValue.asString()).trim())).collect(toList());\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 346,
            "endLine": 350,
            "startColumn": 5,
            "endColumn": 26
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private findTokenTextElementForComment(oldValue Comment, nodeText NodeText) : List<TokenTextElement>",
            "type": "Statement",
            "name": "matchingTokens=nodeText.getElements().stream().filter(e -> e.isToken(MULTI_LINE_COMMENT)).map(e -> (TokenTextElement)e).filter(t -> t.getText().equals(oldValue.getHeader() + oldValue.getContent() + oldValue.getFooter())).collect(toList());\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 330,
            "endLine": 330,
            "startColumn": 17,
            "endColumn": 259
          },
          "rightSideLocation": {
            "container": "private findTokenTextElementForComment(oldValue Comment, nodeText NodeText) : List<TokenTextElement>",
            "type": "Statement",
            "name": "matchingTokens=nodeText.getElements().stream().filter(e -> e.isToken(MULTI_LINE_COMMENT)).map(e -> (TokenTextElement)e).filter(t -> t.getText().equals(oldValue.asString())).collect(toList());\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 340,
            "endLine": 344,
            "startColumn": 5,
            "endColumn": 26
          },
          "validation": true
        },
        {
          "leftSideLocation": {
            "container": "private findTokenTextElementForComment(oldValue Comment, nodeText NodeText) : List<TokenTextElement>",
            "type": "Statement",
            "name": "matchingTokens=nodeText.getElements().stream().filter(e -> e.isToken(JAVADOC_COMMENT)).map(e -> (TokenTextElement)e).filter(t -> t.getText().equals(oldValue.getHeader() + oldValue.getContent() + oldValue.getFooter())).collect(toList());\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 328,
            "endLine": 328,
            "startColumn": 17,
            "endColumn": 256
          },
          "rightSideLocation": {
            "container": "private findTokenTextElementForComment(oldValue Comment, nodeText NodeText) : List<TokenTextElement>",
            "type": "Statement",
            "name": "matchingTokens=nodeText.getElements().stream().filter(e -> e.isToken(JAVADOC_COMMENT)).map(e -> (TokenTextElement)e).filter(t -> t.getText().equals(oldValue.asString())).collect(toList());\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 334,
            "endLine": 338,
            "startColumn": 5,
            "endColumn": 26
          },
          "validation": true
        }
      ],
      "ourApproach": [
        {
          "leftSideLocation": {
            "container": "private findTokenTextElementForComment(oldValue Comment, nodeText NodeText) : List<TokenTextElement>",
            "type": "Statement",
            "name": "return matchingTokens;\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 338,
            "endLine": 338,
            "startColumn": 13,
            "endColumn": 35
          },
          "rightSideLocation": {
            "container": "private findTokenTextElementForComment(oldValue Comment, nodeText NodeText) : List<TokenTextElement>",
            "type": "Statement",
            "name": "return matchingTokens.stream().filter(t -> t.getToken().hasRange() && oldValue.hasRange()).filter(t -> t.getToken().getRange().get().equals(oldValue.getRange().get())).collect(toList());\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 354,
            "endLine": 357,
            "startColumn": 13,
            "endColumn": 38
          },
          "validation": true
        }
      ],
      "baseline": [
        {
          "leftSideLocation": {
            "container": "private isEqualRange(range1 Optional<Range>, range2 Optional<Range>) : boolean",
            "type": "Statement",
            "name": "if(range1.isPresent() && range2.isPresent())",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 342,
            "endLine": 344,
            "startColumn": 13,
            "endColumn": 14
          },
          "rightSideLocation": {
            "container": "private findTokenTextElementForComment(oldValue Comment, nodeText NodeText) : List<TokenTextElement>",
            "type": "Statement",
            "name": "return matchingTokens.stream().filter(t -> t.getToken().hasRange() && oldValue.hasRange()).filter(t -> t.getToken().getRange().get().equals(oldValue.getRange().get())).collect(toList());\n",
            "filePath": "javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java",
            "startLine": 354,
            "endLine": 357,
            "startColumn": 13,
            "endColumn": 38
          },
          "validation": false
        }
      ]
    }
  ]
}